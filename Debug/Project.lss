
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000258  00800060  00004e16  00004eaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cf  008002b8  008002b8  00005102  2**0
                  ALLOC
  3 .stab         00004ad0  00000000  00000000  00005104  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000027d8  00000000  00000000  00009bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000c3ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000c52c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000c6ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000e70e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000f87e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00010880  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  00010a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  00010ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001158f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__vector_10>
      2c:	0c 94 ac 12 	jmp	0x2558	; 0x2558 <__vector_11>
      30:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3b       	cpi	r26, 0xB8	; 184
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a8 eb       	ldi	r26, 0xB8	; 184
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bb 1b 	call	0x3776	; 0x3776 <main>
      8a:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a9 26 	jmp	0x4d52	; 0x4d52 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b5 26 	jmp	0x4d6a	; 0x4d6a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b5 26 	jmp	0x4d6a	; 0x4d6a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a9 26 	jmp	0x4d52	; 0x4d52 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b5 26 	jmp	0x4d6a	; 0x4d6a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b5 26 	jmp	0x4d6a	; 0x4d6a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b5 26 	jmp	0x4d6a	; 0x4d6a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9d 26 	jmp	0x4d3a	; 0x4d3a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b9 26 	jmp	0x4d72	; 0x4d72 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 95 26 	jmp	0x4d2a	; 0x4d2a <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__floatunsisf+0xe0>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__floatunsisf+0xbc>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__floatunsisf+0x7c>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__floatunsisf+0x74>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__floatunsisf+0x9e>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__floatunsisf+0xe0>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__floatunsisf+0xe0>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__floatunsisf+0xcc>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__floatunsisf+0xc4>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 b1 26 	jmp	0x4d62	; 0x4d62 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e7 58       	subi	r30, 0x87	; 135
     972:	fe 4f       	sbci	r31, 0xFE	; 254
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <Stepper_VidGo_Backward>:
*/

/*------------------------- Drive Backward -------------------------*/

void Stepper_VidGo_Backward()
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	a1 97       	sbiw	r28, 0x21	; 33
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
	u8 Pin_Array[4]={Stepper_S1_PIN,Stepper_S2_PIN,Stepper_S3_PIN,Stepper_S4_PIN};
     cea:	1e 8e       	std	Y+30, r1	; 0x1e
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	8f 8f       	std	Y+31, r24	; 0x1f
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	88 a3       	std	Y+32, r24	; 0x20
     cf4:	83 e0       	ldi	r24, 0x03	; 3
     cf6:	89 a3       	std	Y+33, r24	; 0x21
	for(s8 i=4;i>-1;i--)
     cf8:	84 e0       	ldi	r24, 0x04	; 4
     cfa:	8d 8f       	std	Y+29, r24	; 0x1d
     cfc:	07 c1       	rjmp	.+526    	; 0xf0c <Stepper_VidGo_Backward+0x236>
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	a8 ec       	ldi	r26, 0xC8	; 200
     d04:	b2 e4       	ldi	r27, 0x42	; 66
     d06:	89 8f       	std	Y+25, r24	; 0x19
     d08:	9a 8f       	std	Y+26, r25	; 0x1a
     d0a:	ab 8f       	std	Y+27, r26	; 0x1b
     d0c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d0e:	69 8d       	ldd	r22, Y+25	; 0x19
     d10:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d12:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d14:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	4a e7       	ldi	r20, 0x7A	; 122
     d1c:	53 e4       	ldi	r21, 0x43	; 67
     d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	8d 8b       	std	Y+21, r24	; 0x15
     d28:	9e 8b       	std	Y+22, r25	; 0x16
     d2a:	af 8b       	std	Y+23, r26	; 0x17
     d2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d2e:	6d 89       	ldd	r22, Y+21	; 0x15
     d30:	7e 89       	ldd	r23, Y+22	; 0x16
     d32:	8f 89       	ldd	r24, Y+23	; 0x17
     d34:	98 8d       	ldd	r25, Y+24	; 0x18
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	40 e8       	ldi	r20, 0x80	; 128
     d3c:	5f e3       	ldi	r21, 0x3F	; 63
     d3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d42:	88 23       	and	r24, r24
     d44:	2c f4       	brge	.+10     	; 0xd50 <Stepper_VidGo_Backward+0x7a>
		__ticks = 1;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	9c 8b       	std	Y+20, r25	; 0x14
     d4c:	8b 8b       	std	Y+19, r24	; 0x13
     d4e:	3f c0       	rjmp	.+126    	; 0xdce <Stepper_VidGo_Backward+0xf8>
	else if (__tmp > 65535)
     d50:	6d 89       	ldd	r22, Y+21	; 0x15
     d52:	7e 89       	ldd	r23, Y+22	; 0x16
     d54:	8f 89       	ldd	r24, Y+23	; 0x17
     d56:	98 8d       	ldd	r25, Y+24	; 0x18
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	3f ef       	ldi	r19, 0xFF	; 255
     d5c:	4f e7       	ldi	r20, 0x7F	; 127
     d5e:	57 e4       	ldi	r21, 0x47	; 71
     d60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d64:	18 16       	cp	r1, r24
     d66:	4c f5       	brge	.+82     	; 0xdba <Stepper_VidGo_Backward+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d68:	69 8d       	ldd	r22, Y+25	; 0x19
     d6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	40 e2       	ldi	r20, 0x20	; 32
     d76:	51 e4       	ldi	r21, 0x41	; 65
     d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	bc 01       	movw	r22, r24
     d82:	cd 01       	movw	r24, r26
     d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d88:	dc 01       	movw	r26, r24
     d8a:	cb 01       	movw	r24, r22
     d8c:	9c 8b       	std	Y+20, r25	; 0x14
     d8e:	8b 8b       	std	Y+19, r24	; 0x13
     d90:	0f c0       	rjmp	.+30     	; 0xdb0 <Stepper_VidGo_Backward+0xda>
     d92:	89 e1       	ldi	r24, 0x19	; 25
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	9a 8b       	std	Y+18, r25	; 0x12
     d98:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d9a:	89 89       	ldd	r24, Y+17	; 0x11
     d9c:	9a 89       	ldd	r25, Y+18	; 0x12
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <Stepper_VidGo_Backward+0xc8>
     da2:	9a 8b       	std	Y+18, r25	; 0x12
     da4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da6:	8b 89       	ldd	r24, Y+19	; 0x13
     da8:	9c 89       	ldd	r25, Y+20	; 0x14
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	9c 8b       	std	Y+20, r25	; 0x14
     dae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db0:	8b 89       	ldd	r24, Y+19	; 0x13
     db2:	9c 89       	ldd	r25, Y+20	; 0x14
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	69 f7       	brne	.-38     	; 0xd92 <Stepper_VidGo_Backward+0xbc>
     db8:	14 c0       	rjmp	.+40     	; 0xde2 <Stepper_VidGo_Backward+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dba:	6d 89       	ldd	r22, Y+21	; 0x15
     dbc:	7e 89       	ldd	r23, Y+22	; 0x16
     dbe:	8f 89       	ldd	r24, Y+23	; 0x17
     dc0:	98 8d       	ldd	r25, Y+24	; 0x18
     dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	9c 8b       	std	Y+20, r25	; 0x14
     dcc:	8b 8b       	std	Y+19, r24	; 0x13
     dce:	8b 89       	ldd	r24, Y+19	; 0x13
     dd0:	9c 89       	ldd	r25, Y+20	; 0x14
     dd2:	98 8b       	std	Y+16, r25	; 0x10
     dd4:	8f 87       	std	Y+15, r24	; 0x0f
     dd6:	8f 85       	ldd	r24, Y+15	; 0x0f
     dd8:	98 89       	ldd	r25, Y+16	; 0x10
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	f1 f7       	brne	.-4      	; 0xdda <Stepper_VidGo_Backward+0x104>
     dde:	98 8b       	std	Y+16, r25	; 0x10
     de0:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(100);
		DIO_VidSet_Pin_Value(Stepper_CTRL_PORT,Pin_Array[i],HI);
     de2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     de4:	28 2f       	mov	r18, r24
     de6:	33 27       	eor	r19, r19
     de8:	27 fd       	sbrc	r18, 7
     dea:	30 95       	com	r19
     dec:	ce 01       	movw	r24, r28
     dee:	4e 96       	adiw	r24, 0x1e	; 30
     df0:	fc 01       	movw	r30, r24
     df2:	e2 0f       	add	r30, r18
     df4:	f3 1f       	adc	r31, r19
     df6:	90 81       	ld	r25, Z
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	69 2f       	mov	r22, r25
     dfc:	41 e0       	ldi	r20, 0x01	; 1
     dfe:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	a8 ec       	ldi	r26, 0xC8	; 200
     e08:	b2 e4       	ldi	r27, 0x42	; 66
     e0a:	8b 87       	std	Y+11, r24	; 0x0b
     e0c:	9c 87       	std	Y+12, r25	; 0x0c
     e0e:	ad 87       	std	Y+13, r26	; 0x0d
     e10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e12:	6b 85       	ldd	r22, Y+11	; 0x0b
     e14:	7c 85       	ldd	r23, Y+12	; 0x0c
     e16:	8d 85       	ldd	r24, Y+13	; 0x0d
     e18:	9e 85       	ldd	r25, Y+14	; 0x0e
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	4a e7       	ldi	r20, 0x7A	; 122
     e20:	53 e4       	ldi	r21, 0x43	; 67
     e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	8f 83       	std	Y+7, r24	; 0x07
     e2c:	98 87       	std	Y+8, r25	; 0x08
     e2e:	a9 87       	std	Y+9, r26	; 0x09
     e30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e32:	6f 81       	ldd	r22, Y+7	; 0x07
     e34:	78 85       	ldd	r23, Y+8	; 0x08
     e36:	89 85       	ldd	r24, Y+9	; 0x09
     e38:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	40 e8       	ldi	r20, 0x80	; 128
     e40:	5f e3       	ldi	r21, 0x3F	; 63
     e42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e46:	88 23       	and	r24, r24
     e48:	2c f4       	brge	.+10     	; 0xe54 <Stepper_VidGo_Backward+0x17e>
		__ticks = 1;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	9e 83       	std	Y+6, r25	; 0x06
     e50:	8d 83       	std	Y+5, r24	; 0x05
     e52:	3f c0       	rjmp	.+126    	; 0xed2 <Stepper_VidGo_Backward+0x1fc>
	else if (__tmp > 65535)
     e54:	6f 81       	ldd	r22, Y+7	; 0x07
     e56:	78 85       	ldd	r23, Y+8	; 0x08
     e58:	89 85       	ldd	r24, Y+9	; 0x09
     e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	3f ef       	ldi	r19, 0xFF	; 255
     e60:	4f e7       	ldi	r20, 0x7F	; 127
     e62:	57 e4       	ldi	r21, 0x47	; 71
     e64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e68:	18 16       	cp	r1, r24
     e6a:	4c f5       	brge	.+82     	; 0xebe <Stepper_VidGo_Backward+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e70:	8d 85       	ldd	r24, Y+13	; 0x0d
     e72:	9e 85       	ldd	r25, Y+14	; 0x0e
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	40 e2       	ldi	r20, 0x20	; 32
     e7a:	51 e4       	ldi	r21, 0x41	; 65
     e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e80:	dc 01       	movw	r26, r24
     e82:	cb 01       	movw	r24, r22
     e84:	bc 01       	movw	r22, r24
     e86:	cd 01       	movw	r24, r26
     e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	9e 83       	std	Y+6, r25	; 0x06
     e92:	8d 83       	std	Y+5, r24	; 0x05
     e94:	0f c0       	rjmp	.+30     	; 0xeb4 <Stepper_VidGo_Backward+0x1de>
     e96:	89 e1       	ldi	r24, 0x19	; 25
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	9c 83       	std	Y+4, r25	; 0x04
     e9c:	8b 83       	std	Y+3, r24	; 0x03
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	9c 81       	ldd	r25, Y+4	; 0x04
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	f1 f7       	brne	.-4      	; 0xea2 <Stepper_VidGo_Backward+0x1cc>
     ea6:	9c 83       	std	Y+4, r25	; 0x04
     ea8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eaa:	8d 81       	ldd	r24, Y+5	; 0x05
     eac:	9e 81       	ldd	r25, Y+6	; 0x06
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	9e 83       	std	Y+6, r25	; 0x06
     eb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb4:	8d 81       	ldd	r24, Y+5	; 0x05
     eb6:	9e 81       	ldd	r25, Y+6	; 0x06
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	69 f7       	brne	.-38     	; 0xe96 <Stepper_VidGo_Backward+0x1c0>
     ebc:	14 c0       	rjmp	.+40     	; 0xee6 <Stepper_VidGo_Backward+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebe:	6f 81       	ldd	r22, Y+7	; 0x07
     ec0:	78 85       	ldd	r23, Y+8	; 0x08
     ec2:	89 85       	ldd	r24, Y+9	; 0x09
     ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	9e 83       	std	Y+6, r25	; 0x06
     ed0:	8d 83       	std	Y+5, r24	; 0x05
     ed2:	8d 81       	ldd	r24, Y+5	; 0x05
     ed4:	9e 81       	ldd	r25, Y+6	; 0x06
     ed6:	9a 83       	std	Y+2, r25	; 0x02
     ed8:	89 83       	std	Y+1, r24	; 0x01
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	9a 81       	ldd	r25, Y+2	; 0x02
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <Stepper_VidGo_Backward+0x208>
     ee2:	9a 83       	std	Y+2, r25	; 0x02
     ee4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		DIO_VidSet_Pin_Value(Stepper_CTRL_PORT,Pin_Array[i],LOW);
     ee6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ee8:	28 2f       	mov	r18, r24
     eea:	33 27       	eor	r19, r19
     eec:	27 fd       	sbrc	r18, 7
     eee:	30 95       	com	r19
     ef0:	ce 01       	movw	r24, r28
     ef2:	4e 96       	adiw	r24, 0x1e	; 30
     ef4:	fc 01       	movw	r30, r24
     ef6:	e2 0f       	add	r30, r18
     ef8:	f3 1f       	adc	r31, r19
     efa:	90 81       	ld	r25, Z
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	69 2f       	mov	r22, r25
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
/*------------------------- Drive Backward -------------------------*/

void Stepper_VidGo_Backward()
{
	u8 Pin_Array[4]={Stepper_S1_PIN,Stepper_S2_PIN,Stepper_S3_PIN,Stepper_S4_PIN};
	for(s8 i=4;i>-1;i--)
     f06:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f08:	81 50       	subi	r24, 0x01	; 1
     f0a:	8d 8f       	std	Y+29, r24	; 0x1d
     f0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f0e:	88 23       	and	r24, r24
     f10:	0c f0       	brlt	.+2      	; 0xf14 <Stepper_VidGo_Backward+0x23e>
     f12:	f5 ce       	rjmp	.-534    	; 0xcfe <Stepper_VidGo_Backward+0x28>
		_delay_ms(100);
		DIO_VidSet_Pin_Value(Stepper_CTRL_PORT,Pin_Array[i],HI);
		_delay_ms(100);
		DIO_VidSet_Pin_Value(Stepper_CTRL_PORT,Pin_Array[i],LOW);
	}
}
     f14:	a1 96       	adiw	r28, 0x21	; 33
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <Stepper_VidGo_Forward_Micro>:


/*------------------------- Motor Stop -------------------------*/

void Stepper_VidGo_Forward_Micro()
{
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	ee 97       	sbiw	r28, 0x3e	; 62
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
	u8 flag=TRUE;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	8a af       	std	Y+58, r24	; 0x3a
	u8 Pin_Array[4]={Stepper_S1_PIN,Stepper_S2_PIN,Stepper_S3_PIN,Stepper_S4_PIN};
     f3e:	1b ae       	std	Y+59, r1	; 0x3b
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	8c af       	std	Y+60, r24	; 0x3c
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	8d af       	std	Y+61, r24	; 0x3d
     f48:	83 e0       	ldi	r24, 0x03	; 3
     f4a:	8e af       	std	Y+62, r24	; 0x3e
	for(s8 i=0;i<4;i++)
     f4c:	19 ae       	std	Y+57, r1	; 0x39
     f4e:	0e c2       	rjmp	.+1052   	; 0x136c <Stepper_VidGo_Forward_Micro+0x446>
	{
		if(flag)
     f50:	8a ad       	ldd	r24, Y+58	; 0x3a
     f52:	88 23       	and	r24, r24
     f54:	09 f4       	brne	.+2      	; 0xf58 <Stepper_VidGo_Forward_Micro+0x32>
     f56:	f9 c0       	rjmp	.+498    	; 0x114a <Stepper_VidGo_Forward_Micro+0x224>
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	a8 ec       	ldi	r26, 0xC8	; 200
     f5e:	b2 e4       	ldi	r27, 0x42	; 66
     f60:	8d ab       	std	Y+53, r24	; 0x35
     f62:	9e ab       	std	Y+54, r25	; 0x36
     f64:	af ab       	std	Y+55, r26	; 0x37
     f66:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f68:	6d a9       	ldd	r22, Y+53	; 0x35
     f6a:	7e a9       	ldd	r23, Y+54	; 0x36
     f6c:	8f a9       	ldd	r24, Y+55	; 0x37
     f6e:	98 ad       	ldd	r25, Y+56	; 0x38
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	4a e7       	ldi	r20, 0x7A	; 122
     f76:	53 e4       	ldi	r21, 0x43	; 67
     f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	89 ab       	std	Y+49, r24	; 0x31
     f82:	9a ab       	std	Y+50, r25	; 0x32
     f84:	ab ab       	std	Y+51, r26	; 0x33
     f86:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f88:	69 a9       	ldd	r22, Y+49	; 0x31
     f8a:	7a a9       	ldd	r23, Y+50	; 0x32
     f8c:	8b a9       	ldd	r24, Y+51	; 0x33
     f8e:	9c a9       	ldd	r25, Y+52	; 0x34
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	40 e8       	ldi	r20, 0x80	; 128
     f96:	5f e3       	ldi	r21, 0x3F	; 63
     f98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f9c:	88 23       	and	r24, r24
     f9e:	2c f4       	brge	.+10     	; 0xfaa <Stepper_VidGo_Forward_Micro+0x84>
		__ticks = 1;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	98 ab       	std	Y+48, r25	; 0x30
     fa6:	8f a7       	std	Y+47, r24	; 0x2f
     fa8:	3f c0       	rjmp	.+126    	; 0x1028 <Stepper_VidGo_Forward_Micro+0x102>
	else if (__tmp > 65535)
     faa:	69 a9       	ldd	r22, Y+49	; 0x31
     fac:	7a a9       	ldd	r23, Y+50	; 0x32
     fae:	8b a9       	ldd	r24, Y+51	; 0x33
     fb0:	9c a9       	ldd	r25, Y+52	; 0x34
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	3f ef       	ldi	r19, 0xFF	; 255
     fb6:	4f e7       	ldi	r20, 0x7F	; 127
     fb8:	57 e4       	ldi	r21, 0x47	; 71
     fba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fbe:	18 16       	cp	r1, r24
     fc0:	4c f5       	brge	.+82     	; 0x1014 <Stepper_VidGo_Forward_Micro+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fc2:	6d a9       	ldd	r22, Y+53	; 0x35
     fc4:	7e a9       	ldd	r23, Y+54	; 0x36
     fc6:	8f a9       	ldd	r24, Y+55	; 0x37
     fc8:	98 ad       	ldd	r25, Y+56	; 0x38
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	40 e2       	ldi	r20, 0x20	; 32
     fd0:	51 e4       	ldi	r21, 0x41	; 65
     fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	bc 01       	movw	r22, r24
     fdc:	cd 01       	movw	r24, r26
     fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	98 ab       	std	Y+48, r25	; 0x30
     fe8:	8f a7       	std	Y+47, r24	; 0x2f
     fea:	0f c0       	rjmp	.+30     	; 0x100a <Stepper_VidGo_Forward_Micro+0xe4>
     fec:	89 e1       	ldi	r24, 0x19	; 25
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	9e a7       	std	Y+46, r25	; 0x2e
     ff2:	8d a7       	std	Y+45, r24	; 0x2d
     ff4:	8d a5       	ldd	r24, Y+45	; 0x2d
     ff6:	9e a5       	ldd	r25, Y+46	; 0x2e
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <Stepper_VidGo_Forward_Micro+0xd2>
     ffc:	9e a7       	std	Y+46, r25	; 0x2e
     ffe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1000:	8f a5       	ldd	r24, Y+47	; 0x2f
    1002:	98 a9       	ldd	r25, Y+48	; 0x30
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	98 ab       	std	Y+48, r25	; 0x30
    1008:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    100a:	8f a5       	ldd	r24, Y+47	; 0x2f
    100c:	98 a9       	ldd	r25, Y+48	; 0x30
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	69 f7       	brne	.-38     	; 0xfec <Stepper_VidGo_Forward_Micro+0xc6>
    1012:	14 c0       	rjmp	.+40     	; 0x103c <Stepper_VidGo_Forward_Micro+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1014:	69 a9       	ldd	r22, Y+49	; 0x31
    1016:	7a a9       	ldd	r23, Y+50	; 0x32
    1018:	8b a9       	ldd	r24, Y+51	; 0x33
    101a:	9c a9       	ldd	r25, Y+52	; 0x34
    101c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	98 ab       	std	Y+48, r25	; 0x30
    1026:	8f a7       	std	Y+47, r24	; 0x2f
    1028:	8f a5       	ldd	r24, Y+47	; 0x2f
    102a:	98 a9       	ldd	r25, Y+48	; 0x30
    102c:	9c a7       	std	Y+44, r25	; 0x2c
    102e:	8b a7       	std	Y+43, r24	; 0x2b
    1030:	8b a5       	ldd	r24, Y+43	; 0x2b
    1032:	9c a5       	ldd	r25, Y+44	; 0x2c
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	f1 f7       	brne	.-4      	; 0x1034 <Stepper_VidGo_Forward_Micro+0x10e>
    1038:	9c a7       	std	Y+44, r25	; 0x2c
    103a:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(100);
			DIO_VidSet_Pin_Value(Stepper_CTRL_PORT,Pin_Array[i],HI);
    103c:	89 ad       	ldd	r24, Y+57	; 0x39
    103e:	28 2f       	mov	r18, r24
    1040:	33 27       	eor	r19, r19
    1042:	27 fd       	sbrc	r18, 7
    1044:	30 95       	com	r19
    1046:	ce 01       	movw	r24, r28
    1048:	cb 96       	adiw	r24, 0x3b	; 59
    104a:	fc 01       	movw	r30, r24
    104c:	e2 0f       	add	r30, r18
    104e:	f3 1f       	adc	r31, r19
    1050:	90 81       	ld	r25, Z
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	69 2f       	mov	r22, r25
    1056:	41 e0       	ldi	r20, 0x01	; 1
    1058:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	a8 ec       	ldi	r26, 0xC8	; 200
    1062:	b2 e4       	ldi	r27, 0x42	; 66
    1064:	8f a3       	std	Y+39, r24	; 0x27
    1066:	98 a7       	std	Y+40, r25	; 0x28
    1068:	a9 a7       	std	Y+41, r26	; 0x29
    106a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    106c:	6f a1       	ldd	r22, Y+39	; 0x27
    106e:	78 a5       	ldd	r23, Y+40	; 0x28
    1070:	89 a5       	ldd	r24, Y+41	; 0x29
    1072:	9a a5       	ldd	r25, Y+42	; 0x2a
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	4a e7       	ldi	r20, 0x7A	; 122
    107a:	53 e4       	ldi	r21, 0x43	; 67
    107c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	8b a3       	std	Y+35, r24	; 0x23
    1086:	9c a3       	std	Y+36, r25	; 0x24
    1088:	ad a3       	std	Y+37, r26	; 0x25
    108a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    108c:	6b a1       	ldd	r22, Y+35	; 0x23
    108e:	7c a1       	ldd	r23, Y+36	; 0x24
    1090:	8d a1       	ldd	r24, Y+37	; 0x25
    1092:	9e a1       	ldd	r25, Y+38	; 0x26
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	40 e8       	ldi	r20, 0x80	; 128
    109a:	5f e3       	ldi	r21, 0x3F	; 63
    109c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10a0:	88 23       	and	r24, r24
    10a2:	2c f4       	brge	.+10     	; 0x10ae <Stepper_VidGo_Forward_Micro+0x188>
		__ticks = 1;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	9a a3       	std	Y+34, r25	; 0x22
    10aa:	89 a3       	std	Y+33, r24	; 0x21
    10ac:	3f c0       	rjmp	.+126    	; 0x112c <Stepper_VidGo_Forward_Micro+0x206>
	else if (__tmp > 65535)
    10ae:	6b a1       	ldd	r22, Y+35	; 0x23
    10b0:	7c a1       	ldd	r23, Y+36	; 0x24
    10b2:	8d a1       	ldd	r24, Y+37	; 0x25
    10b4:	9e a1       	ldd	r25, Y+38	; 0x26
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	3f ef       	ldi	r19, 0xFF	; 255
    10ba:	4f e7       	ldi	r20, 0x7F	; 127
    10bc:	57 e4       	ldi	r21, 0x47	; 71
    10be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10c2:	18 16       	cp	r1, r24
    10c4:	4c f5       	brge	.+82     	; 0x1118 <Stepper_VidGo_Forward_Micro+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c6:	6f a1       	ldd	r22, Y+39	; 0x27
    10c8:	78 a5       	ldd	r23, Y+40	; 0x28
    10ca:	89 a5       	ldd	r24, Y+41	; 0x29
    10cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e2       	ldi	r20, 0x20	; 32
    10d4:	51 e4       	ldi	r21, 0x41	; 65
    10d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	bc 01       	movw	r22, r24
    10e0:	cd 01       	movw	r24, r26
    10e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	9a a3       	std	Y+34, r25	; 0x22
    10ec:	89 a3       	std	Y+33, r24	; 0x21
    10ee:	0f c0       	rjmp	.+30     	; 0x110e <Stepper_VidGo_Forward_Micro+0x1e8>
    10f0:	89 e1       	ldi	r24, 0x19	; 25
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	98 a3       	std	Y+32, r25	; 0x20
    10f6:	8f 8f       	std	Y+31, r24	; 0x1f
    10f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10fa:	98 a1       	ldd	r25, Y+32	; 0x20
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <Stepper_VidGo_Forward_Micro+0x1d6>
    1100:	98 a3       	std	Y+32, r25	; 0x20
    1102:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1104:	89 a1       	ldd	r24, Y+33	; 0x21
    1106:	9a a1       	ldd	r25, Y+34	; 0x22
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	9a a3       	std	Y+34, r25	; 0x22
    110c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110e:	89 a1       	ldd	r24, Y+33	; 0x21
    1110:	9a a1       	ldd	r25, Y+34	; 0x22
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	69 f7       	brne	.-38     	; 0x10f0 <Stepper_VidGo_Forward_Micro+0x1ca>
    1116:	14 c0       	rjmp	.+40     	; 0x1140 <Stepper_VidGo_Forward_Micro+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1118:	6b a1       	ldd	r22, Y+35	; 0x23
    111a:	7c a1       	ldd	r23, Y+36	; 0x24
    111c:	8d a1       	ldd	r24, Y+37	; 0x25
    111e:	9e a1       	ldd	r25, Y+38	; 0x26
    1120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	9a a3       	std	Y+34, r25	; 0x22
    112a:	89 a3       	std	Y+33, r24	; 0x21
    112c:	89 a1       	ldd	r24, Y+33	; 0x21
    112e:	9a a1       	ldd	r25, Y+34	; 0x22
    1130:	9e 8f       	std	Y+30, r25	; 0x1e
    1132:	8d 8f       	std	Y+29, r24	; 0x1d
    1134:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1136:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <Stepper_VidGo_Forward_Micro+0x212>
    113c:	9e 8f       	std	Y+30, r25	; 0x1e
    113e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(100);
			flag=flag^1;
    1140:	8a ad       	ldd	r24, Y+58	; 0x3a
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	89 27       	eor	r24, r25
    1146:	8a af       	std	Y+58, r24	; 0x3a
    1148:	0e c1       	rjmp	.+540    	; 0x1366 <Stepper_VidGo_Forward_Micro+0x440>
		}
		else if(flag)
    114a:	8a ad       	ldd	r24, Y+58	; 0x3a
    114c:	88 23       	and	r24, r24
    114e:	09 f4       	brne	.+2      	; 0x1152 <Stepper_VidGo_Forward_Micro+0x22c>
    1150:	0a c1       	rjmp	.+532    	; 0x1366 <Stepper_VidGo_Forward_Micro+0x440>
		{
			DIO_VidSet_Pin_Value(Stepper_CTRL_PORT,Pin_Array[i-1],LOW);
    1152:	89 ad       	ldd	r24, Y+57	; 0x39
    1154:	99 27       	eor	r25, r25
    1156:	87 fd       	sbrc	r24, 7
    1158:	90 95       	com	r25
    115a:	9c 01       	movw	r18, r24
    115c:	21 50       	subi	r18, 0x01	; 1
    115e:	30 40       	sbci	r19, 0x00	; 0
    1160:	ce 01       	movw	r24, r28
    1162:	cb 96       	adiw	r24, 0x3b	; 59
    1164:	fc 01       	movw	r30, r24
    1166:	e2 0f       	add	r30, r18
    1168:	f3 1f       	adc	r31, r19
    116a:	90 81       	ld	r25, Z
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	69 2f       	mov	r22, r25
    1170:	40 e0       	ldi	r20, 0x00	; 0
    1172:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	a8 ec       	ldi	r26, 0xC8	; 200
    117c:	b2 e4       	ldi	r27, 0x42	; 66
    117e:	89 8f       	std	Y+25, r24	; 0x19
    1180:	9a 8f       	std	Y+26, r25	; 0x1a
    1182:	ab 8f       	std	Y+27, r26	; 0x1b
    1184:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1186:	69 8d       	ldd	r22, Y+25	; 0x19
    1188:	7a 8d       	ldd	r23, Y+26	; 0x1a
    118a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    118c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	4a e7       	ldi	r20, 0x7A	; 122
    1194:	53 e4       	ldi	r21, 0x43	; 67
    1196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	8d 8b       	std	Y+21, r24	; 0x15
    11a0:	9e 8b       	std	Y+22, r25	; 0x16
    11a2:	af 8b       	std	Y+23, r26	; 0x17
    11a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11a6:	6d 89       	ldd	r22, Y+21	; 0x15
    11a8:	7e 89       	ldd	r23, Y+22	; 0x16
    11aa:	8f 89       	ldd	r24, Y+23	; 0x17
    11ac:	98 8d       	ldd	r25, Y+24	; 0x18
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e8       	ldi	r20, 0x80	; 128
    11b4:	5f e3       	ldi	r21, 0x3F	; 63
    11b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ba:	88 23       	and	r24, r24
    11bc:	2c f4       	brge	.+10     	; 0x11c8 <Stepper_VidGo_Forward_Micro+0x2a2>
		__ticks = 1;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	9c 8b       	std	Y+20, r25	; 0x14
    11c4:	8b 8b       	std	Y+19, r24	; 0x13
    11c6:	3f c0       	rjmp	.+126    	; 0x1246 <Stepper_VidGo_Forward_Micro+0x320>
	else if (__tmp > 65535)
    11c8:	6d 89       	ldd	r22, Y+21	; 0x15
    11ca:	7e 89       	ldd	r23, Y+22	; 0x16
    11cc:	8f 89       	ldd	r24, Y+23	; 0x17
    11ce:	98 8d       	ldd	r25, Y+24	; 0x18
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	3f ef       	ldi	r19, 0xFF	; 255
    11d4:	4f e7       	ldi	r20, 0x7F	; 127
    11d6:	57 e4       	ldi	r21, 0x47	; 71
    11d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11dc:	18 16       	cp	r1, r24
    11de:	4c f5       	brge	.+82     	; 0x1232 <Stepper_VidGo_Forward_Micro+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e0:	69 8d       	ldd	r22, Y+25	; 0x19
    11e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	40 e2       	ldi	r20, 0x20	; 32
    11ee:	51 e4       	ldi	r21, 0x41	; 65
    11f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	bc 01       	movw	r22, r24
    11fa:	cd 01       	movw	r24, r26
    11fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	9c 8b       	std	Y+20, r25	; 0x14
    1206:	8b 8b       	std	Y+19, r24	; 0x13
    1208:	0f c0       	rjmp	.+30     	; 0x1228 <Stepper_VidGo_Forward_Micro+0x302>
    120a:	89 e1       	ldi	r24, 0x19	; 25
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	9a 8b       	std	Y+18, r25	; 0x12
    1210:	89 8b       	std	Y+17, r24	; 0x11
    1212:	89 89       	ldd	r24, Y+17	; 0x11
    1214:	9a 89       	ldd	r25, Y+18	; 0x12
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	f1 f7       	brne	.-4      	; 0x1216 <Stepper_VidGo_Forward_Micro+0x2f0>
    121a:	9a 8b       	std	Y+18, r25	; 0x12
    121c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    121e:	8b 89       	ldd	r24, Y+19	; 0x13
    1220:	9c 89       	ldd	r25, Y+20	; 0x14
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	9c 8b       	std	Y+20, r25	; 0x14
    1226:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1228:	8b 89       	ldd	r24, Y+19	; 0x13
    122a:	9c 89       	ldd	r25, Y+20	; 0x14
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	69 f7       	brne	.-38     	; 0x120a <Stepper_VidGo_Forward_Micro+0x2e4>
    1230:	14 c0       	rjmp	.+40     	; 0x125a <Stepper_VidGo_Forward_Micro+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1232:	6d 89       	ldd	r22, Y+21	; 0x15
    1234:	7e 89       	ldd	r23, Y+22	; 0x16
    1236:	8f 89       	ldd	r24, Y+23	; 0x17
    1238:	98 8d       	ldd	r25, Y+24	; 0x18
    123a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	9c 8b       	std	Y+20, r25	; 0x14
    1244:	8b 8b       	std	Y+19, r24	; 0x13
    1246:	8b 89       	ldd	r24, Y+19	; 0x13
    1248:	9c 89       	ldd	r25, Y+20	; 0x14
    124a:	98 8b       	std	Y+16, r25	; 0x10
    124c:	8f 87       	std	Y+15, r24	; 0x0f
    124e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1250:	98 89       	ldd	r25, Y+16	; 0x10
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <Stepper_VidGo_Forward_Micro+0x32c>
    1256:	98 8b       	std	Y+16, r25	; 0x10
    1258:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			DIO_VidSet_Pin_Value(Stepper_CTRL_PORT,Pin_Array[i],HI);
    125a:	89 ad       	ldd	r24, Y+57	; 0x39
    125c:	28 2f       	mov	r18, r24
    125e:	33 27       	eor	r19, r19
    1260:	27 fd       	sbrc	r18, 7
    1262:	30 95       	com	r19
    1264:	ce 01       	movw	r24, r28
    1266:	cb 96       	adiw	r24, 0x3b	; 59
    1268:	fc 01       	movw	r30, r24
    126a:	e2 0f       	add	r30, r18
    126c:	f3 1f       	adc	r31, r19
    126e:	90 81       	ld	r25, Z
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	69 2f       	mov	r22, r25
    1274:	41 e0       	ldi	r20, 0x01	; 1
    1276:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a8 ec       	ldi	r26, 0xC8	; 200
    1280:	b2 e4       	ldi	r27, 0x42	; 66
    1282:	8b 87       	std	Y+11, r24	; 0x0b
    1284:	9c 87       	std	Y+12, r25	; 0x0c
    1286:	ad 87       	std	Y+13, r26	; 0x0d
    1288:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    128a:	6b 85       	ldd	r22, Y+11	; 0x0b
    128c:	7c 85       	ldd	r23, Y+12	; 0x0c
    128e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1290:	9e 85       	ldd	r25, Y+14	; 0x0e
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	4a e7       	ldi	r20, 0x7A	; 122
    1298:	53 e4       	ldi	r21, 0x43	; 67
    129a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	8f 83       	std	Y+7, r24	; 0x07
    12a4:	98 87       	std	Y+8, r25	; 0x08
    12a6:	a9 87       	std	Y+9, r26	; 0x09
    12a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12aa:	6f 81       	ldd	r22, Y+7	; 0x07
    12ac:	78 85       	ldd	r23, Y+8	; 0x08
    12ae:	89 85       	ldd	r24, Y+9	; 0x09
    12b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	40 e8       	ldi	r20, 0x80	; 128
    12b8:	5f e3       	ldi	r21, 0x3F	; 63
    12ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12be:	88 23       	and	r24, r24
    12c0:	2c f4       	brge	.+10     	; 0x12cc <Stepper_VidGo_Forward_Micro+0x3a6>
		__ticks = 1;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	9e 83       	std	Y+6, r25	; 0x06
    12c8:	8d 83       	std	Y+5, r24	; 0x05
    12ca:	3f c0       	rjmp	.+126    	; 0x134a <Stepper_VidGo_Forward_Micro+0x424>
	else if (__tmp > 65535)
    12cc:	6f 81       	ldd	r22, Y+7	; 0x07
    12ce:	78 85       	ldd	r23, Y+8	; 0x08
    12d0:	89 85       	ldd	r24, Y+9	; 0x09
    12d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	3f ef       	ldi	r19, 0xFF	; 255
    12d8:	4f e7       	ldi	r20, 0x7F	; 127
    12da:	57 e4       	ldi	r21, 0x47	; 71
    12dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12e0:	18 16       	cp	r1, r24
    12e2:	4c f5       	brge	.+82     	; 0x1336 <Stepper_VidGo_Forward_Micro+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e2       	ldi	r20, 0x20	; 32
    12f2:	51 e4       	ldi	r21, 0x41	; 65
    12f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	bc 01       	movw	r22, r24
    12fe:	cd 01       	movw	r24, r26
    1300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	9e 83       	std	Y+6, r25	; 0x06
    130a:	8d 83       	std	Y+5, r24	; 0x05
    130c:	0f c0       	rjmp	.+30     	; 0x132c <Stepper_VidGo_Forward_Micro+0x406>
    130e:	89 e1       	ldi	r24, 0x19	; 25
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	9c 83       	std	Y+4, r25	; 0x04
    1314:	8b 83       	std	Y+3, r24	; 0x03
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	f1 f7       	brne	.-4      	; 0x131a <Stepper_VidGo_Forward_Micro+0x3f4>
    131e:	9c 83       	std	Y+4, r25	; 0x04
    1320:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1322:	8d 81       	ldd	r24, Y+5	; 0x05
    1324:	9e 81       	ldd	r25, Y+6	; 0x06
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	9e 83       	std	Y+6, r25	; 0x06
    132a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	9e 81       	ldd	r25, Y+6	; 0x06
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	69 f7       	brne	.-38     	; 0x130e <Stepper_VidGo_Forward_Micro+0x3e8>
    1334:	14 c0       	rjmp	.+40     	; 0x135e <Stepper_VidGo_Forward_Micro+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1336:	6f 81       	ldd	r22, Y+7	; 0x07
    1338:	78 85       	ldd	r23, Y+8	; 0x08
    133a:	89 85       	ldd	r24, Y+9	; 0x09
    133c:	9a 85       	ldd	r25, Y+10	; 0x0a
    133e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	9e 83       	std	Y+6, r25	; 0x06
    1348:	8d 83       	std	Y+5, r24	; 0x05
    134a:	8d 81       	ldd	r24, Y+5	; 0x05
    134c:	9e 81       	ldd	r25, Y+6	; 0x06
    134e:	9a 83       	std	Y+2, r25	; 0x02
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	9a 81       	ldd	r25, Y+2	; 0x02
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <Stepper_VidGo_Forward_Micro+0x430>
    135a:	9a 83       	std	Y+2, r25	; 0x02
    135c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			flag=flag^1;
    135e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1360:	91 e0       	ldi	r25, 0x01	; 1
    1362:	89 27       	eor	r24, r25
    1364:	8a af       	std	Y+58, r24	; 0x3a

void Stepper_VidGo_Forward_Micro()
{
	u8 flag=TRUE;
	u8 Pin_Array[4]={Stepper_S1_PIN,Stepper_S2_PIN,Stepper_S3_PIN,Stepper_S4_PIN};
	for(s8 i=0;i<4;i++)
    1366:	89 ad       	ldd	r24, Y+57	; 0x39
    1368:	8f 5f       	subi	r24, 0xFF	; 255
    136a:	89 af       	std	Y+57, r24	; 0x39
    136c:	89 ad       	ldd	r24, Y+57	; 0x39
    136e:	84 30       	cpi	r24, 0x04	; 4
    1370:	0c f4       	brge	.+2      	; 0x1374 <Stepper_VidGo_Forward_Micro+0x44e>
    1372:	ee cd       	rjmp	.-1060   	; 0xf50 <Stepper_VidGo_Forward_Micro+0x2a>
			DIO_VidSet_Pin_Value(Stepper_CTRL_PORT,Pin_Array[i],HI);
			_delay_ms(100);
			flag=flag^1;
		}
	}
}
    1374:	ee 96       	adiw	r28, 0x3e	; 62
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <Seven_Segment_VidSend_One_Number>:


/*------------------------------ Seven_Segment_Display_One_Digit ------------------------------*/

void Seven_Segment_VidSend_One_Number(u8 Copy_u8Number)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	60 97       	sbiw	r28, 0x10	; 16
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	8b 87       	std	Y+11, r24	; 0x0b
	if(Copy_u8Number<10)
    139c:	8b 85       	ldd	r24, Y+11	; 0x0b
    139e:	8a 30       	cpi	r24, 0x0A	; 10
    13a0:	90 f5       	brcc	.+100    	; 0x1406 <Seven_Segment_VidSend_One_Number+0x80>
	{
		u8 Local_u8Seven_Segment_Array [10] = Seven_Segment_Array ;
    13a2:	ce 01       	movw	r24, r28
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	9d 87       	std	Y+13, r25	; 0x0d
    13a8:	8c 87       	std	Y+12, r24	; 0x0c
    13aa:	e9 e7       	ldi	r30, 0x79	; 121
    13ac:	f2 e0       	ldi	r31, 0x02	; 2
    13ae:	ff 87       	std	Y+15, r31	; 0x0f
    13b0:	ee 87       	std	Y+14, r30	; 0x0e
    13b2:	fa e0       	ldi	r31, 0x0A	; 10
    13b4:	f8 8b       	std	Y+16, r31	; 0x10
    13b6:	ee 85       	ldd	r30, Y+14	; 0x0e
    13b8:	ff 85       	ldd	r31, Y+15	; 0x0f
    13ba:	00 80       	ld	r0, Z
    13bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    13be:	9f 85       	ldd	r25, Y+15	; 0x0f
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	9f 87       	std	Y+15, r25	; 0x0f
    13c4:	8e 87       	std	Y+14, r24	; 0x0e
    13c6:	ec 85       	ldd	r30, Y+12	; 0x0c
    13c8:	fd 85       	ldd	r31, Y+13	; 0x0d
    13ca:	00 82       	st	Z, r0
    13cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    13ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    13d0:	01 96       	adiw	r24, 0x01	; 1
    13d2:	9d 87       	std	Y+13, r25	; 0x0d
    13d4:	8c 87       	std	Y+12, r24	; 0x0c
    13d6:	98 89       	ldd	r25, Y+16	; 0x10
    13d8:	91 50       	subi	r25, 0x01	; 1
    13da:	98 8b       	std	Y+16, r25	; 0x10
    13dc:	e8 89       	ldd	r30, Y+16	; 0x10
    13de:	ee 23       	and	r30, r30
    13e0:	51 f7       	brne	.-44     	; 0x13b6 <Seven_Segment_VidSend_One_Number+0x30>
		DIO_VidSet_Pin_Value(Seven_Segment_Enable_Port,Seven_Segment_Enable_1_Pin,HI);
    13e2:	83 e0       	ldi	r24, 0x03	; 3
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	41 e0       	ldi	r20, 0x01	; 1
    13e8:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
		DIO_VidSet_Port_Value(Seven_Segment_Data_Port,Local_u8Seven_Segment_Array[Copy_u8Number]);
    13ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	ce 01       	movw	r24, r28
    13f4:	01 96       	adiw	r24, 0x01	; 1
    13f6:	fc 01       	movw	r30, r24
    13f8:	e2 0f       	add	r30, r18
    13fa:	f3 1f       	adc	r31, r19
    13fc:	90 81       	ld	r25, Z
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	69 2f       	mov	r22, r25
    1402:	0e 94 b0 19 	call	0x3360	; 0x3360 <DIO_VidSet_Port_Value>
	}
}
    1406:	60 96       	adiw	r28, 0x10	; 16
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <Seven_Segment_VidCount>:


/*------------------------------ Seven_Segment_Display_One_Digit ------------------------------*/

void Seven_Segment_VidCount(u8 Copy_u8Max_number,u16 Copy_u8Delay_Ms)
{
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	a1 97       	sbiw	r28, 0x21	; 33
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	8a 8f       	std	Y+26, r24	; 0x1a
    142e:	7c 8f       	std	Y+28, r23	; 0x1c
    1430:	6b 8f       	std	Y+27, r22	; 0x1b
	if(Copy_u8Max_number<10)
    1432:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1434:	8a 30       	cpi	r24, 0x0A	; 10
    1436:	08 f0       	brcs	.+2      	; 0x143a <Seven_Segment_VidCount+0x22>
    1438:	b6 c0       	rjmp	.+364    	; 0x15a6 <Seven_Segment_VidCount+0x18e>
	{
		u8 Local_u8Counter  = 0;
    143a:	1f 86       	std	Y+15, r1	; 0x0f
		u8 Local_u8Seven_Segment_Array [10] = Seven_Segment_Array ;
    143c:	ce 01       	movw	r24, r28
    143e:	40 96       	adiw	r24, 0x10	; 16
    1440:	9e 8f       	std	Y+30, r25	; 0x1e
    1442:	8d 8f       	std	Y+29, r24	; 0x1d
    1444:	e3 e8       	ldi	r30, 0x83	; 131
    1446:	f2 e0       	ldi	r31, 0x02	; 2
    1448:	f8 a3       	std	Y+32, r31	; 0x20
    144a:	ef 8f       	std	Y+31, r30	; 0x1f
    144c:	fa e0       	ldi	r31, 0x0A	; 10
    144e:	f9 a3       	std	Y+33, r31	; 0x21
    1450:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1452:	f8 a1       	ldd	r31, Y+32	; 0x20
    1454:	00 80       	ld	r0, Z
    1456:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1458:	98 a1       	ldd	r25, Y+32	; 0x20
    145a:	01 96       	adiw	r24, 0x01	; 1
    145c:	98 a3       	std	Y+32, r25	; 0x20
    145e:	8f 8f       	std	Y+31, r24	; 0x1f
    1460:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1462:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1464:	00 82       	st	Z, r0
    1466:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1468:	9e 8d       	ldd	r25, Y+30	; 0x1e
    146a:	01 96       	adiw	r24, 0x01	; 1
    146c:	9e 8f       	std	Y+30, r25	; 0x1e
    146e:	8d 8f       	std	Y+29, r24	; 0x1d
    1470:	99 a1       	ldd	r25, Y+33	; 0x21
    1472:	91 50       	subi	r25, 0x01	; 1
    1474:	99 a3       	std	Y+33, r25	; 0x21
    1476:	e9 a1       	ldd	r30, Y+33	; 0x21
    1478:	ee 23       	and	r30, r30
    147a:	51 f7       	brne	.-44     	; 0x1450 <Seven_Segment_VidCount+0x38>
		DIO_VidSet_Pin_Value(Seven_Segment_Enable_Port,Seven_Segment_Enable_1_Pin,HI);
    147c:	83 e0       	ldi	r24, 0x03	; 3
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	41 e0       	ldi	r20, 0x01	; 1
    1482:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
		for(Local_u8Counter=0 ; Local_u8Counter<=Copy_u8Max_number ; Local_u8Counter++)
    1486:	1f 86       	std	Y+15, r1	; 0x0f
    1488:	89 c0       	rjmp	.+274    	; 0x159c <Seven_Segment_VidCount+0x184>
		{
		DIO_VidSet_Port_Value(Seven_Segment_Data_Port,Local_u8Seven_Segment_Array[Local_u8Counter]);
    148a:	8f 85       	ldd	r24, Y+15	; 0x0f
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	ce 01       	movw	r24, r28
    1492:	40 96       	adiw	r24, 0x10	; 16
    1494:	fc 01       	movw	r30, r24
    1496:	e2 0f       	add	r30, r18
    1498:	f3 1f       	adc	r31, r19
    149a:	90 81       	ld	r25, Z
    149c:	82 e0       	ldi	r24, 0x02	; 2
    149e:	69 2f       	mov	r22, r25
    14a0:	0e 94 b0 19 	call	0x3360	; 0x3360 <DIO_VidSet_Port_Value>
		_delay_ms(Copy_u8Delay_Ms);
    14a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14a8:	cc 01       	movw	r24, r24
    14aa:	a0 e0       	ldi	r26, 0x00	; 0
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	bc 01       	movw	r22, r24
    14b0:	cd 01       	movw	r24, r26
    14b2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	8b 87       	std	Y+11, r24	; 0x0b
    14bc:	9c 87       	std	Y+12, r25	; 0x0c
    14be:	ad 87       	std	Y+13, r26	; 0x0d
    14c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	4a e7       	ldi	r20, 0x7A	; 122
    14d0:	53 e4       	ldi	r21, 0x43	; 67
    14d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	8f 83       	std	Y+7, r24	; 0x07
    14dc:	98 87       	std	Y+8, r25	; 0x08
    14de:	a9 87       	std	Y+9, r26	; 0x09
    14e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14e2:	6f 81       	ldd	r22, Y+7	; 0x07
    14e4:	78 85       	ldd	r23, Y+8	; 0x08
    14e6:	89 85       	ldd	r24, Y+9	; 0x09
    14e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e8       	ldi	r20, 0x80	; 128
    14f0:	5f e3       	ldi	r21, 0x3F	; 63
    14f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14f6:	88 23       	and	r24, r24
    14f8:	2c f4       	brge	.+10     	; 0x1504 <Seven_Segment_VidCount+0xec>
		__ticks = 1;
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	9e 83       	std	Y+6, r25	; 0x06
    1500:	8d 83       	std	Y+5, r24	; 0x05
    1502:	3f c0       	rjmp	.+126    	; 0x1582 <Seven_Segment_VidCount+0x16a>
	else if (__tmp > 65535)
    1504:	6f 81       	ldd	r22, Y+7	; 0x07
    1506:	78 85       	ldd	r23, Y+8	; 0x08
    1508:	89 85       	ldd	r24, Y+9	; 0x09
    150a:	9a 85       	ldd	r25, Y+10	; 0x0a
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	3f ef       	ldi	r19, 0xFF	; 255
    1510:	4f e7       	ldi	r20, 0x7F	; 127
    1512:	57 e4       	ldi	r21, 0x47	; 71
    1514:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1518:	18 16       	cp	r1, r24
    151a:	4c f5       	brge	.+82     	; 0x156e <Seven_Segment_VidCount+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151c:	6b 85       	ldd	r22, Y+11	; 0x0b
    151e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1520:	8d 85       	ldd	r24, Y+13	; 0x0d
    1522:	9e 85       	ldd	r25, Y+14	; 0x0e
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	40 e2       	ldi	r20, 0x20	; 32
    152a:	51 e4       	ldi	r21, 0x41	; 65
    152c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	bc 01       	movw	r22, r24
    1536:	cd 01       	movw	r24, r26
    1538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	9e 83       	std	Y+6, r25	; 0x06
    1542:	8d 83       	std	Y+5, r24	; 0x05
    1544:	0f c0       	rjmp	.+30     	; 0x1564 <Seven_Segment_VidCount+0x14c>
    1546:	89 e1       	ldi	r24, 0x19	; 25
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	9c 83       	std	Y+4, r25	; 0x04
    154c:	8b 83       	std	Y+3, r24	; 0x03
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	9c 81       	ldd	r25, Y+4	; 0x04
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <Seven_Segment_VidCount+0x13a>
    1556:	9c 83       	std	Y+4, r25	; 0x04
    1558:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155a:	8d 81       	ldd	r24, Y+5	; 0x05
    155c:	9e 81       	ldd	r25, Y+6	; 0x06
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	9e 83       	std	Y+6, r25	; 0x06
    1562:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1564:	8d 81       	ldd	r24, Y+5	; 0x05
    1566:	9e 81       	ldd	r25, Y+6	; 0x06
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	69 f7       	brne	.-38     	; 0x1546 <Seven_Segment_VidCount+0x12e>
    156c:	14 c0       	rjmp	.+40     	; 0x1596 <Seven_Segment_VidCount+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156e:	6f 81       	ldd	r22, Y+7	; 0x07
    1570:	78 85       	ldd	r23, Y+8	; 0x08
    1572:	89 85       	ldd	r24, Y+9	; 0x09
    1574:	9a 85       	ldd	r25, Y+10	; 0x0a
    1576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	9e 83       	std	Y+6, r25	; 0x06
    1580:	8d 83       	std	Y+5, r24	; 0x05
    1582:	8d 81       	ldd	r24, Y+5	; 0x05
    1584:	9e 81       	ldd	r25, Y+6	; 0x06
    1586:	9a 83       	std	Y+2, r25	; 0x02
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	9a 81       	ldd	r25, Y+2	; 0x02
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <Seven_Segment_VidCount+0x176>
    1592:	9a 83       	std	Y+2, r25	; 0x02
    1594:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Max_number<10)
	{
		u8 Local_u8Counter  = 0;
		u8 Local_u8Seven_Segment_Array [10] = Seven_Segment_Array ;
		DIO_VidSet_Pin_Value(Seven_Segment_Enable_Port,Seven_Segment_Enable_1_Pin,HI);
		for(Local_u8Counter=0 ; Local_u8Counter<=Copy_u8Max_number ; Local_u8Counter++)
    1596:	8f 85       	ldd	r24, Y+15	; 0x0f
    1598:	8f 5f       	subi	r24, 0xFF	; 255
    159a:	8f 87       	std	Y+15, r24	; 0x0f
    159c:	9f 85       	ldd	r25, Y+15	; 0x0f
    159e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15a0:	89 17       	cp	r24, r25
    15a2:	08 f0       	brcs	.+2      	; 0x15a6 <Seven_Segment_VidCount+0x18e>
    15a4:	72 cf       	rjmp	.-284    	; 0x148a <Seven_Segment_VidCount+0x72>
		{
		DIO_VidSet_Port_Value(Seven_Segment_Data_Port,Local_u8Seven_Segment_Array[Local_u8Counter]);
		_delay_ms(Copy_u8Delay_Ms);
		}
	}
}
    15a6:	a1 96       	adiw	r28, 0x21	; 33
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <Seven_Segment_VidSend_Two_Number>:


/*----------------------------- Seven_Segment_Display_Two_Digit -----------------------------*/

void Seven_Segment_VidSend_Two_Number(u8 Copy_u8Number_1,u8 Copy_u8Number_2)
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	61 97       	sbiw	r28, 0x11	; 17
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	8b 87       	std	Y+11, r24	; 0x0b
    15ce:	6c 87       	std	Y+12, r22	; 0x0c
	if(Copy_u8Number_1<10 && Copy_u8Number_2<10)
    15d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    15d2:	8a 30       	cpi	r24, 0x0A	; 10
    15d4:	08 f0       	brcs	.+2      	; 0x15d8 <Seven_Segment_VidSend_Two_Number+0x20>
    15d6:	52 c0       	rjmp	.+164    	; 0x167c <Seven_Segment_VidSend_Two_Number+0xc4>
    15d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    15da:	8a 30       	cpi	r24, 0x0A	; 10
    15dc:	08 f0       	brcs	.+2      	; 0x15e0 <Seven_Segment_VidSend_Two_Number+0x28>
    15de:	4e c0       	rjmp	.+156    	; 0x167c <Seven_Segment_VidSend_Two_Number+0xc4>
	{
		u8 Local_u8Seven_Segment_Array [10] = Seven_Segment_Array ;
    15e0:	ce 01       	movw	r24, r28
    15e2:	01 96       	adiw	r24, 0x01	; 1
    15e4:	9e 87       	std	Y+14, r25	; 0x0e
    15e6:	8d 87       	std	Y+13, r24	; 0x0d
    15e8:	ed e8       	ldi	r30, 0x8D	; 141
    15ea:	f2 e0       	ldi	r31, 0x02	; 2
    15ec:	f8 8b       	std	Y+16, r31	; 0x10
    15ee:	ef 87       	std	Y+15, r30	; 0x0f
    15f0:	fa e0       	ldi	r31, 0x0A	; 10
    15f2:	f9 8b       	std	Y+17, r31	; 0x11
    15f4:	ef 85       	ldd	r30, Y+15	; 0x0f
    15f6:	f8 89       	ldd	r31, Y+16	; 0x10
    15f8:	00 80       	ld	r0, Z
    15fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    15fc:	98 89       	ldd	r25, Y+16	; 0x10
    15fe:	01 96       	adiw	r24, 0x01	; 1
    1600:	98 8b       	std	Y+16, r25	; 0x10
    1602:	8f 87       	std	Y+15, r24	; 0x0f
    1604:	ed 85       	ldd	r30, Y+13	; 0x0d
    1606:	fe 85       	ldd	r31, Y+14	; 0x0e
    1608:	00 82       	st	Z, r0
    160a:	8d 85       	ldd	r24, Y+13	; 0x0d
    160c:	9e 85       	ldd	r25, Y+14	; 0x0e
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	9e 87       	std	Y+14, r25	; 0x0e
    1612:	8d 87       	std	Y+13, r24	; 0x0d
    1614:	99 89       	ldd	r25, Y+17	; 0x11
    1616:	91 50       	subi	r25, 0x01	; 1
    1618:	99 8b       	std	Y+17, r25	; 0x11
    161a:	e9 89       	ldd	r30, Y+17	; 0x11
    161c:	ee 23       	and	r30, r30
    161e:	51 f7       	brne	.-44     	; 0x15f4 <Seven_Segment_VidSend_Two_Number+0x3c>
		DIO_VidSet_Pin_Value(Seven_Segment_Enable_Port,Seven_Segment_Enable_1_Pin,HI);
    1620:	83 e0       	ldi	r24, 0x03	; 3
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	41 e0       	ldi	r20, 0x01	; 1
    1626:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
		DIO_VidSet_Port_Value(Seven_Segment_Data_Port,Local_u8Seven_Segment_Array[Copy_u8Number_1]);
    162a:	8b 85       	ldd	r24, Y+11	; 0x0b
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	ce 01       	movw	r24, r28
    1632:	01 96       	adiw	r24, 0x01	; 1
    1634:	fc 01       	movw	r30, r24
    1636:	e2 0f       	add	r30, r18
    1638:	f3 1f       	adc	r31, r19
    163a:	90 81       	ld	r25, Z
    163c:	82 e0       	ldi	r24, 0x02	; 2
    163e:	69 2f       	mov	r22, r25
    1640:	0e 94 b0 19 	call	0x3360	; 0x3360 <DIO_VidSet_Port_Value>
		DIO_VidSet_Pin_Value(Seven_Segment_Enable_Port,Seven_Segment_Enable_1_Pin,LOW);
    1644:	83 e0       	ldi	r24, 0x03	; 3
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	40 e0       	ldi	r20, 0x00	; 0
    164a:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
		DIO_VidSet_Pin_Value(Seven_Segment_Enable_Port,Seven_Segment_Enable_2_Pin,HI);
    164e:	83 e0       	ldi	r24, 0x03	; 3
    1650:	61 e0       	ldi	r22, 0x01	; 1
    1652:	41 e0       	ldi	r20, 0x01	; 1
    1654:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
		DIO_VidSet_Port_Value(Seven_Segment_Data_Port,Local_u8Seven_Segment_Array[Copy_u8Number_2]);
    1658:	8c 85       	ldd	r24, Y+12	; 0x0c
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	ce 01       	movw	r24, r28
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	fc 01       	movw	r30, r24
    1664:	e2 0f       	add	r30, r18
    1666:	f3 1f       	adc	r31, r19
    1668:	90 81       	ld	r25, Z
    166a:	82 e0       	ldi	r24, 0x02	; 2
    166c:	69 2f       	mov	r22, r25
    166e:	0e 94 b0 19 	call	0x3360	; 0x3360 <DIO_VidSet_Port_Value>
		DIO_VidSet_Pin_Value(Seven_Segment_Enable_Port,Seven_Segment_Enable_2_Pin,LOW);
    1672:	83 e0       	ldi	r24, 0x03	; 3
    1674:	61 e0       	ldi	r22, 0x01	; 1
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
	}
}
    167c:	61 96       	adiw	r28, 0x11	; 17
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <Seven_Segment_VidSpecial_Character>:


/*----------------------------- Seven_Segment_Special_Character -----------------------------*/

void Seven_Segment_VidSpecial_Character(u8 Copy_u8Character)
{
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	0f 92       	push	r0
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	89 83       	std	Y+1, r24	; 0x01
	DIO_VidSet_Pin_Value(Seven_Segment_Enable_Port,Seven_Segment_Enable_1_Pin,HI);
    169a:	83 e0       	ldi	r24, 0x03	; 3
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	41 e0       	ldi	r20, 0x01	; 1
    16a0:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
	DIO_VidSet_Port_Value(Seven_Segment_Data_Port,Copy_u8Character);
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	69 81       	ldd	r22, Y+1	; 0x01
    16a8:	0e 94 b0 19 	call	0x3360	; 0x3360 <DIO_VidSet_Port_Value>
}
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <LCD_VidSend_Command>:


/*------------------------- Send_Command -------------------------*/

void LCD_VidSend_Command(u8 Copy_u8Command)
{
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	2f 97       	sbiw	r28, 0x0f	; 15
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_VidSet_Pin_Value(LCD_CTRL_PORT,LCD_RS_PIN,LOW);					/*SET RS PIN AS LOW*/
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	40 e0       	ldi	r20, 0x00	; 0
    16d0:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
	DIO_VidSet_Pin_Value(LCD_CTRL_PORT,LCD_RW_PIN,LOW);					/*SET RW PIN AS LOW TO WRITE*/
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	61 e0       	ldi	r22, 0x01	; 1
    16d8:	40 e0       	ldi	r20, 0x00	; 0
    16da:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
	DIO_VidSet_Port_Value(LCD_DATA_PORT,Copy_u8Command);				/*SEND COMMAND*/
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	6f 85       	ldd	r22, Y+15	; 0x0f
    16e2:	0e 94 b0 19 	call	0x3360	; 0x3360 <DIO_VidSet_Port_Value>
	DIO_VidSet_Pin_Value(LCD_CTRL_PORT,LCD_E_PIN,HI);					/*SET ENABLE PIN*/
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	62 e0       	ldi	r22, 0x02	; 2
    16ea:	41 e0       	ldi	r20, 0x01	; 1
    16ec:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	a0 e4       	ldi	r26, 0x40	; 64
    16f6:	b0 e4       	ldi	r27, 0x40	; 64
    16f8:	8b 87       	std	Y+11, r24	; 0x0b
    16fa:	9c 87       	std	Y+12, r25	; 0x0c
    16fc:	ad 87       	std	Y+13, r26	; 0x0d
    16fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1700:	6b 85       	ldd	r22, Y+11	; 0x0b
    1702:	7c 85       	ldd	r23, Y+12	; 0x0c
    1704:	8d 85       	ldd	r24, Y+13	; 0x0d
    1706:	9e 85       	ldd	r25, Y+14	; 0x0e
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	4a e7       	ldi	r20, 0x7A	; 122
    170e:	53 e4       	ldi	r21, 0x43	; 67
    1710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	8f 83       	std	Y+7, r24	; 0x07
    171a:	98 87       	std	Y+8, r25	; 0x08
    171c:	a9 87       	std	Y+9, r26	; 0x09
    171e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1720:	6f 81       	ldd	r22, Y+7	; 0x07
    1722:	78 85       	ldd	r23, Y+8	; 0x08
    1724:	89 85       	ldd	r24, Y+9	; 0x09
    1726:	9a 85       	ldd	r25, Y+10	; 0x0a
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e8       	ldi	r20, 0x80	; 128
    172e:	5f e3       	ldi	r21, 0x3F	; 63
    1730:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1734:	88 23       	and	r24, r24
    1736:	2c f4       	brge	.+10     	; 0x1742 <LCD_VidSend_Command+0x8e>
		__ticks = 1;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	9e 83       	std	Y+6, r25	; 0x06
    173e:	8d 83       	std	Y+5, r24	; 0x05
    1740:	3f c0       	rjmp	.+126    	; 0x17c0 <LCD_VidSend_Command+0x10c>
	else if (__tmp > 65535)
    1742:	6f 81       	ldd	r22, Y+7	; 0x07
    1744:	78 85       	ldd	r23, Y+8	; 0x08
    1746:	89 85       	ldd	r24, Y+9	; 0x09
    1748:	9a 85       	ldd	r25, Y+10	; 0x0a
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	3f ef       	ldi	r19, 0xFF	; 255
    174e:	4f e7       	ldi	r20, 0x7F	; 127
    1750:	57 e4       	ldi	r21, 0x47	; 71
    1752:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1756:	18 16       	cp	r1, r24
    1758:	4c f5       	brge	.+82     	; 0x17ac <LCD_VidSend_Command+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175a:	6b 85       	ldd	r22, Y+11	; 0x0b
    175c:	7c 85       	ldd	r23, Y+12	; 0x0c
    175e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1760:	9e 85       	ldd	r25, Y+14	; 0x0e
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e2       	ldi	r20, 0x20	; 32
    1768:	51 e4       	ldi	r21, 0x41	; 65
    176a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	bc 01       	movw	r22, r24
    1774:	cd 01       	movw	r24, r26
    1776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	9e 83       	std	Y+6, r25	; 0x06
    1780:	8d 83       	std	Y+5, r24	; 0x05
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <LCD_VidSend_Command+0xee>
    1784:	89 e1       	ldi	r24, 0x19	; 25
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9c 83       	std	Y+4, r25	; 0x04
    178a:	8b 83       	std	Y+3, r24	; 0x03
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	9c 81       	ldd	r25, Y+4	; 0x04
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <LCD_VidSend_Command+0xdc>
    1794:	9c 83       	std	Y+4, r25	; 0x04
    1796:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1798:	8d 81       	ldd	r24, Y+5	; 0x05
    179a:	9e 81       	ldd	r25, Y+6	; 0x06
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	9e 83       	std	Y+6, r25	; 0x06
    17a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a2:	8d 81       	ldd	r24, Y+5	; 0x05
    17a4:	9e 81       	ldd	r25, Y+6	; 0x06
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	69 f7       	brne	.-38     	; 0x1784 <LCD_VidSend_Command+0xd0>
    17aa:	14 c0       	rjmp	.+40     	; 0x17d4 <LCD_VidSend_Command+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ac:	6f 81       	ldd	r22, Y+7	; 0x07
    17ae:	78 85       	ldd	r23, Y+8	; 0x08
    17b0:	89 85       	ldd	r24, Y+9	; 0x09
    17b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	9e 83       	std	Y+6, r25	; 0x06
    17be:	8d 83       	std	Y+5, r24	; 0x05
    17c0:	8d 81       	ldd	r24, Y+5	; 0x05
    17c2:	9e 81       	ldd	r25, Y+6	; 0x06
    17c4:	9a 83       	std	Y+2, r25	; 0x02
    17c6:	89 83       	std	Y+1, r24	; 0x01
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	9a 81       	ldd	r25, Y+2	; 0x02
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <LCD_VidSend_Command+0x118>
    17d0:	9a 83       	std	Y+2, r25	; 0x02
    17d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);														/*DELAY*/
	DIO_VidSet_Pin_Value(LCD_CTRL_PORT,LCD_E_PIN,LOW);					/*CLR ENABLE PIN*/
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	62 e0       	ldi	r22, 0x02	; 2
    17d8:	40 e0       	ldi	r20, 0x00	; 0
    17da:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
}
    17de:	2f 96       	adiw	r28, 0x0f	; 15
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <LCD_VidSend_Data>:


/*------------------------- Send_Data -------------------------*/

void LCD_VidSend_Data(u8 Copy_u8Data)
{
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	2f 97       	sbiw	r28, 0x0f	; 15
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_VidSet_Pin_Value(LCD_CTRL_PORT,LCD_RS_PIN,HI);					/*SET RS PIN AS HI*/
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	60 e0       	ldi	r22, 0x00	; 0
    180a:	41 e0       	ldi	r20, 0x01	; 1
    180c:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
	DIO_VidSet_Pin_Value(LCD_CTRL_PORT,LCD_RW_PIN,LOW);					/*SET RW PIN AS LOW TO WRITE*/
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	61 e0       	ldi	r22, 0x01	; 1
    1814:	40 e0       	ldi	r20, 0x00	; 0
    1816:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
	DIO_VidSet_Port_Value(LCD_DATA_PORT,Copy_u8Data);					/*SEND COMMAND*/
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	6f 85       	ldd	r22, Y+15	; 0x0f
    181e:	0e 94 b0 19 	call	0x3360	; 0x3360 <DIO_VidSet_Port_Value>
	DIO_VidSet_Pin_Value(LCD_CTRL_PORT,LCD_E_PIN,HI);					/*SET ENABLE PIN*/
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	62 e0       	ldi	r22, 0x02	; 2
    1826:	41 e0       	ldi	r20, 0x01	; 1
    1828:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	a0 e4       	ldi	r26, 0x40	; 64
    1832:	b0 e4       	ldi	r27, 0x40	; 64
    1834:	8b 87       	std	Y+11, r24	; 0x0b
    1836:	9c 87       	std	Y+12, r25	; 0x0c
    1838:	ad 87       	std	Y+13, r26	; 0x0d
    183a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183c:	6b 85       	ldd	r22, Y+11	; 0x0b
    183e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1840:	8d 85       	ldd	r24, Y+13	; 0x0d
    1842:	9e 85       	ldd	r25, Y+14	; 0x0e
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	4a e7       	ldi	r20, 0x7A	; 122
    184a:	53 e4       	ldi	r21, 0x43	; 67
    184c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	8f 83       	std	Y+7, r24	; 0x07
    1856:	98 87       	std	Y+8, r25	; 0x08
    1858:	a9 87       	std	Y+9, r26	; 0x09
    185a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    185c:	6f 81       	ldd	r22, Y+7	; 0x07
    185e:	78 85       	ldd	r23, Y+8	; 0x08
    1860:	89 85       	ldd	r24, Y+9	; 0x09
    1862:	9a 85       	ldd	r25, Y+10	; 0x0a
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e8       	ldi	r20, 0x80	; 128
    186a:	5f e3       	ldi	r21, 0x3F	; 63
    186c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1870:	88 23       	and	r24, r24
    1872:	2c f4       	brge	.+10     	; 0x187e <LCD_VidSend_Data+0x8e>
		__ticks = 1;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	9e 83       	std	Y+6, r25	; 0x06
    187a:	8d 83       	std	Y+5, r24	; 0x05
    187c:	3f c0       	rjmp	.+126    	; 0x18fc <LCD_VidSend_Data+0x10c>
	else if (__tmp > 65535)
    187e:	6f 81       	ldd	r22, Y+7	; 0x07
    1880:	78 85       	ldd	r23, Y+8	; 0x08
    1882:	89 85       	ldd	r24, Y+9	; 0x09
    1884:	9a 85       	ldd	r25, Y+10	; 0x0a
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	3f ef       	ldi	r19, 0xFF	; 255
    188a:	4f e7       	ldi	r20, 0x7F	; 127
    188c:	57 e4       	ldi	r21, 0x47	; 71
    188e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1892:	18 16       	cp	r1, r24
    1894:	4c f5       	brge	.+82     	; 0x18e8 <LCD_VidSend_Data+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1896:	6b 85       	ldd	r22, Y+11	; 0x0b
    1898:	7c 85       	ldd	r23, Y+12	; 0x0c
    189a:	8d 85       	ldd	r24, Y+13	; 0x0d
    189c:	9e 85       	ldd	r25, Y+14	; 0x0e
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	40 e2       	ldi	r20, 0x20	; 32
    18a4:	51 e4       	ldi	r21, 0x41	; 65
    18a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	bc 01       	movw	r22, r24
    18b0:	cd 01       	movw	r24, r26
    18b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	9e 83       	std	Y+6, r25	; 0x06
    18bc:	8d 83       	std	Y+5, r24	; 0x05
    18be:	0f c0       	rjmp	.+30     	; 0x18de <LCD_VidSend_Data+0xee>
    18c0:	89 e1       	ldi	r24, 0x19	; 25
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	9c 83       	std	Y+4, r25	; 0x04
    18c6:	8b 83       	std	Y+3, r24	; 0x03
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	9c 81       	ldd	r25, Y+4	; 0x04
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <LCD_VidSend_Data+0xdc>
    18d0:	9c 83       	std	Y+4, r25	; 0x04
    18d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d4:	8d 81       	ldd	r24, Y+5	; 0x05
    18d6:	9e 81       	ldd	r25, Y+6	; 0x06
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	9e 83       	std	Y+6, r25	; 0x06
    18dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18de:	8d 81       	ldd	r24, Y+5	; 0x05
    18e0:	9e 81       	ldd	r25, Y+6	; 0x06
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	69 f7       	brne	.-38     	; 0x18c0 <LCD_VidSend_Data+0xd0>
    18e6:	14 c0       	rjmp	.+40     	; 0x1910 <LCD_VidSend_Data+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e8:	6f 81       	ldd	r22, Y+7	; 0x07
    18ea:	78 85       	ldd	r23, Y+8	; 0x08
    18ec:	89 85       	ldd	r24, Y+9	; 0x09
    18ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	9e 83       	std	Y+6, r25	; 0x06
    18fa:	8d 83       	std	Y+5, r24	; 0x05
    18fc:	8d 81       	ldd	r24, Y+5	; 0x05
    18fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1900:	9a 83       	std	Y+2, r25	; 0x02
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	9a 81       	ldd	r25, Y+2	; 0x02
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <LCD_VidSend_Data+0x118>
    190c:	9a 83       	std	Y+2, r25	; 0x02
    190e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);														/*DELAY*/
	DIO_VidSet_Pin_Value(LCD_CTRL_PORT,LCD_E_PIN,LOW);					/*CLR ENABLE PIN*/
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	62 e0       	ldi	r22, 0x02	; 2
    1914:	40 e0       	ldi	r20, 0x00	; 0
    1916:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
}
    191a:	2f 96       	adiw	r28, 0x0f	; 15
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	de bf       	out	0x3e, r29	; 62
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	cd bf       	out	0x3d, r28	; 61
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <LCD_VidSet_Position>:


/*------------------------- Set_Position -------------------------*/

void LCD_VidSet_Position(u8 Copy_u8x_location,u8 Copy_u8y_location)
{
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	00 d0       	rcall	.+0      	; 0x1932 <LCD_VidSet_Position+0x6>
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	89 83       	std	Y+1, r24	; 0x01
    1938:	6a 83       	std	Y+2, r22	; 0x02
	LCD_VidSend_Command((128|(((Copy_u8y_location)*0x40)+Copy_u8x_location)));
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	88 2f       	mov	r24, r24
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	00 24       	eor	r0, r0
    1942:	96 95       	lsr	r25
    1944:	87 95       	ror	r24
    1946:	07 94       	ror	r0
    1948:	96 95       	lsr	r25
    194a:	87 95       	ror	r24
    194c:	07 94       	ror	r0
    194e:	98 2f       	mov	r25, r24
    1950:	80 2d       	mov	r24, r0
    1952:	98 2f       	mov	r25, r24
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	89 0f       	add	r24, r25
    1958:	80 68       	ori	r24, 0x80	; 128
    195a:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <LCD_VidSend_Command>
}
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <LCD_VidSend_Special_Character>:


/*------------------------- Special_Character -------------------------*/

void LCD_VidSend_Special_Character(u8 *Copy_u8Pattern,u8 Copy_u8Pattern_Location,u8 Copy_u8x_location,u8 Copy_u8y_location)
{
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	00 d0       	rcall	.+0      	; 0x196e <LCD_VidSend_Special_Character+0x6>
    196e:	00 d0       	rcall	.+0      	; 0x1970 <LCD_VidSend_Special_Character+0x8>
    1970:	00 d0       	rcall	.+0      	; 0x1972 <LCD_VidSend_Special_Character+0xa>
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	9b 83       	std	Y+3, r25	; 0x03
    1978:	8a 83       	std	Y+2, r24	; 0x02
    197a:	6c 83       	std	Y+4, r22	; 0x04
    197c:	4d 83       	std	Y+5, r20	; 0x05
    197e:	2e 83       	std	Y+6, r18	; 0x06
	LCD_VidSend_Command(64+8*Copy_u8Pattern_Location);
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
    1982:	88 2f       	mov	r24, r24
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	08 96       	adiw	r24, 0x08	; 8
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <LCD_VidSend_Command>
	for(u8 i=0;i<8;i++)
    1998:	19 82       	std	Y+1, r1	; 0x01
    199a:	0e c0       	rjmp	.+28     	; 0x19b8 <LCD_VidSend_Special_Character+0x50>
	{
		LCD_VidSend_Data(Copy_u8Pattern[i]);
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	9b 81       	ldd	r25, Y+3	; 0x03
    19a6:	fc 01       	movw	r30, r24
    19a8:	e2 0f       	add	r30, r18
    19aa:	f3 1f       	adc	r31, r19
    19ac:	80 81       	ld	r24, Z
    19ae:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_VidSend_Data>
/*------------------------- Special_Character -------------------------*/

void LCD_VidSend_Special_Character(u8 *Copy_u8Pattern,u8 Copy_u8Pattern_Location,u8 Copy_u8x_location,u8 Copy_u8y_location)
{
	LCD_VidSend_Command(64+8*Copy_u8Pattern_Location);
	for(u8 i=0;i<8;i++)
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	8f 5f       	subi	r24, 0xFF	; 255
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	88 30       	cpi	r24, 0x08	; 8
    19bc:	78 f3       	brcs	.-34     	; 0x199c <LCD_VidSend_Special_Character+0x34>
	{
		LCD_VidSend_Data(Copy_u8Pattern[i]);
	}
	LCD_VidSet_Position(Copy_u8x_location,Copy_u8y_location);
    19be:	8d 81       	ldd	r24, Y+5	; 0x05
    19c0:	6e 81       	ldd	r22, Y+6	; 0x06
    19c2:	0e 94 96 0c 	call	0x192c	; 0x192c <LCD_VidSet_Position>
	LCD_VidSend_Data(Copy_u8Pattern_Location);
    19c6:	8c 81       	ldd	r24, Y+4	; 0x04
    19c8:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_VidSend_Data>
}
    19cc:	26 96       	adiw	r28, 0x06	; 6
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	08 95       	ret

000019de <LCD_VidSend_String>:


/*------------------------- Special_Character -------------------------*/

void LCD_VidSend_String(u8 *Copy_u8String)
{
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	00 d0       	rcall	.+0      	; 0x19e4 <LCD_VidSend_String+0x6>
    19e4:	0f 92       	push	r0
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	9b 83       	std	Y+3, r25	; 0x03
    19ec:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    19ee:	19 82       	std	Y+1, r1	; 0x01
    19f0:	0e c0       	rjmp	.+28     	; 0x1a0e <LCD_VidSend_String+0x30>
	while(((Copy_u8String[Local_u8Counter])!=0)&&Local_u8Counter<16)
	{
		LCD_VidSend_Data(Copy_u8String[Local_u8Counter]);
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	9b 81       	ldd	r25, Y+3	; 0x03
    19fc:	fc 01       	movw	r30, r24
    19fe:	e2 0f       	add	r30, r18
    1a00:	f3 1f       	adc	r31, r19
    1a02:	80 81       	ld	r24, Z
    1a04:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_VidSend_Data>
		Local_u8Counter++;
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	8f 5f       	subi	r24, 0xFF	; 255
    1a0c:	89 83       	std	Y+1, r24	; 0x01
/*------------------------- Special_Character -------------------------*/

void LCD_VidSend_String(u8 *Copy_u8String)
{
	u8 Local_u8Counter=0;
	while(((Copy_u8String[Local_u8Counter])!=0)&&Local_u8Counter<16)
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	9b 81       	ldd	r25, Y+3	; 0x03
    1a18:	fc 01       	movw	r30, r24
    1a1a:	e2 0f       	add	r30, r18
    1a1c:	f3 1f       	adc	r31, r19
    1a1e:	80 81       	ld	r24, Z
    1a20:	88 23       	and	r24, r24
    1a22:	19 f0       	breq	.+6      	; 0x1a2a <LCD_VidSend_String+0x4c>
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	80 31       	cpi	r24, 0x10	; 16
    1a28:	20 f3       	brcs	.-56     	; 0x19f2 <LCD_VidSend_String+0x14>
	{
		LCD_VidSend_Data(Copy_u8String[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <LCD_VidClear>:


/*------------------------- Special_Character -------------------------*/

void LCD_VidClear(void)
{
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	65 97       	sbiw	r28, 0x15	; 21
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8String[16]="                ";
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	01 96       	adiw	r24, 0x01	; 1
    1a4e:	9a 8b       	std	Y+18, r25	; 0x12
    1a50:	89 8b       	std	Y+17, r24	; 0x11
    1a52:	e0 e6       	ldi	r30, 0x60	; 96
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	fc 8b       	std	Y+20, r31	; 0x14
    1a58:	eb 8b       	std	Y+19, r30	; 0x13
    1a5a:	f0 e1       	ldi	r31, 0x10	; 16
    1a5c:	fd 8b       	std	Y+21, r31	; 0x15
    1a5e:	eb 89       	ldd	r30, Y+19	; 0x13
    1a60:	fc 89       	ldd	r31, Y+20	; 0x14
    1a62:	00 80       	ld	r0, Z
    1a64:	8b 89       	ldd	r24, Y+19	; 0x13
    1a66:	9c 89       	ldd	r25, Y+20	; 0x14
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	9c 8b       	std	Y+20, r25	; 0x14
    1a6c:	8b 8b       	std	Y+19, r24	; 0x13
    1a6e:	e9 89       	ldd	r30, Y+17	; 0x11
    1a70:	fa 89       	ldd	r31, Y+18	; 0x12
    1a72:	00 82       	st	Z, r0
    1a74:	89 89       	ldd	r24, Y+17	; 0x11
    1a76:	9a 89       	ldd	r25, Y+18	; 0x12
    1a78:	01 96       	adiw	r24, 0x01	; 1
    1a7a:	9a 8b       	std	Y+18, r25	; 0x12
    1a7c:	89 8b       	std	Y+17, r24	; 0x11
    1a7e:	9d 89       	ldd	r25, Y+21	; 0x15
    1a80:	91 50       	subi	r25, 0x01	; 1
    1a82:	9d 8b       	std	Y+21, r25	; 0x15
    1a84:	ed 89       	ldd	r30, Y+21	; 0x15
    1a86:	ee 23       	and	r30, r30
    1a88:	51 f7       	brne	.-44     	; 0x1a5e <LCD_VidClear+0x28>
		LCD_VidSet_Position(0,0);
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	60 e0       	ldi	r22, 0x00	; 0
    1a8e:	0e 94 96 0c 	call	0x192c	; 0x192c <LCD_VidSet_Position>
		LCD_VidSend_String(Local_u8String);
    1a92:	ce 01       	movw	r24, r28
    1a94:	01 96       	adiw	r24, 0x01	; 1
    1a96:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_VidSend_String>
		LCD_VidSet_Position(0,1);
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	61 e0       	ldi	r22, 0x01	; 1
    1a9e:	0e 94 96 0c 	call	0x192c	; 0x192c <LCD_VidSet_Position>
		LCD_VidSend_String(Local_u8String);
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	01 96       	adiw	r24, 0x01	; 1
    1aa6:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_VidSend_String>
		LCD_VidSet_Position(0,0);
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	0e 94 96 0c 	call	0x192c	; 0x192c <LCD_VidSet_Position>
}
    1ab2:	65 96       	adiw	r28, 0x15	; 21
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <LCD_VidInitialization>:


/*------------------------- Initialization -------------------------*/

void LCD_VidInitialization(void)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	2e 97       	sbiw	r28, 0x0e	; 14
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSet_Whole_Port_Direction(LCD_DATA_PORT,OUTPUT);				/* Port Direction Select */
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	61 e0       	ldi	r22, 0x01	; 1
    1adc:	0e 94 9b 18 	call	0x3136	; 0x3136 <DIO_VidSet_Whole_Port_Direction>
	DIO_VidSet_Port_Direction(LCD_CTRL_PORT,0x07);
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	67 e0       	ldi	r22, 0x07	; 7
    1ae4:	0e 94 30 19 	call	0x3260	; 0x3260 <DIO_VidSet_Port_Direction>
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	a0 e2       	ldi	r26, 0x20	; 32
    1aee:	b2 e4       	ldi	r27, 0x42	; 66
    1af0:	8b 87       	std	Y+11, r24	; 0x0b
    1af2:	9c 87       	std	Y+12, r25	; 0x0c
    1af4:	ad 87       	std	Y+13, r26	; 0x0d
    1af6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	4a e7       	ldi	r20, 0x7A	; 122
    1b06:	53 e4       	ldi	r21, 0x43	; 67
    1b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	8f 83       	std	Y+7, r24	; 0x07
    1b12:	98 87       	std	Y+8, r25	; 0x08
    1b14:	a9 87       	std	Y+9, r26	; 0x09
    1b16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b18:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1a:	78 85       	ldd	r23, Y+8	; 0x08
    1b1c:	89 85       	ldd	r24, Y+9	; 0x09
    1b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e8       	ldi	r20, 0x80	; 128
    1b26:	5f e3       	ldi	r21, 0x3F	; 63
    1b28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b2c:	88 23       	and	r24, r24
    1b2e:	2c f4       	brge	.+10     	; 0x1b3a <LCD_VidInitialization+0x76>
		__ticks = 1;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	9e 83       	std	Y+6, r25	; 0x06
    1b36:	8d 83       	std	Y+5, r24	; 0x05
    1b38:	3f c0       	rjmp	.+126    	; 0x1bb8 <LCD_VidInitialization+0xf4>
	else if (__tmp > 65535)
    1b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3c:	78 85       	ldd	r23, Y+8	; 0x08
    1b3e:	89 85       	ldd	r24, Y+9	; 0x09
    1b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	3f ef       	ldi	r19, 0xFF	; 255
    1b46:	4f e7       	ldi	r20, 0x7F	; 127
    1b48:	57 e4       	ldi	r21, 0x47	; 71
    1b4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b4e:	18 16       	cp	r1, r24
    1b50:	4c f5       	brge	.+82     	; 0x1ba4 <LCD_VidInitialization+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e2       	ldi	r20, 0x20	; 32
    1b60:	51 e4       	ldi	r21, 0x41	; 65
    1b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	bc 01       	movw	r22, r24
    1b6c:	cd 01       	movw	r24, r26
    1b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	9e 83       	std	Y+6, r25	; 0x06
    1b78:	8d 83       	std	Y+5, r24	; 0x05
    1b7a:	0f c0       	rjmp	.+30     	; 0x1b9a <LCD_VidInitialization+0xd6>
    1b7c:	89 e1       	ldi	r24, 0x19	; 25
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	9c 83       	std	Y+4, r25	; 0x04
    1b82:	8b 83       	std	Y+3, r24	; 0x03
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	9c 81       	ldd	r25, Y+4	; 0x04
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <LCD_VidInitialization+0xc4>
    1b8c:	9c 83       	std	Y+4, r25	; 0x04
    1b8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	9e 81       	ldd	r25, Y+6	; 0x06
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	9e 83       	std	Y+6, r25	; 0x06
    1b98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9e:	00 97       	sbiw	r24, 0x00	; 0
    1ba0:	69 f7       	brne	.-38     	; 0x1b7c <LCD_VidInitialization+0xb8>
    1ba2:	14 c0       	rjmp	.+40     	; 0x1bcc <LCD_VidInitialization+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba6:	78 85       	ldd	r23, Y+8	; 0x08
    1ba8:	89 85       	ldd	r24, Y+9	; 0x09
    1baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	9e 83       	std	Y+6, r25	; 0x06
    1bb6:	8d 83       	std	Y+5, r24	; 0x05
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbc:	9a 83       	std	Y+2, r25	; 0x02
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <LCD_VidInitialization+0x100>
    1bc8:	9a 83       	std	Y+2, r25	; 0x02
    1bca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);														/*DELAY*/
	LCD_VidSend_Command(0b00111100);									/*1ST FROM DATA SHEET(Function Set)*/
    1bcc:	8c e3       	ldi	r24, 0x3C	; 60
    1bce:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <LCD_VidSend_Command>
	LCD_VidSend_Command(0b00001100);									/*2ND FROM DATA SHEET(Display On-Off)*/
    1bd2:	8c e0       	ldi	r24, 0x0C	; 12
    1bd4:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <LCD_VidSend_Command>
	LCD_VidSend_Command(HI);											/*3RD FROM DATA SHEET(Display Clear)*/
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <LCD_VidSend_Command>
}
    1bde:	2e 96       	adiw	r28, 0x0e	; 14
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <Keypad_u8Get_Pressed_Key>:


/*------------------------------ Get_The_Key ------------------------------*/

u8 Keypad_u8Get_Pressed_Key()
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
    1bf8:	a2 97       	sbiw	r28, 0x22	; 34
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
	/*******Initialization Of Some Local Important Variables*******/
	u8 Local_u8Key_Pressd = Not_Pressed ;				                                                                   /*Initial Value For The Key*/
    1c04:	8f ef       	ldi	r24, 0xFF	; 255
    1c06:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Keypad_Array [4][4] =  Keypad_Array ;	                                                                   /*Set Keypad Array*/
    1c08:	ce 01       	movw	r24, r28
    1c0a:	04 96       	adiw	r24, 0x04	; 4
    1c0c:	9f 8f       	std	Y+31, r25	; 0x1f
    1c0e:	8e 8f       	std	Y+30, r24	; 0x1e
    1c10:	e7 e9       	ldi	r30, 0x97	; 151
    1c12:	f2 e0       	ldi	r31, 0x02	; 2
    1c14:	f9 a3       	std	Y+33, r31	; 0x21
    1c16:	e8 a3       	std	Y+32, r30	; 0x20
    1c18:	f0 e1       	ldi	r31, 0x10	; 16
    1c1a:	fa a3       	std	Y+34, r31	; 0x22
    1c1c:	e8 a1       	ldd	r30, Y+32	; 0x20
    1c1e:	f9 a1       	ldd	r31, Y+33	; 0x21
    1c20:	00 80       	ld	r0, Z
    1c22:	88 a1       	ldd	r24, Y+32	; 0x20
    1c24:	99 a1       	ldd	r25, Y+33	; 0x21
    1c26:	01 96       	adiw	r24, 0x01	; 1
    1c28:	99 a3       	std	Y+33, r25	; 0x21
    1c2a:	88 a3       	std	Y+32, r24	; 0x20
    1c2c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1c2e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1c30:	00 82       	st	Z, r0
    1c32:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c34:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c36:	01 96       	adiw	r24, 0x01	; 1
    1c38:	9f 8f       	std	Y+31, r25	; 0x1f
    1c3a:	8e 8f       	std	Y+30, r24	; 0x1e
    1c3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c3e:	91 50       	subi	r25, 0x01	; 1
    1c40:	9a a3       	std	Y+34, r25	; 0x22
    1c42:	ea a1       	ldd	r30, Y+34	; 0x22
    1c44:	ee 23       	and	r30, r30
    1c46:	51 f7       	brne	.-44     	; 0x1c1c <Keypad_u8Get_Pressed_Key+0x2c>
	u8 Local_u8Column = ZERO ;							                                                                   /*Counter For Columns*/
    1c48:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Row = ZERO ;								                                                                   /*Counter For ROWs*/
    1c4a:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8Key_State = HI ;							  															   	   /*Key State Variable*/
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8Column_Array [] = {KeyPad_u8Column_0_PIN,KeyPad_u8Column_1_PIN,KeyPad_u8Column_2_PIN,KeyPad_u8Column_3_PIN};/* Rows Array For Ease Access*/
    1c50:	1d 8a       	std	Y+21, r1	; 0x15
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	8e 8b       	std	Y+22, r24	; 0x16
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	8f 8b       	std	Y+23, r24	; 0x17
    1c5a:	83 e0       	ldi	r24, 0x03	; 3
    1c5c:	88 8f       	std	Y+24, r24	; 0x18
	u8 Local_u8Row_Array [] = {KeyPad_u8Row_0_PIN,KeyPad_u8Row_1_PIN,KeyPad_u8Row_2_PIN,KeyPad_u8Row_3_PIN};			   /* Column Array For Ease Access*/
    1c5e:	84 e0       	ldi	r24, 0x04	; 4
    1c60:	89 8f       	std	Y+25, r24	; 0x19
    1c62:	85 e0       	ldi	r24, 0x05	; 5
    1c64:	8a 8f       	std	Y+26, r24	; 0x1a
    1c66:	86 e0       	ldi	r24, 0x06	; 6
    1c68:	8b 8f       	std	Y+27, r24	; 0x1b
    1c6a:	87 e0       	ldi	r24, 0x07	; 7
    1c6c:	8c 8f       	std	Y+28, r24	; 0x1c


	/*******The Main Code*******/

	for(Local_u8Column = ZERO;Local_u8Column<4;Local_u8Column++)
    1c6e:	1a 82       	std	Y+2, r1	; 0x02
    1c70:	76 c0       	rjmp	.+236    	; 0x1d5e <Keypad_u8Get_Pressed_Key+0x16e>
	{
		DIO_VidSet_Pin_Value(Keypad_Port,Local_u8Column_Array[Local_u8Column],LOW);
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	ce 01       	movw	r24, r28
    1c7a:	45 96       	adiw	r24, 0x15	; 21
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	e2 0f       	add	r30, r18
    1c80:	f3 1f       	adc	r31, r19
    1c82:	90 81       	ld	r25, Z
    1c84:	82 e0       	ldi	r24, 0x02	; 2
    1c86:	69 2f       	mov	r22, r25
    1c88:	40 e0       	ldi	r20, 0x00	; 0
    1c8a:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
		for(Local_u8Row = ZERO;Local_u8Row<4;Local_u8Row++)
    1c8e:	19 82       	std	Y+1, r1	; 0x01
    1c90:	51 c0       	rjmp	.+162    	; 0x1d34 <Keypad_u8Get_Pressed_Key+0x144>
		{
			DIO_VidGet_Pin_Value(Keypad_Port,Local_u8Row_Array [Local_u8Row],&Local_u8Key_State);
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	ce 01       	movw	r24, r28
    1c9a:	49 96       	adiw	r24, 0x19	; 25
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	e2 0f       	add	r30, r18
    1ca0:	f3 1f       	adc	r31, r19
    1ca2:	90 81       	ld	r25, Z
    1ca4:	9e 01       	movw	r18, r28
    1ca6:	2c 5e       	subi	r18, 0xEC	; 236
    1ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    1caa:	82 e0       	ldi	r24, 0x02	; 2
    1cac:	69 2f       	mov	r22, r25
    1cae:	a9 01       	movw	r20, r18
    1cb0:	0e 94 17 18 	call	0x302e	; 0x302e <DIO_VidGet_Pin_Value>
			if(Local_u8Key_State==LOW)
    1cb4:	8c 89       	ldd	r24, Y+20	; 0x14
    1cb6:	88 23       	and	r24, r24
    1cb8:	d1 f5       	brne	.+116    	; 0x1d2e <Keypad_u8Get_Pressed_Key+0x13e>
			{
				Local_u8Key_Pressd=Local_u8Keypad_Array[Local_u8Row][Local_u8Column];
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	48 2f       	mov	r20, r24
    1cc4:	50 e0       	ldi	r21, 0x00	; 0
    1cc6:	22 0f       	add	r18, r18
    1cc8:	33 1f       	adc	r19, r19
    1cca:	22 0f       	add	r18, r18
    1ccc:	33 1f       	adc	r19, r19
    1cce:	ce 01       	movw	r24, r28
    1cd0:	01 96       	adiw	r24, 0x01	; 1
    1cd2:	82 0f       	add	r24, r18
    1cd4:	93 1f       	adc	r25, r19
    1cd6:	84 0f       	add	r24, r20
    1cd8:	95 1f       	adc	r25, r21
    1cda:	fc 01       	movw	r30, r24
    1cdc:	33 96       	adiw	r30, 0x03	; 3
    1cde:	80 81       	ld	r24, Z
    1ce0:	8b 83       	std	Y+3, r24	; 0x03
    1ce2:	11 c0       	rjmp	.+34     	; 0x1d06 <Keypad_u8Get_Pressed_Key+0x116>
				while (Local_u8Key_State == LOW )
				{
					DIO_VidGet_Pin_Value(Keypad_Port,Local_u8Row_Array [Local_u8Row],&Local_u8Key_State);
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	ce 01       	movw	r24, r28
    1cec:	49 96       	adiw	r24, 0x19	; 25
    1cee:	fc 01       	movw	r30, r24
    1cf0:	e2 0f       	add	r30, r18
    1cf2:	f3 1f       	adc	r31, r19
    1cf4:	90 81       	ld	r25, Z
    1cf6:	9e 01       	movw	r18, r28
    1cf8:	2c 5e       	subi	r18, 0xEC	; 236
    1cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfc:	82 e0       	ldi	r24, 0x02	; 2
    1cfe:	69 2f       	mov	r22, r25
    1d00:	a9 01       	movw	r20, r18
    1d02:	0e 94 17 18 	call	0x302e	; 0x302e <DIO_VidGet_Pin_Value>
		{
			DIO_VidGet_Pin_Value(Keypad_Port,Local_u8Row_Array [Local_u8Row],&Local_u8Key_State);
			if(Local_u8Key_State==LOW)
			{
				Local_u8Key_Pressd=Local_u8Keypad_Array[Local_u8Row][Local_u8Column];
				while (Local_u8Key_State == LOW )
    1d06:	8c 89       	ldd	r24, Y+20	; 0x14
    1d08:	88 23       	and	r24, r24
    1d0a:	61 f3       	breq	.-40     	; 0x1ce4 <Keypad_u8Get_Pressed_Key+0xf4>
				{
					DIO_VidGet_Pin_Value(Keypad_Port,Local_u8Row_Array [Local_u8Row],&Local_u8Key_State);
				}
				DIO_VidSet_Pin_Value(Keypad_Port,Local_u8Column_Array[Local_u8Column],HI);
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	ce 01       	movw	r24, r28
    1d14:	45 96       	adiw	r24, 0x15	; 21
    1d16:	fc 01       	movw	r30, r24
    1d18:	e2 0f       	add	r30, r18
    1d1a:	f3 1f       	adc	r31, r19
    1d1c:	90 81       	ld	r25, Z
    1d1e:	82 e0       	ldi	r24, 0x02	; 2
    1d20:	69 2f       	mov	r22, r25
    1d22:	41 e0       	ldi	r20, 0x01	; 1
    1d24:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
				return Local_u8Key_Pressd;
    1d28:	fb 81       	ldd	r31, Y+3	; 0x03
    1d2a:	fd 8f       	std	Y+29, r31	; 0x1d
    1d2c:	1e c0       	rjmp	.+60     	; 0x1d6a <Keypad_u8Get_Pressed_Key+0x17a>
	/*******The Main Code*******/

	for(Local_u8Column = ZERO;Local_u8Column<4;Local_u8Column++)
	{
		DIO_VidSet_Pin_Value(Keypad_Port,Local_u8Column_Array[Local_u8Column],LOW);
		for(Local_u8Row = ZERO;Local_u8Row<4;Local_u8Row++)
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	8f 5f       	subi	r24, 0xFF	; 255
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	84 30       	cpi	r24, 0x04	; 4
    1d38:	08 f4       	brcc	.+2      	; 0x1d3c <Keypad_u8Get_Pressed_Key+0x14c>
    1d3a:	ab cf       	rjmp	.-170    	; 0x1c92 <Keypad_u8Get_Pressed_Key+0xa2>
				}
				DIO_VidSet_Pin_Value(Keypad_Port,Local_u8Column_Array[Local_u8Column],HI);
				return Local_u8Key_Pressd;
			}
		}
		DIO_VidSet_Pin_Value(Keypad_Port,Local_u8Column_Array[Local_u8Column],HI);
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	ce 01       	movw	r24, r28
    1d44:	45 96       	adiw	r24, 0x15	; 21
    1d46:	fc 01       	movw	r30, r24
    1d48:	e2 0f       	add	r30, r18
    1d4a:	f3 1f       	adc	r31, r19
    1d4c:	90 81       	ld	r25, Z
    1d4e:	82 e0       	ldi	r24, 0x02	; 2
    1d50:	69 2f       	mov	r22, r25
    1d52:	41 e0       	ldi	r20, 0x01	; 1
    1d54:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
	u8 Local_u8Row_Array [] = {KeyPad_u8Row_0_PIN,KeyPad_u8Row_1_PIN,KeyPad_u8Row_2_PIN,KeyPad_u8Row_3_PIN};			   /* Column Array For Ease Access*/


	/*******The Main Code*******/

	for(Local_u8Column = ZERO;Local_u8Column<4;Local_u8Column++)
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	8f 5f       	subi	r24, 0xFF	; 255
    1d5c:	8a 83       	std	Y+2, r24	; 0x02
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	84 30       	cpi	r24, 0x04	; 4
    1d62:	08 f4       	brcc	.+2      	; 0x1d66 <Keypad_u8Get_Pressed_Key+0x176>
    1d64:	86 cf       	rjmp	.-244    	; 0x1c72 <Keypad_u8Get_Pressed_Key+0x82>
				return Local_u8Key_Pressd;
			}
		}
		DIO_VidSet_Pin_Value(Keypad_Port,Local_u8Column_Array[Local_u8Column],HI);
	}
	return Local_u8Key_Pressd;
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	8d 8f       	std	Y+29, r24	; 0x1d
    1d6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1d6c:	a2 96       	adiw	r28, 0x22	; 34
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	cd bf       	out	0x3d, r28	; 61
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <Keypad_u8Get_Pressed_Key_Wait>:


/*----------------------------- Get And Wait -----------------------------*/

u8 Keypad_u8Get_Pressed_Key_Wait()
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	a1 97       	sbiw	r28, 0x21	; 33
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
	/*******Initialization Of Some Local Important Variables*******/
	u8 Local_u8Key_Pressd = Not_Pressed ;				                                                                   /*Initial Value For The Key*/
    1d92:	8f ef       	ldi	r24, 0xFF	; 255
    1d94:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Keypad_Array [4][4] =  Keypad_Array ;	                                                                   /*Set Keypad Array*/
    1d96:	ce 01       	movw	r24, r28
    1d98:	04 96       	adiw	r24, 0x04	; 4
    1d9a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d9c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d9e:	e7 ea       	ldi	r30, 0xA7	; 167
    1da0:	f2 e0       	ldi	r31, 0x02	; 2
    1da2:	f8 a3       	std	Y+32, r31	; 0x20
    1da4:	ef 8f       	std	Y+31, r30	; 0x1f
    1da6:	f0 e1       	ldi	r31, 0x10	; 16
    1da8:	f9 a3       	std	Y+33, r31	; 0x21
    1daa:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1dac:	f8 a1       	ldd	r31, Y+32	; 0x20
    1dae:	00 80       	ld	r0, Z
    1db0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1db2:	98 a1       	ldd	r25, Y+32	; 0x20
    1db4:	01 96       	adiw	r24, 0x01	; 1
    1db6:	98 a3       	std	Y+32, r25	; 0x20
    1db8:	8f 8f       	std	Y+31, r24	; 0x1f
    1dba:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1dbc:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1dbe:	00 82       	st	Z, r0
    1dc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dc2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dc4:	01 96       	adiw	r24, 0x01	; 1
    1dc6:	9e 8f       	std	Y+30, r25	; 0x1e
    1dc8:	8d 8f       	std	Y+29, r24	; 0x1d
    1dca:	99 a1       	ldd	r25, Y+33	; 0x21
    1dcc:	91 50       	subi	r25, 0x01	; 1
    1dce:	99 a3       	std	Y+33, r25	; 0x21
    1dd0:	e9 a1       	ldd	r30, Y+33	; 0x21
    1dd2:	ee 23       	and	r30, r30
    1dd4:	51 f7       	brne	.-44     	; 0x1daa <Keypad_u8Get_Pressed_Key_Wait+0x2c>
	u8 Local_u8Column = ZERO ;							                                                                   /*Counter For Columns*/
    1dd6:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Row = ZERO ;								                                                                   /*Counter For ROWs*/
    1dd8:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8Key_State = HI ;							  															   	   /*Key State Variable*/
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8Column_Array [] = {KeyPad_u8Column_0_PIN,KeyPad_u8Column_1_PIN,KeyPad_u8Column_2_PIN,KeyPad_u8Column_3_PIN};/* Rows Array For Ease Access*/
    1dde:	1d 8a       	std	Y+21, r1	; 0x15
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	8e 8b       	std	Y+22, r24	; 0x16
    1de4:	82 e0       	ldi	r24, 0x02	; 2
    1de6:	8f 8b       	std	Y+23, r24	; 0x17
    1de8:	83 e0       	ldi	r24, 0x03	; 3
    1dea:	88 8f       	std	Y+24, r24	; 0x18
	u8 Local_u8Row_Array [] = {KeyPad_u8Row_0_PIN,KeyPad_u8Row_1_PIN,KeyPad_u8Row_2_PIN,KeyPad_u8Row_3_PIN};			   /* Column Array For Ease Access*/
    1dec:	84 e0       	ldi	r24, 0x04	; 4
    1dee:	89 8f       	std	Y+25, r24	; 0x19
    1df0:	85 e0       	ldi	r24, 0x05	; 5
    1df2:	8a 8f       	std	Y+26, r24	; 0x1a
    1df4:	86 e0       	ldi	r24, 0x06	; 6
    1df6:	8b 8f       	std	Y+27, r24	; 0x1b
    1df8:	87 e0       	ldi	r24, 0x07	; 7
    1dfa:	8c 8f       	std	Y+28, r24	; 0x1c


	/*******The Main Code*******/
	do
	{
		for(Local_u8Column = ZERO;Local_u8Column<4;Local_u8Column++)
    1dfc:	1a 82       	std	Y+2, r1	; 0x02
    1dfe:	7e c0       	rjmp	.+252    	; 0x1efc <Keypad_u8Get_Pressed_Key_Wait+0x17e>
		{
			DIO_VidSet_Pin_Value(Keypad_Port,Local_u8Column_Array[Local_u8Column],LOW);
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	ce 01       	movw	r24, r28
    1e08:	45 96       	adiw	r24, 0x15	; 21
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	e2 0f       	add	r30, r18
    1e0e:	f3 1f       	adc	r31, r19
    1e10:	90 81       	ld	r25, Z
    1e12:	82 e0       	ldi	r24, 0x02	; 2
    1e14:	69 2f       	mov	r22, r25
    1e16:	40 e0       	ldi	r20, 0x00	; 0
    1e18:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
			for(Local_u8Row = ZERO;Local_u8Row<4;Local_u8Row++)
    1e1c:	19 82       	std	Y+1, r1	; 0x01
    1e1e:	59 c0       	rjmp	.+178    	; 0x1ed2 <Keypad_u8Get_Pressed_Key_Wait+0x154>
			{
				DIO_VidGet_Pin_Value(Keypad_Port,Local_u8Row_Array [Local_u8Row],&Local_u8Key_State);
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	ce 01       	movw	r24, r28
    1e28:	49 96       	adiw	r24, 0x19	; 25
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	e2 0f       	add	r30, r18
    1e2e:	f3 1f       	adc	r31, r19
    1e30:	90 81       	ld	r25, Z
    1e32:	9e 01       	movw	r18, r28
    1e34:	2c 5e       	subi	r18, 0xEC	; 236
    1e36:	3f 4f       	sbci	r19, 0xFF	; 255
    1e38:	82 e0       	ldi	r24, 0x02	; 2
    1e3a:	69 2f       	mov	r22, r25
    1e3c:	a9 01       	movw	r20, r18
    1e3e:	0e 94 17 18 	call	0x302e	; 0x302e <DIO_VidGet_Pin_Value>
				if(Local_u8Key_State==LOW)
    1e42:	8c 89       	ldd	r24, Y+20	; 0x14
    1e44:	88 23       	and	r24, r24
    1e46:	09 f0       	breq	.+2      	; 0x1e4a <Keypad_u8Get_Pressed_Key_Wait+0xcc>
    1e48:	41 c0       	rjmp	.+130    	; 0x1ecc <Keypad_u8Get_Pressed_Key_Wait+0x14e>
				{
					Local_u8Key_Pressd=Local_u8Keypad_Array[Local_u8Row][Local_u8Column];
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	48 2f       	mov	r20, r24
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	22 0f       	add	r18, r18
    1e58:	33 1f       	adc	r19, r19
    1e5a:	22 0f       	add	r18, r18
    1e5c:	33 1f       	adc	r19, r19
    1e5e:	ce 01       	movw	r24, r28
    1e60:	01 96       	adiw	r24, 0x01	; 1
    1e62:	82 0f       	add	r24, r18
    1e64:	93 1f       	adc	r25, r19
    1e66:	84 0f       	add	r24, r20
    1e68:	95 1f       	adc	r25, r21
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	33 96       	adiw	r30, 0x03	; 3
    1e6e:	80 81       	ld	r24, Z
    1e70:	8b 83       	std	Y+3, r24	; 0x03
    1e72:	11 c0       	rjmp	.+34     	; 0x1e96 <Keypad_u8Get_Pressed_Key_Wait+0x118>
					while (Local_u8Key_State == LOW )
					{
						DIO_VidGet_Pin_Value(Keypad_Port,Local_u8Row_Array [Local_u8Row],&Local_u8Key_State);
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	ce 01       	movw	r24, r28
    1e7c:	49 96       	adiw	r24, 0x19	; 25
    1e7e:	fc 01       	movw	r30, r24
    1e80:	e2 0f       	add	r30, r18
    1e82:	f3 1f       	adc	r31, r19
    1e84:	90 81       	ld	r25, Z
    1e86:	9e 01       	movw	r18, r28
    1e88:	2c 5e       	subi	r18, 0xEC	; 236
    1e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8c:	82 e0       	ldi	r24, 0x02	; 2
    1e8e:	69 2f       	mov	r22, r25
    1e90:	a9 01       	movw	r20, r18
    1e92:	0e 94 17 18 	call	0x302e	; 0x302e <DIO_VidGet_Pin_Value>
			{
				DIO_VidGet_Pin_Value(Keypad_Port,Local_u8Row_Array [Local_u8Row],&Local_u8Key_State);
				if(Local_u8Key_State==LOW)
				{
					Local_u8Key_Pressd=Local_u8Keypad_Array[Local_u8Row][Local_u8Column];
					while (Local_u8Key_State == LOW )
    1e96:	8c 89       	ldd	r24, Y+20	; 0x14
    1e98:	88 23       	and	r24, r24
    1e9a:	61 f3       	breq	.-40     	; 0x1e74 <Keypad_u8Get_Pressed_Key_Wait+0xf6>
					{
						DIO_VidGet_Pin_Value(Keypad_Port,Local_u8Row_Array [Local_u8Row],&Local_u8Key_State);
					}
					DIO_VidSet_Pin_Value(Keypad_Port,Local_u8Column_Array[Local_u8Column],HI);
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	45 96       	adiw	r24, 0x15	; 21
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	e2 0f       	add	r30, r18
    1eaa:	f3 1f       	adc	r31, r19
    1eac:	90 81       	ld	r25, Z
    1eae:	82 e0       	ldi	r24, 0x02	; 2
    1eb0:	69 2f       	mov	r22, r25
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
					return Local_u8Key_Pressd;
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
				}
			}
			DIO_VidSet_Pin_Value(Keypad_Port,Local_u8Column_Array[Local_u8Column],HI);
		}
	}while(TRUE);
}
    1eba:	a1 96       	adiw	r28, 0x21	; 33
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret
	do
	{
		for(Local_u8Column = ZERO;Local_u8Column<4;Local_u8Column++)
		{
			DIO_VidSet_Pin_Value(Keypad_Port,Local_u8Column_Array[Local_u8Column],LOW);
			for(Local_u8Row = ZERO;Local_u8Row<4;Local_u8Row++)
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	8f 5f       	subi	r24, 0xFF	; 255
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	84 30       	cpi	r24, 0x04	; 4
    1ed6:	08 f4       	brcc	.+2      	; 0x1eda <Keypad_u8Get_Pressed_Key_Wait+0x15c>
    1ed8:	a3 cf       	rjmp	.-186    	; 0x1e20 <Keypad_u8Get_Pressed_Key_Wait+0xa2>
					}
					DIO_VidSet_Pin_Value(Keypad_Port,Local_u8Column_Array[Local_u8Column],HI);
					return Local_u8Key_Pressd;
				}
			}
			DIO_VidSet_Pin_Value(Keypad_Port,Local_u8Column_Array[Local_u8Column],HI);
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	45 96       	adiw	r24, 0x15	; 21
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	e2 0f       	add	r30, r18
    1ee8:	f3 1f       	adc	r31, r19
    1eea:	90 81       	ld	r25, Z
    1eec:	82 e0       	ldi	r24, 0x02	; 2
    1eee:	69 2f       	mov	r22, r25
    1ef0:	41 e0       	ldi	r20, 0x01	; 1
    1ef2:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>


	/*******The Main Code*******/
	do
	{
		for(Local_u8Column = ZERO;Local_u8Column<4;Local_u8Column++)
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	8f 5f       	subi	r24, 0xFF	; 255
    1efa:	8a 83       	std	Y+2, r24	; 0x02
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	84 30       	cpi	r24, 0x04	; 4
    1f00:	08 f4       	brcc	.+2      	; 0x1f04 <Keypad_u8Get_Pressed_Key_Wait+0x186>
    1f02:	7e cf       	rjmp	.-260    	; 0x1e00 <Keypad_u8Get_Pressed_Key_Wait+0x82>
    1f04:	7b cf       	rjmp	.-266    	; 0x1dfc <Keypad_u8Get_Pressed_Key_Wait+0x7e>

00001f06 <Keypad_VidInitialization>:


/*----------------------------- Port Initialization  -----------------------------*/

void Keypad_VidInitialization(void)
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSet_Port_Direction(Keypad_Port,0X0F);
    1f0e:	82 e0       	ldi	r24, 0x02	; 2
    1f10:	6f e0       	ldi	r22, 0x0F	; 15
    1f12:	0e 94 30 19 	call	0x3260	; 0x3260 <DIO_VidSet_Port_Direction>
	DIO_VidInternal_Pin_Bull_Up(Keypad_Port,Pin_4);
    1f16:	82 e0       	ldi	r24, 0x02	; 2
    1f18:	64 e0       	ldi	r22, 0x04	; 4
    1f1a:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <DIO_VidInternal_Pin_Bull_Up>
	DIO_VidInternal_Pin_Bull_Up(Keypad_Port,Pin_5);
    1f1e:	82 e0       	ldi	r24, 0x02	; 2
    1f20:	65 e0       	ldi	r22, 0x05	; 5
    1f22:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <DIO_VidInternal_Pin_Bull_Up>
	DIO_VidInternal_Pin_Bull_Up(Keypad_Port,Pin_6);
    1f26:	82 e0       	ldi	r24, 0x02	; 2
    1f28:	66 e0       	ldi	r22, 0x06	; 6
    1f2a:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <DIO_VidInternal_Pin_Bull_Up>
	DIO_VidInternal_Pin_Bull_Up(Keypad_Port,Pin_7);
    1f2e:	82 e0       	ldi	r24, 0x02	; 2
    1f30:	67 e0       	ldi	r22, 0x07	; 7
    1f32:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <DIO_VidInternal_Pin_Bull_Up>
}
    1f36:	cf 91       	pop	r28
    1f38:	df 91       	pop	r29
    1f3a:	08 95       	ret

00001f3c <Motor_VidGo_Forward>:


/*------------------------- Drive Forward -------------------------*/

void Motor_VidGo_Forward(u8 Copy_u8Motor_Number)
{
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	00 d0       	rcall	.+0      	; 0x1f42 <Motor_VidGo_Forward+0x6>
    1f42:	0f 92       	push	r0
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Motor_Number)
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	3b 83       	std	Y+3, r19	; 0x03
    1f52:	2a 83       	std	Y+2, r18	; 0x02
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	9b 81       	ldd	r25, Y+3	; 0x03
    1f58:	81 30       	cpi	r24, 0x01	; 1
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	31 f0       	breq	.+12     	; 0x1f6a <Motor_VidGo_Forward+0x2e>
    1f5e:	2a 81       	ldd	r18, Y+2	; 0x02
    1f60:	3b 81       	ldd	r19, Y+3	; 0x03
    1f62:	22 30       	cpi	r18, 0x02	; 2
    1f64:	31 05       	cpc	r19, r1
    1f66:	89 f0       	breq	.+34     	; 0x1f8a <Motor_VidGo_Forward+0x4e>
    1f68:	20 c0       	rjmp	.+64     	; 0x1faa <Motor_VidGo_Forward+0x6e>
	{
		case(Motor_One) : DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_One_D1_PIN,HI);
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	60 e0       	ldi	r22, 0x00	; 0
    1f6e:	41 e0       	ldi	r20, 0x01	; 1
    1f70:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_One_D2_PIN,LOW);
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	61 e0       	ldi	r22, 0x01	; 1
    1f78:	40 e0       	ldi	r20, 0x00	; 0
    1f7a:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_Enable_PORT,Motor_One_E_PIN,HI);break;
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	60 e0       	ldi	r22, 0x00	; 0
    1f82:	41 e0       	ldi	r20, 0x01	; 1
    1f84:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
    1f88:	2e c0       	rjmp	.+92     	; 0x1fe6 <Motor_VidGo_Forward+0xaa>

		case(Motor_Two) : DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_Two_D1_PIN,HI);
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	62 e0       	ldi	r22, 0x02	; 2
    1f8e:	41 e0       	ldi	r20, 0x01	; 1
    1f90:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_Two_D2_PIN,LOW);
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	63 e0       	ldi	r22, 0x03	; 3
    1f98:	40 e0       	ldi	r20, 0x00	; 0
    1f9a:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_Enable_PORT,Motor_Two_E_PIN,HI);break;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	61 e0       	ldi	r22, 0x01	; 1
    1fa2:	41 e0       	ldi	r20, 0x01	; 1
    1fa4:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
    1fa8:	1e c0       	rjmp	.+60     	; 0x1fe6 <Motor_VidGo_Forward+0xaa>

		default			: DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_One_D1_PIN,HI);
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	60 e0       	ldi	r22, 0x00	; 0
    1fae:	41 e0       	ldi	r20, 0x01	; 1
    1fb0:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_One_D2_PIN,LOW);
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	61 e0       	ldi	r22, 0x01	; 1
    1fb8:	40 e0       	ldi	r20, 0x00	; 0
    1fba:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_Enable_PORT,Motor_One_E_PIN,HI);
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	60 e0       	ldi	r22, 0x00	; 0
    1fc2:	41 e0       	ldi	r20, 0x01	; 1
    1fc4:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_Two_D1_PIN,HI);
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	62 e0       	ldi	r22, 0x02	; 2
    1fcc:	41 e0       	ldi	r20, 0x01	; 1
    1fce:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_Two_D2_PIN,LOW);
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	63 e0       	ldi	r22, 0x03	; 3
    1fd6:	40 e0       	ldi	r20, 0x00	; 0
    1fd8:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_Enable_PORT,Motor_Two_E_PIN,HI);break;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	61 e0       	ldi	r22, 0x01	; 1
    1fe0:	41 e0       	ldi	r20, 0x01	; 1
    1fe2:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
	}
}
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <Motor_VidGo_Backward>:


/*------------------------- Drive Backward -------------------------*/

void Motor_VidGo_Backward(u8 Copy_u8Motor_Number)
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <Motor_VidGo_Backward+0x6>
    1ff8:	0f 92       	push	r0
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Motor_Number)
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	28 2f       	mov	r18, r24
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	3b 83       	std	Y+3, r19	; 0x03
    2008:	2a 83       	std	Y+2, r18	; 0x02
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	9b 81       	ldd	r25, Y+3	; 0x03
    200e:	81 30       	cpi	r24, 0x01	; 1
    2010:	91 05       	cpc	r25, r1
    2012:	31 f0       	breq	.+12     	; 0x2020 <Motor_VidGo_Backward+0x2e>
    2014:	2a 81       	ldd	r18, Y+2	; 0x02
    2016:	3b 81       	ldd	r19, Y+3	; 0x03
    2018:	22 30       	cpi	r18, 0x02	; 2
    201a:	31 05       	cpc	r19, r1
    201c:	89 f0       	breq	.+34     	; 0x2040 <Motor_VidGo_Backward+0x4e>
    201e:	20 c0       	rjmp	.+64     	; 0x2060 <Motor_VidGo_Backward+0x6e>
	{
		case(Motor_One) : DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_One_D1_PIN,LOW);
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	40 e0       	ldi	r20, 0x00	; 0
    2026:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_One_D2_PIN,HI);
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	61 e0       	ldi	r22, 0x01	; 1
    202e:	41 e0       	ldi	r20, 0x01	; 1
    2030:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_Enable_PORT,Motor_One_E_PIN,HI);break;
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	60 e0       	ldi	r22, 0x00	; 0
    2038:	41 e0       	ldi	r20, 0x01	; 1
    203a:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
    203e:	2e c0       	rjmp	.+92     	; 0x209c <Motor_VidGo_Backward+0xaa>

		case(Motor_Two) : DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_Two_D1_PIN,LOW);
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	62 e0       	ldi	r22, 0x02	; 2
    2044:	40 e0       	ldi	r20, 0x00	; 0
    2046:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_Two_D2_PIN,HI);
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	63 e0       	ldi	r22, 0x03	; 3
    204e:	41 e0       	ldi	r20, 0x01	; 1
    2050:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_Enable_PORT,Motor_Two_E_PIN,HI);break;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	61 e0       	ldi	r22, 0x01	; 1
    2058:	41 e0       	ldi	r20, 0x01	; 1
    205a:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
    205e:	1e c0       	rjmp	.+60     	; 0x209c <Motor_VidGo_Backward+0xaa>

		default			: DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_One_D1_PIN,LOW);
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	60 e0       	ldi	r22, 0x00	; 0
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_One_D2_PIN,HI);
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	61 e0       	ldi	r22, 0x01	; 1
    206e:	41 e0       	ldi	r20, 0x01	; 1
    2070:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_Enable_PORT,Motor_One_E_PIN,HI);
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	60 e0       	ldi	r22, 0x00	; 0
    2078:	41 e0       	ldi	r20, 0x01	; 1
    207a:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_Two_D1_PIN,LOW);
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	62 e0       	ldi	r22, 0x02	; 2
    2082:	40 e0       	ldi	r20, 0x00	; 0
    2084:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_Two_D2_PIN,HI);
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	63 e0       	ldi	r22, 0x03	; 3
    208c:	41 e0       	ldi	r20, 0x01	; 1
    208e:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_Enable_PORT,Motor_Two_E_PIN,HI);
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	61 e0       	ldi	r22, 0x01	; 1
    2096:	41 e0       	ldi	r20, 0x01	; 1
    2098:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
	}
}
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <Motor_VidStop>:


/*------------------------- Motor Stop -------------------------*/

void Motor_VidStop(u8 Copy_u8Motor_Number)
{
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <Motor_VidStop+0x6>
    20ae:	0f 92       	push	r0
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Motor_Number)
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	3b 83       	std	Y+3, r19	; 0x03
    20be:	2a 83       	std	Y+2, r18	; 0x02
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	9b 81       	ldd	r25, Y+3	; 0x03
    20c4:	81 30       	cpi	r24, 0x01	; 1
    20c6:	91 05       	cpc	r25, r1
    20c8:	31 f0       	breq	.+12     	; 0x20d6 <Motor_VidStop+0x2e>
    20ca:	2a 81       	ldd	r18, Y+2	; 0x02
    20cc:	3b 81       	ldd	r19, Y+3	; 0x03
    20ce:	22 30       	cpi	r18, 0x02	; 2
    20d0:	31 05       	cpc	r19, r1
    20d2:	89 f0       	breq	.+34     	; 0x20f6 <Motor_VidStop+0x4e>
    20d4:	20 c0       	rjmp	.+64     	; 0x2116 <Motor_VidStop+0x6e>
	{
		case(Motor_One) : DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_One_D1_PIN,LOW);
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	60 e0       	ldi	r22, 0x00	; 0
    20da:	40 e0       	ldi	r20, 0x00	; 0
    20dc:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_One_D2_PIN,LOW);
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	61 e0       	ldi	r22, 0x01	; 1
    20e4:	40 e0       	ldi	r20, 0x00	; 0
    20e6:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_Enable_PORT,Motor_One_E_PIN,HI);break;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	60 e0       	ldi	r22, 0x00	; 0
    20ee:	41 e0       	ldi	r20, 0x01	; 1
    20f0:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
    20f4:	2e c0       	rjmp	.+92     	; 0x2152 <Motor_VidStop+0xaa>

		case(Motor_Two) : DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_Two_D1_PIN,LOW);
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	62 e0       	ldi	r22, 0x02	; 2
    20fa:	40 e0       	ldi	r20, 0x00	; 0
    20fc:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_Two_D2_PIN,LOW);
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	63 e0       	ldi	r22, 0x03	; 3
    2104:	40 e0       	ldi	r20, 0x00	; 0
    2106:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_Enable_PORT,Motor_Two_E_PIN,HI);break;
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	61 e0       	ldi	r22, 0x01	; 1
    210e:	41 e0       	ldi	r20, 0x01	; 1
    2110:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
    2114:	1e c0       	rjmp	.+60     	; 0x2152 <Motor_VidStop+0xaa>

		default			: DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_One_D1_PIN,LOW);
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	60 e0       	ldi	r22, 0x00	; 0
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_One_D2_PIN,LOW);
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	61 e0       	ldi	r22, 0x01	; 1
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_Enable_PORT,Motor_One_E_PIN,HI);
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	60 e0       	ldi	r22, 0x00	; 0
    212e:	41 e0       	ldi	r20, 0x01	; 1
    2130:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_Two_D1_PIN,LOW);
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	62 e0       	ldi	r22, 0x02	; 2
    2138:	40 e0       	ldi	r20, 0x00	; 0
    213a:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_CTRL_PORT,Motor_Two_D2_PIN,LOW);
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	63 e0       	ldi	r22, 0x03	; 3
    2142:	40 e0       	ldi	r20, 0x00	; 0
    2144:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
						  DIO_VidSet_Pin_Value(Motor_Enable_PORT,Motor_Two_E_PIN,HI);
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	61 e0       	ldi	r22, 0x01	; 1
    214c:	41 e0       	ldi	r20, 0x01	; 1
    214e:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <DIO_VidSet_Pin_Value>
	}
}
    2152:	0f 90       	pop	r0
    2154:	0f 90       	pop	r0
    2156:	0f 90       	pop	r0
    2158:	cf 91       	pop	r28
    215a:	df 91       	pop	r29
    215c:	08 95       	ret

0000215e <Timer_0_VidInitialization>:

/************************************************/
/*					Timer 0 					*/
/************************************************/
	void Timer_0_VidInitialization (u8 Copy_u8Mode,u8 Copy_u8OCR_Value,u8 Copy_u8Compare_Match_Interrupt,u8 Copy_u8Over_Flow_Interrupt,u8 Copy_u8Pre_Scalar)
	{
    215e:	0f 93       	push	r16
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
    2168:	2d 97       	sbiw	r28, 0x0d	; 13
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	6a 83       	std	Y+2, r22	; 0x02
    2178:	4b 83       	std	Y+3, r20	; 0x03
    217a:	2c 83       	std	Y+4, r18	; 0x04
    217c:	0d 83       	std	Y+5, r16	; 0x05
		switch(Copy_u8Mode)
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	3d 87       	std	Y+13, r19	; 0x0d
    2186:	2c 87       	std	Y+12, r18	; 0x0c
    2188:	8c 85       	ldd	r24, Y+12	; 0x0c
    218a:	9d 85       	ldd	r25, Y+13	; 0x0d
    218c:	82 30       	cpi	r24, 0x02	; 2
    218e:	91 05       	cpc	r25, r1
    2190:	e1 f1       	breq	.+120    	; 0x220a <Timer_0_VidInitialization+0xac>
    2192:	2c 85       	ldd	r18, Y+12	; 0x0c
    2194:	3d 85       	ldd	r19, Y+13	; 0x0d
    2196:	23 30       	cpi	r18, 0x03	; 3
    2198:	31 05       	cpc	r19, r1
    219a:	34 f4       	brge	.+12     	; 0x21a8 <Timer_0_VidInitialization+0x4a>
    219c:	8c 85       	ldd	r24, Y+12	; 0x0c
    219e:	9d 85       	ldd	r25, Y+13	; 0x0d
    21a0:	81 30       	cpi	r24, 0x01	; 1
    21a2:	91 05       	cpc	r25, r1
    21a4:	61 f0       	breq	.+24     	; 0x21be <Timer_0_VidInitialization+0x60>
    21a6:	4f c0       	rjmp	.+158    	; 0x2246 <Timer_0_VidInitialization+0xe8>
    21a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    21aa:	3d 85       	ldd	r19, Y+13	; 0x0d
    21ac:	23 30       	cpi	r18, 0x03	; 3
    21ae:	31 05       	cpc	r19, r1
    21b0:	c9 f0       	breq	.+50     	; 0x21e4 <Timer_0_VidInitialization+0x86>
    21b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    21b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    21b6:	84 30       	cpi	r24, 0x04	; 4
    21b8:	91 05       	cpc	r25, r1
    21ba:	b1 f1       	breq	.+108    	; 0x2228 <Timer_0_VidInitialization+0xca>
    21bc:	44 c0       	rjmp	.+136    	; 0x2246 <Timer_0_VidInitialization+0xe8>
		{
			case(Normal):Clear_Bit(TCCR0 , TCCR0_WGM00);Clear_Bit(TCCR0 , TCCR0_WGM01);OCR0=Copy_u8OCR_Value;break;
    21be:	a3 e5       	ldi	r26, 0x53	; 83
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	e3 e5       	ldi	r30, 0x53	; 83
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	8f 7b       	andi	r24, 0xBF	; 191
    21ca:	8c 93       	st	X, r24
    21cc:	a3 e5       	ldi	r26, 0x53	; 83
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e3 e5       	ldi	r30, 0x53	; 83
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	87 7f       	andi	r24, 0xF7	; 247
    21d8:	8c 93       	st	X, r24
    21da:	ec e5       	ldi	r30, 0x5C	; 92
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	80 83       	st	Z, r24
    21e2:	3f c0       	rjmp	.+126    	; 0x2262 <Timer_0_VidInitialization+0x104>
			case(CTC):Clear_Bit(TCCR0 , TCCR0_WGM00);Set_Bit(TCCR0 , TCCR0_WGM01);OCR0=Copy_u8OCR_Value;break;
    21e4:	a3 e5       	ldi	r26, 0x53	; 83
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	e3 e5       	ldi	r30, 0x53	; 83
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	8f 7b       	andi	r24, 0xBF	; 191
    21f0:	8c 93       	st	X, r24
    21f2:	a3 e5       	ldi	r26, 0x53	; 83
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	e3 e5       	ldi	r30, 0x53	; 83
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	88 60       	ori	r24, 0x08	; 8
    21fe:	8c 93       	st	X, r24
    2200:	ec e5       	ldi	r30, 0x5C	; 92
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	80 83       	st	Z, r24
    2208:	2c c0       	rjmp	.+88     	; 0x2262 <Timer_0_VidInitialization+0x104>
			case(PWM_Phase_Correct):Set_Bit(TCCR0 , TCCR0_WGM00);Clear_Bit(TCCR0 , TCCR0_WGM01);break;
    220a:	a3 e5       	ldi	r26, 0x53	; 83
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	e3 e5       	ldi	r30, 0x53	; 83
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	80 64       	ori	r24, 0x40	; 64
    2216:	8c 93       	st	X, r24
    2218:	a3 e5       	ldi	r26, 0x53	; 83
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e3 e5       	ldi	r30, 0x53	; 83
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	87 7f       	andi	r24, 0xF7	; 247
    2224:	8c 93       	st	X, r24
    2226:	1d c0       	rjmp	.+58     	; 0x2262 <Timer_0_VidInitialization+0x104>
			case(Fast_PWM):Set_Bit(TCCR0 , TCCR0_WGM00);Set_Bit(TCCR0 , TCCR0_WGM01);break;
    2228:	a3 e5       	ldi	r26, 0x53	; 83
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e3 e5       	ldi	r30, 0x53	; 83
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	80 64       	ori	r24, 0x40	; 64
    2234:	8c 93       	st	X, r24
    2236:	a3 e5       	ldi	r26, 0x53	; 83
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e3 e5       	ldi	r30, 0x53	; 83
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	88 60       	ori	r24, 0x08	; 8
    2242:	8c 93       	st	X, r24
    2244:	0e c0       	rjmp	.+28     	; 0x2262 <Timer_0_VidInitialization+0x104>
			default :Clear_Bit(TCCR0 , TCCR0_WGM00);Clear_Bit(TCCR0 , TCCR0_WGM01);
    2246:	a3 e5       	ldi	r26, 0x53	; 83
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e3 e5       	ldi	r30, 0x53	; 83
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	8f 7b       	andi	r24, 0xBF	; 191
    2252:	8c 93       	st	X, r24
    2254:	a3 e5       	ldi	r26, 0x53	; 83
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e3 e5       	ldi	r30, 0x53	; 83
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	87 7f       	andi	r24, 0xF7	; 247
    2260:	8c 93       	st	X, r24
		}
		switch(Copy_u8Over_Flow_Interrupt)
    2262:	8c 81       	ldd	r24, Y+4	; 0x04
    2264:	28 2f       	mov	r18, r24
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	3b 87       	std	Y+11, r19	; 0x0b
    226a:	2a 87       	std	Y+10, r18	; 0x0a
    226c:	8a 85       	ldd	r24, Y+10	; 0x0a
    226e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	31 f0       	breq	.+12     	; 0x2280 <Timer_0_VidInitialization+0x122>
    2274:	2a 85       	ldd	r18, Y+10	; 0x0a
    2276:	3b 85       	ldd	r19, Y+11	; 0x0b
    2278:	21 30       	cpi	r18, 0x01	; 1
    227a:	31 05       	cpc	r19, r1
    227c:	49 f0       	breq	.+18     	; 0x2290 <Timer_0_VidInitialization+0x132>
    227e:	10 c0       	rjmp	.+32     	; 0x22a0 <Timer_0_VidInitialization+0x142>
		{
			case(Enable_OF):Set_Bit(TIMSK , TIMSK_TOIE0);break;
    2280:	a9 e5       	ldi	r26, 0x59	; 89
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	e9 e5       	ldi	r30, 0x59	; 89
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	81 60       	ori	r24, 0x01	; 1
    228c:	8c 93       	st	X, r24
    228e:	0f c0       	rjmp	.+30     	; 0x22ae <Timer_0_VidInitialization+0x150>
			case(Disable_OF):Clear_Bit(TIMSK , TIMSK_TOIE0);break;
    2290:	a9 e5       	ldi	r26, 0x59	; 89
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	e9 e5       	ldi	r30, 0x59	; 89
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	8e 7f       	andi	r24, 0xFE	; 254
    229c:	8c 93       	st	X, r24
    229e:	07 c0       	rjmp	.+14     	; 0x22ae <Timer_0_VidInitialization+0x150>
			default:Set_Bit(TIMSK , TIMSK_TOIE0);
    22a0:	a9 e5       	ldi	r26, 0x59	; 89
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e9 e5       	ldi	r30, 0x59	; 89
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	81 60       	ori	r24, 0x01	; 1
    22ac:	8c 93       	st	X, r24
		}
		switch(Copy_u8Compare_Match_Interrupt)
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	39 87       	std	Y+9, r19	; 0x09
    22b6:	28 87       	std	Y+8, r18	; 0x08
    22b8:	88 85       	ldd	r24, Y+8	; 0x08
    22ba:	99 85       	ldd	r25, Y+9	; 0x09
    22bc:	82 30       	cpi	r24, 0x02	; 2
    22be:	91 05       	cpc	r25, r1
    22c0:	31 f0       	breq	.+12     	; 0x22ce <Timer_0_VidInitialization+0x170>
    22c2:	28 85       	ldd	r18, Y+8	; 0x08
    22c4:	39 85       	ldd	r19, Y+9	; 0x09
    22c6:	23 30       	cpi	r18, 0x03	; 3
    22c8:	31 05       	cpc	r19, r1
    22ca:	49 f0       	breq	.+18     	; 0x22de <Timer_0_VidInitialization+0x180>
    22cc:	10 c0       	rjmp	.+32     	; 0x22ee <Timer_0_VidInitialization+0x190>
		{
			case(Enable_CM):Set_Bit(TIMSK , TIMSK_OCIE0);break;
    22ce:	a9 e5       	ldi	r26, 0x59	; 89
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e9 e5       	ldi	r30, 0x59	; 89
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	82 60       	ori	r24, 0x02	; 2
    22da:	8c 93       	st	X, r24
    22dc:	0f c0       	rjmp	.+30     	; 0x22fc <Timer_0_VidInitialization+0x19e>
			case(Disable_CM):Clear_Bit(TIMSK , TIMSK_OCIE0);break;
    22de:	a9 e5       	ldi	r26, 0x59	; 89
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	e9 e5       	ldi	r30, 0x59	; 89
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	8d 7f       	andi	r24, 0xFD	; 253
    22ea:	8c 93       	st	X, r24
    22ec:	07 c0       	rjmp	.+14     	; 0x22fc <Timer_0_VidInitialization+0x19e>
			default:Set_Bit(TIMSK , TIMSK_OCIE0);
    22ee:	a9 e5       	ldi	r26, 0x59	; 89
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	e9 e5       	ldi	r30, 0x59	; 89
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	82 60       	ori	r24, 0x02	; 2
    22fa:	8c 93       	st	X, r24
		}
		if((Copy_u8Mode==PWM_Phase_Correct)||(Copy_u8Mode==Fast_PWM))
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	82 30       	cpi	r24, 0x02	; 2
    2300:	19 f0       	breq	.+6      	; 0x2308 <Timer_0_VidInitialization+0x1aa>
    2302:	89 81       	ldd	r24, Y+1	; 0x01
    2304:	84 30       	cpi	r24, 0x04	; 4
    2306:	71 f4       	brne	.+28     	; 0x2324 <Timer_0_VidInitialization+0x1c6>
		{
			#if	PWM_Mode == COCSOB
				Clear_Bit(TCCR0 , TCCR0_COM00);
    2308:	a3 e5       	ldi	r26, 0x53	; 83
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	e3 e5       	ldi	r30, 0x53	; 83
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	8f 7e       	andi	r24, 0xEF	; 239
    2314:	8c 93       	st	X, r24
				Set_Bit(TCCR0 , TCCR0_COM01);
    2316:	a3 e5       	ldi	r26, 0x53	; 83
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e3 e5       	ldi	r30, 0x53	; 83
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	80 62       	ori	r24, 0x20	; 32
    2322:	8c 93       	st	X, r24
				Set_Bit(TCCR0 , TCCR0_COM01);
			#else
						#warning (" Wrong Configuration !!")
			#endif
		}
		switch(Copy_u8Pre_Scalar)
    2324:	8d 81       	ldd	r24, Y+5	; 0x05
    2326:	28 2f       	mov	r18, r24
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	3f 83       	std	Y+7, r19	; 0x07
    232c:	2e 83       	std	Y+6, r18	; 0x06
    232e:	8e 81       	ldd	r24, Y+6	; 0x06
    2330:	9f 81       	ldd	r25, Y+7	; 0x07
    2332:	82 30       	cpi	r24, 0x02	; 2
    2334:	91 05       	cpc	r25, r1
    2336:	09 f4       	brne	.+2      	; 0x233a <Timer_0_VidInitialization+0x1dc>
    2338:	48 c0       	rjmp	.+144    	; 0x23ca <Timer_0_VidInitialization+0x26c>
    233a:	2e 81       	ldd	r18, Y+6	; 0x06
    233c:	3f 81       	ldd	r19, Y+7	; 0x07
    233e:	23 30       	cpi	r18, 0x03	; 3
    2340:	31 05       	cpc	r19, r1
    2342:	54 f4       	brge	.+20     	; 0x2358 <Timer_0_VidInitialization+0x1fa>
    2344:	8e 81       	ldd	r24, Y+6	; 0x06
    2346:	9f 81       	ldd	r25, Y+7	; 0x07
    2348:	00 97       	sbiw	r24, 0x00	; 0
    234a:	99 f0       	breq	.+38     	; 0x2372 <Timer_0_VidInitialization+0x214>
    234c:	2e 81       	ldd	r18, Y+6	; 0x06
    234e:	3f 81       	ldd	r19, Y+7	; 0x07
    2350:	21 30       	cpi	r18, 0x01	; 1
    2352:	31 05       	cpc	r19, r1
    2354:	21 f1       	breq	.+72     	; 0x239e <Timer_0_VidInitialization+0x240>
    2356:	7b c0       	rjmp	.+246    	; 0x244e <Timer_0_VidInitialization+0x2f0>
    2358:	8e 81       	ldd	r24, Y+6	; 0x06
    235a:	9f 81       	ldd	r25, Y+7	; 0x07
    235c:	83 30       	cpi	r24, 0x03	; 3
    235e:	91 05       	cpc	r25, r1
    2360:	09 f4       	brne	.+2      	; 0x2364 <Timer_0_VidInitialization+0x206>
    2362:	49 c0       	rjmp	.+146    	; 0x23f6 <Timer_0_VidInitialization+0x298>
    2364:	2e 81       	ldd	r18, Y+6	; 0x06
    2366:	3f 81       	ldd	r19, Y+7	; 0x07
    2368:	24 30       	cpi	r18, 0x04	; 4
    236a:	31 05       	cpc	r19, r1
    236c:	09 f4       	brne	.+2      	; 0x2370 <Timer_0_VidInitialization+0x212>
    236e:	59 c0       	rjmp	.+178    	; 0x2422 <Timer_0_VidInitialization+0x2c4>
    2370:	6e c0       	rjmp	.+220    	; 0x244e <Timer_0_VidInitialization+0x2f0>
		{
			case(Pre_Scalar_0):Set_Bit(TCCR0 , TCCR0_CS00);Clear_Bit(TCCR0 , TCCR0_CS01);Clear_Bit(TCCR0 , TCCR0_CS02);break;
    2372:	a3 e5       	ldi	r26, 0x53	; 83
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	e3 e5       	ldi	r30, 0x53	; 83
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	81 60       	ori	r24, 0x01	; 1
    237e:	8c 93       	st	X, r24
    2380:	a3 e5       	ldi	r26, 0x53	; 83
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e3 e5       	ldi	r30, 0x53	; 83
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	8d 7f       	andi	r24, 0xFD	; 253
    238c:	8c 93       	st	X, r24
    238e:	a3 e5       	ldi	r26, 0x53	; 83
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	e3 e5       	ldi	r30, 0x53	; 83
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	8b 7f       	andi	r24, 0xFB	; 251
    239a:	8c 93       	st	X, r24
    239c:	6d c0       	rjmp	.+218    	; 0x2478 <Timer_0_VidInitialization+0x31a>
			case(Pre_Scalar_8):Clear_Bit(TCCR0 , TCCR0_CS00);Set_Bit(TCCR0 , TCCR0_CS01);Clear_Bit(TCCR0 , TCCR0_CS02);break;
    239e:	a3 e5       	ldi	r26, 0x53	; 83
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	e3 e5       	ldi	r30, 0x53	; 83
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	8e 7f       	andi	r24, 0xFE	; 254
    23aa:	8c 93       	st	X, r24
    23ac:	a3 e5       	ldi	r26, 0x53	; 83
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e3 e5       	ldi	r30, 0x53	; 83
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	82 60       	ori	r24, 0x02	; 2
    23b8:	8c 93       	st	X, r24
    23ba:	a3 e5       	ldi	r26, 0x53	; 83
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e3 e5       	ldi	r30, 0x53	; 83
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	8b 7f       	andi	r24, 0xFB	; 251
    23c6:	8c 93       	st	X, r24
    23c8:	57 c0       	rjmp	.+174    	; 0x2478 <Timer_0_VidInitialization+0x31a>
			case(Pre_Scalar_64):Set_Bit(TCCR0 , TCCR0_CS00);Set_Bit(TCCR0 , TCCR0_CS01);Clear_Bit(TCCR0 , TCCR0_CS02);break;
    23ca:	a3 e5       	ldi	r26, 0x53	; 83
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	e3 e5       	ldi	r30, 0x53	; 83
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	81 60       	ori	r24, 0x01	; 1
    23d6:	8c 93       	st	X, r24
    23d8:	a3 e5       	ldi	r26, 0x53	; 83
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	e3 e5       	ldi	r30, 0x53	; 83
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	82 60       	ori	r24, 0x02	; 2
    23e4:	8c 93       	st	X, r24
    23e6:	a3 e5       	ldi	r26, 0x53	; 83
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	e3 e5       	ldi	r30, 0x53	; 83
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	8b 7f       	andi	r24, 0xFB	; 251
    23f2:	8c 93       	st	X, r24
    23f4:	41 c0       	rjmp	.+130    	; 0x2478 <Timer_0_VidInitialization+0x31a>
			case(Pre_Scalar_256):Clear_Bit(TCCR0 , TCCR0_CS00);Clear_Bit(TCCR0 , TCCR0_CS01);Set_Bit(TCCR0 , TCCR0_CS02);break;
    23f6:	a3 e5       	ldi	r26, 0x53	; 83
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e3 e5       	ldi	r30, 0x53	; 83
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	8e 7f       	andi	r24, 0xFE	; 254
    2402:	8c 93       	st	X, r24
    2404:	a3 e5       	ldi	r26, 0x53	; 83
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e3 e5       	ldi	r30, 0x53	; 83
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	8d 7f       	andi	r24, 0xFD	; 253
    2410:	8c 93       	st	X, r24
    2412:	a3 e5       	ldi	r26, 0x53	; 83
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e3 e5       	ldi	r30, 0x53	; 83
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	84 60       	ori	r24, 0x04	; 4
    241e:	8c 93       	st	X, r24
    2420:	2b c0       	rjmp	.+86     	; 0x2478 <Timer_0_VidInitialization+0x31a>
			case(Pre_Scalar_1024):Set_Bit(TCCR0 , TCCR0_CS00);Clear_Bit(TCCR0 , TCCR0_CS01);Set_Bit(TCCR0 , TCCR0_CS02);break;
    2422:	a3 e5       	ldi	r26, 0x53	; 83
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	e3 e5       	ldi	r30, 0x53	; 83
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	81 60       	ori	r24, 0x01	; 1
    242e:	8c 93       	st	X, r24
    2430:	a3 e5       	ldi	r26, 0x53	; 83
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	e3 e5       	ldi	r30, 0x53	; 83
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	8d 7f       	andi	r24, 0xFD	; 253
    243c:	8c 93       	st	X, r24
    243e:	a3 e5       	ldi	r26, 0x53	; 83
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e3 e5       	ldi	r30, 0x53	; 83
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	84 60       	ori	r24, 0x04	; 4
    244a:	8c 93       	st	X, r24
    244c:	15 c0       	rjmp	.+42     	; 0x2478 <Timer_0_VidInitialization+0x31a>
			default:Clear_Bit(TCCR0 , TCCR0_CS00);Set_Bit(TCCR0 , TCCR0_CS01);Clear_Bit(TCCR0 , TCCR0_CS02);
    244e:	a3 e5       	ldi	r26, 0x53	; 83
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	e3 e5       	ldi	r30, 0x53	; 83
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	8e 7f       	andi	r24, 0xFE	; 254
    245a:	8c 93       	st	X, r24
    245c:	a3 e5       	ldi	r26, 0x53	; 83
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	e3 e5       	ldi	r30, 0x53	; 83
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	82 60       	ori	r24, 0x02	; 2
    2468:	8c 93       	st	X, r24
    246a:	a3 e5       	ldi	r26, 0x53	; 83
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	e3 e5       	ldi	r30, 0x53	; 83
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	8b 7f       	andi	r24, 0xFB	; 251
    2476:	8c 93       	st	X, r24
		}
	}
    2478:	2d 96       	adiw	r28, 0x0d	; 13
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	f8 94       	cli
    247e:	de bf       	out	0x3e, r29	; 62
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	cd bf       	out	0x3d, r28	; 61
    2484:	cf 91       	pop	r28
    2486:	df 91       	pop	r29
    2488:	0f 91       	pop	r16
    248a:	08 95       	ret

0000248c <Timer_VidPwm_Duty_Cycle>:

/************************************************/
/*					General 					*/
/************************************************/
void Timer_VidPwm_Duty_Cycle(u8 Copy_u8Timer,u8 Copy_u8Duty_Cycle)
	{
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	00 d0       	rcall	.+0      	; 0x2492 <Timer_VidPwm_Duty_Cycle+0x6>
    2492:	00 d0       	rcall	.+0      	; 0x2494 <Timer_VidPwm_Duty_Cycle+0x8>
    2494:	0f 92       	push	r0
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	8a 83       	std	Y+2, r24	; 0x02
    249c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Variable=((Copy_u8Duty_Cycle*255ul)/100ul);
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	88 2f       	mov	r24, r24
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	a0 e0       	ldi	r26, 0x00	; 0
    24a6:	b0 e0       	ldi	r27, 0x00	; 0
    24a8:	2f ef       	ldi	r18, 0xFF	; 255
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e0       	ldi	r20, 0x00	; 0
    24ae:	50 e0       	ldi	r21, 0x00	; 0
    24b0:	bc 01       	movw	r22, r24
    24b2:	cd 01       	movw	r24, r26
    24b4:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	24 e6       	ldi	r18, 0x64	; 100
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e0       	ldi	r20, 0x00	; 0
    24c2:	50 e0       	ldi	r21, 0x00	; 0
    24c4:	bc 01       	movw	r22, r24
    24c6:	cd 01       	movw	r24, r26
    24c8:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodsi4>
    24cc:	da 01       	movw	r26, r20
    24ce:	c9 01       	movw	r24, r18
    24d0:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_u8Timer)
    24d2:	8a 81       	ldd	r24, Y+2	; 0x02
    24d4:	28 2f       	mov	r18, r24
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	3d 83       	std	Y+5, r19	; 0x05
    24da:	2c 83       	std	Y+4, r18	; 0x04
    24dc:	8c 81       	ldd	r24, Y+4	; 0x04
    24de:	9d 81       	ldd	r25, Y+5	; 0x05
    24e0:	81 30       	cpi	r24, 0x01	; 1
    24e2:	91 05       	cpc	r25, r1
    24e4:	71 f0       	breq	.+28     	; 0x2502 <Timer_VidPwm_Duty_Cycle+0x76>
    24e6:	2c 81       	ldd	r18, Y+4	; 0x04
    24e8:	3d 81       	ldd	r19, Y+5	; 0x05
    24ea:	22 30       	cpi	r18, 0x02	; 2
    24ec:	31 05       	cpc	r19, r1
    24ee:	91 f0       	breq	.+36     	; 0x2514 <Timer_VidPwm_Duty_Cycle+0x88>
    24f0:	8c 81       	ldd	r24, Y+4	; 0x04
    24f2:	9d 81       	ldd	r25, Y+5	; 0x05
    24f4:	00 97       	sbiw	r24, 0x00	; 0
    24f6:	91 f4       	brne	.+36     	; 0x251c <Timer_VidPwm_Duty_Cycle+0x90>
		{
			case(Timer_0):OCR0=Local_u8Variable;break;
    24f8:	ec e5       	ldi	r30, 0x5C	; 92
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	80 83       	st	Z, r24
    2500:	0d c0       	rjmp	.+26     	; 0x251c <Timer_VidPwm_Duty_Cycle+0x90>
			case(Timer_1):OCR1AL=Local_u8Variable;OCR1BL=Local_u8Variable;break;
    2502:	ea e4       	ldi	r30, 0x4A	; 74
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	80 83       	st	Z, r24
    250a:	e8 e4       	ldi	r30, 0x48	; 72
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	80 83       	st	Z, r24
    2512:	04 c0       	rjmp	.+8      	; 0x251c <Timer_VidPwm_Duty_Cycle+0x90>
			case(Timer_2):OCR2=Local_u8Variable;break;
    2514:	e3 e4       	ldi	r30, 0x43	; 67
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	80 83       	st	Z, r24
		}
	}
    251c:	0f 90       	pop	r0
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	08 95       	ret

0000252c <Timer_0_VidOverflow_Inturrept>:
/****************************************************************/

/*------------------ Over_flow_ISR --------------------*/
static void (*Timer_0_Overflow_Inturrept_Function)(void)=NULL;
void Timer_0_VidOverflow_Inturrept(void(*Copy_VidInturrept)(void))
{
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	00 d0       	rcall	.+0      	; 0x2532 <Timer_0_VidOverflow_Inturrept+0x6>
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
    2536:	9a 83       	std	Y+2, r25	; 0x02
    2538:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_VidInturrept!=NULL)
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	9a 81       	ldd	r25, Y+2	; 0x02
    253e:	00 97       	sbiw	r24, 0x00	; 0
    2540:	31 f0       	breq	.+12     	; 0x254e <Timer_0_VidOverflow_Inturrept+0x22>
	{
		Timer_0_Overflow_Inturrept_Function = Copy_VidInturrept;
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	9a 81       	ldd	r25, Y+2	; 0x02
    2546:	90 93 b9 02 	sts	0x02B9, r25
    254a:	80 93 b8 02 	sts	0x02B8, r24
	}
}
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <__vector_11>:
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    2558:	1f 92       	push	r1
    255a:	0f 92       	push	r0
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	0f 92       	push	r0
    2560:	11 24       	eor	r1, r1
    2562:	2f 93       	push	r18
    2564:	3f 93       	push	r19
    2566:	4f 93       	push	r20
    2568:	5f 93       	push	r21
    256a:	6f 93       	push	r22
    256c:	7f 93       	push	r23
    256e:	8f 93       	push	r24
    2570:	9f 93       	push	r25
    2572:	af 93       	push	r26
    2574:	bf 93       	push	r27
    2576:	ef 93       	push	r30
    2578:	ff 93       	push	r31
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
	if(Timer_0_Overflow_Inturrept_Function!=NULL)
    2582:	80 91 b8 02 	lds	r24, 0x02B8
    2586:	90 91 b9 02 	lds	r25, 0x02B9
    258a:	00 97       	sbiw	r24, 0x00	; 0
    258c:	29 f0       	breq	.+10     	; 0x2598 <__vector_11+0x40>
	{
		Timer_0_Overflow_Inturrept_Function();
    258e:	e0 91 b8 02 	lds	r30, 0x02B8
    2592:	f0 91 b9 02 	lds	r31, 0x02B9
    2596:	09 95       	icall
	}
}
    2598:	cf 91       	pop	r28
    259a:	df 91       	pop	r29
    259c:	ff 91       	pop	r31
    259e:	ef 91       	pop	r30
    25a0:	bf 91       	pop	r27
    25a2:	af 91       	pop	r26
    25a4:	9f 91       	pop	r25
    25a6:	8f 91       	pop	r24
    25a8:	7f 91       	pop	r23
    25aa:	6f 91       	pop	r22
    25ac:	5f 91       	pop	r21
    25ae:	4f 91       	pop	r20
    25b0:	3f 91       	pop	r19
    25b2:	2f 91       	pop	r18
    25b4:	0f 90       	pop	r0
    25b6:	0f be       	out	0x3f, r0	; 63
    25b8:	0f 90       	pop	r0
    25ba:	1f 90       	pop	r1
    25bc:	18 95       	reti

000025be <Timer_0_VidCompare_Match_Inturrept>:
/*-------------------- Compare_Match_ISR ------------------*/
static void (*Timer_0_Compare_Match_Inturrept_Function)(void)=NULL;
void Timer_0_VidCompare_Match_Inturrept(void(*Copy_VidInturrept)(void))
{
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	00 d0       	rcall	.+0      	; 0x25c4 <Timer_0_VidCompare_Match_Inturrept+0x6>
    25c4:	cd b7       	in	r28, 0x3d	; 61
    25c6:	de b7       	in	r29, 0x3e	; 62
    25c8:	9a 83       	std	Y+2, r25	; 0x02
    25ca:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_VidInturrept!=NULL)
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	9a 81       	ldd	r25, Y+2	; 0x02
    25d0:	00 97       	sbiw	r24, 0x00	; 0
    25d2:	31 f0       	breq	.+12     	; 0x25e0 <Timer_0_VidCompare_Match_Inturrept+0x22>
	{
		Timer_0_Compare_Match_Inturrept_Function = Copy_VidInturrept;
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	9a 81       	ldd	r25, Y+2	; 0x02
    25d8:	90 93 bb 02 	sts	0x02BB, r25
    25dc:	80 93 ba 02 	sts	0x02BA, r24
	}
}
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	08 95       	ret

000025ea <__vector_10>:
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    25ea:	1f 92       	push	r1
    25ec:	0f 92       	push	r0
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	0f 92       	push	r0
    25f2:	11 24       	eor	r1, r1
    25f4:	2f 93       	push	r18
    25f6:	3f 93       	push	r19
    25f8:	4f 93       	push	r20
    25fa:	5f 93       	push	r21
    25fc:	6f 93       	push	r22
    25fe:	7f 93       	push	r23
    2600:	8f 93       	push	r24
    2602:	9f 93       	push	r25
    2604:	af 93       	push	r26
    2606:	bf 93       	push	r27
    2608:	ef 93       	push	r30
    260a:	ff 93       	push	r31
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
	if(Timer_0_Compare_Match_Inturrept_Function!=NULL)
    2614:	80 91 ba 02 	lds	r24, 0x02BA
    2618:	90 91 bb 02 	lds	r25, 0x02BB
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	29 f0       	breq	.+10     	; 0x262a <__vector_10+0x40>
	{
		Timer_0_Compare_Match_Inturrept_Function();
    2620:	e0 91 ba 02 	lds	r30, 0x02BA
    2624:	f0 91 bb 02 	lds	r31, 0x02BB
    2628:	09 95       	icall
	}
}
    262a:	cf 91       	pop	r28
    262c:	df 91       	pop	r29
    262e:	ff 91       	pop	r31
    2630:	ef 91       	pop	r30
    2632:	bf 91       	pop	r27
    2634:	af 91       	pop	r26
    2636:	9f 91       	pop	r25
    2638:	8f 91       	pop	r24
    263a:	7f 91       	pop	r23
    263c:	6f 91       	pop	r22
    263e:	5f 91       	pop	r21
    2640:	4f 91       	pop	r20
    2642:	3f 91       	pop	r19
    2644:	2f 91       	pop	r18
    2646:	0f 90       	pop	r0
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	0f 90       	pop	r0
    264c:	1f 90       	pop	r1
    264e:	18 95       	reti

00002650 <TWI_VidInitialization>:
#include "TWI_Private.h"


/*------------------------- GIE Enable -------------------------*/
void TWI_VidInitialization(u8 Copy_u8Master_Slave,u8 Copy_u8Adress)
{
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	00 d0       	rcall	.+0      	; 0x2656 <TWI_VidInitialization+0x6>
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	6a 83       	std	Y+2, r22	; 0x02
	if( Copy_u8Master_Slave == Slave)	/*SCL frequency*/
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	88 23       	and	r24, r24
    2662:	91 f4       	brne	.+36     	; 0x2688 <TWI_VidInitialization+0x38>
	{
		TWBR= TWBR_Value;
    2664:	e0 e2       	ldi	r30, 0x20	; 32
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	82 e0       	ldi	r24, 0x02	; 2
    266a:	80 83       	st	Z, r24
		Clear_Bit(TWSR,TWSR_TWPS1);
    266c:	a1 e2       	ldi	r26, 0x21	; 33
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	e1 e2       	ldi	r30, 0x21	; 33
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	8d 7f       	andi	r24, 0xFD	; 253
    2678:	8c 93       	st	X, r24
		Clear_Bit(TWSR,TWSR_TWPS0);
    267a:	a1 e2       	ldi	r26, 0x21	; 33
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	e1 e2       	ldi	r30, 0x21	; 33
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	8e 7f       	andi	r24, 0xFE	; 254
    2686:	8c 93       	st	X, r24
	}
	if(Copy_u8Adress>0)		/* Adress Set + BroadCast */
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	88 23       	and	r24, r24
    268c:	29 f0       	breq	.+10     	; 0x2698 <TWI_VidInitialization+0x48>
	{
		TWAR=(Copy_u8Adress<<1);
    268e:	e2 e2       	ldi	r30, 0x22	; 34
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	8a 81       	ldd	r24, Y+2	; 0x02
    2694:	88 0f       	add	r24, r24
    2696:	80 83       	st	Z, r24
	}
	Set_Bit(TWCR,TWCR_TWEN);		/*Enable TWI*/
    2698:	a6 e5       	ldi	r26, 0x56	; 86
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	e6 e5       	ldi	r30, 0x56	; 86
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	80 81       	ld	r24, Z
    26a2:	84 60       	ori	r24, 0x04	; 4
    26a4:	8c 93       	st	X, r24
}
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	cf 91       	pop	r28
    26ac:	df 91       	pop	r29
    26ae:	08 95       	ret

000026b0 <TWI_VidStart>:

void TWI_VidStart(u8 Copy_u8Adress,u8 Copy_u8Read_Write)
{
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	00 d0       	rcall	.+0      	; 0x26b6 <TWI_VidStart+0x6>
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	89 83       	std	Y+1, r24	; 0x01
    26bc:	6a 83       	std	Y+2, r22	; 0x02
	/*Set Start Condition*/
	Set_Bit(TWCR,TWCR_TWSTA);
    26be:	a6 e5       	ldi	r26, 0x56	; 86
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	e6 e5       	ldi	r30, 0x56	; 86
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	80 62       	ori	r24, 0x20	; 32
    26ca:	8c 93       	st	X, r24

	/*Clear Flag*/
	Set_Bit(TWCR,TWCR_TWINT);
    26cc:	a6 e5       	ldi	r26, 0x56	; 86
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	e6 e5       	ldi	r30, 0x56	; 86
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	80 68       	ori	r24, 0x80	; 128
    26d8:	8c 93       	st	X, r24

	/*Wait Untill Flag*/
	while(!Get_Bit(TWCR,TWCR_TWINT));
    26da:	e6 e5       	ldi	r30, 0x56	; 86
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	88 23       	and	r24, r24
    26e2:	dc f7       	brge	.-10     	; 0x26da <TWI_VidStart+0x2a>
	{

	}*/

	/*Select Adress And Operation*/
	TWDR=((Copy_u8Adress<<1)|Copy_u8Read_Write);
    26e4:	e3 e2       	ldi	r30, 0x23	; 35
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	88 2f       	mov	r24, r24
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	88 0f       	add	r24, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	98 2f       	mov	r25, r24
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	89 2b       	or	r24, r25
    26f8:	80 83       	st	Z, r24

	/*Clear*/
	Clear_Bit(TWCR,TWCR_TWSTA);
    26fa:	a6 e5       	ldi	r26, 0x56	; 86
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	e6 e5       	ldi	r30, 0x56	; 86
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	8f 7d       	andi	r24, 0xDF	; 223
    2706:	8c 93       	st	X, r24

	/*Clear Flag (Start Job)*/
	Set_Bit(TWCR,TWCR_TWINT);
    2708:	a6 e5       	ldi	r26, 0x56	; 86
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	e6 e5       	ldi	r30, 0x56	; 86
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	80 68       	ori	r24, 0x80	; 128
    2714:	8c 93       	st	X, r24

	/*Wait Untill Flag*/
	while(!Get_Bit(TWCR,TWCR_TWINT));
    2716:	e6 e5       	ldi	r30, 0x56	; 86
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	80 81       	ld	r24, Z
    271c:	88 23       	and	r24, r24
    271e:	dc f7       	brge	.-10     	; 0x2716 <TWI_VidStart+0x66>
	/*Check*/
	/*if(!=REP_START_ACK)
	{

	}*/
}
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	08 95       	ret

0000272a <TWI_VidSend_Data>:

void TWI_VidSend_Data(u8 Copy_u8Data)
{
    272a:	df 93       	push	r29
    272c:	cf 93       	push	r28
    272e:	0f 92       	push	r0
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
    2734:	89 83       	std	Y+1, r24	; 0x01
	/*Write Data*/
	TWDR = Copy_u8Data;
    2736:	e3 e2       	ldi	r30, 0x23	; 35
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	80 83       	st	Z, r24

	/*Clear Flag (Start Job)*/
	Set_Bit(TWCR,TWCR_TWINT);
    273e:	a6 e5       	ldi	r26, 0x56	; 86
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	e6 e5       	ldi	r30, 0x56	; 86
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	80 68       	ori	r24, 0x80	; 128
    274a:	8c 93       	st	X, r24

	/*Wait Untill Flag*/
	while(!Get_Bit(TWCR,TWCR_TWINT));
    274c:	e6 e5       	ldi	r30, 0x56	; 86
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	88 23       	and	r24, r24
    2754:	dc f7       	brge	.-10     	; 0x274c <TWI_VidSend_Data+0x22>
	/*Check*/
	/*if(!=SLAVE_W_ACK)
	{

	}*/
}
    2756:	0f 90       	pop	r0
    2758:	cf 91       	pop	r28
    275a:	df 91       	pop	r29
    275c:	08 95       	ret

0000275e <TWI_VidRead_Data>:

void TWI_VidRead_Data(u8 *Copy_u8Data)
{
    275e:	df 93       	push	r29
    2760:	cf 93       	push	r28
    2762:	00 d0       	rcall	.+0      	; 0x2764 <TWI_VidRead_Data+0x6>
    2764:	cd b7       	in	r28, 0x3d	; 61
    2766:	de b7       	in	r29, 0x3e	; 62
    2768:	9a 83       	std	Y+2, r25	; 0x02
    276a:	89 83       	std	Y+1, r24	; 0x01
	/*Clear Flag (Start Job)*/
	Set_Bit(TWCR,TWCR_TWINT);
    276c:	a6 e5       	ldi	r26, 0x56	; 86
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	e6 e5       	ldi	r30, 0x56	; 86
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	80 68       	ori	r24, 0x80	; 128
    2778:	8c 93       	st	X, r24

	/*Wait Untill Flag*/
	while(!Get_Bit(TWCR,TWCR_TWINT));
    277a:	e6 e5       	ldi	r30, 0x56	; 86
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	88 23       	and	r24, r24
    2782:	dc f7       	brge	.-10     	; 0x277a <TWI_VidRead_Data+0x1c>

	/*Read Data*/
	*Copy_u8Data=TWDR;
    2784:	e3 e2       	ldi	r30, 0x23	; 35
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	e9 81       	ldd	r30, Y+1	; 0x01
    278c:	fa 81       	ldd	r31, Y+2	; 0x02
    278e:	80 83       	st	Z, r24
	/*Check*/
	/*if(!=SLAVE_R_ACK)
	{

	}*/
}
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <TWI_VidStop>:

void TWI_VidStop(void)
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
	/*Stop Indicate*/
	Set_Bit(TWCR,TWCR_TWSTO);
    27a2:	a6 e5       	ldi	r26, 0x56	; 86
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e6 e5       	ldi	r30, 0x56	; 86
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	80 61       	ori	r24, 0x10	; 16
    27ae:	8c 93       	st	X, r24

	/*Clear Flag (Start Job)*/
	Set_Bit(TWCR,TWCR_TWINT);
    27b0:	a6 e5       	ldi	r26, 0x56	; 86
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	e6 e5       	ldi	r30, 0x56	; 86
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	80 68       	ori	r24, 0x80	; 128
    27bc:	8c 93       	st	X, r24

}
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	08 95       	ret

000027c4 <SPI_VidInitialization>:
#include  "SPI_Interface.h"

/*------------------------- OPTIONS FOR SPI -------------------------*/

void SPI_VidInitialization (u8 Copy_u8Master_Slave)
{
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <SPI_VidInitialization+0x6>
    27ca:	0f 92       	push	r0
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
    27d0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Master_Slave)	/* Master/Slave Select (0-Slave)(1-Master) */
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	28 2f       	mov	r18, r24
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	3b 83       	std	Y+3, r19	; 0x03
    27da:	2a 83       	std	Y+2, r18	; 0x02
    27dc:	8a 81       	ldd	r24, Y+2	; 0x02
    27de:	9b 81       	ldd	r25, Y+3	; 0x03
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	31 f0       	breq	.+12     	; 0x27f0 <SPI_VidInitialization+0x2c>
    27e4:	2a 81       	ldd	r18, Y+2	; 0x02
    27e6:	3b 81       	ldd	r19, Y+3	; 0x03
    27e8:	21 30       	cpi	r18, 0x01	; 1
    27ea:	31 05       	cpc	r19, r1
    27ec:	49 f0       	breq	.+18     	; 0x2800 <SPI_VidInitialization+0x3c>
    27ee:	10 c0       	rjmp	.+32     	; 0x2810 <SPI_VidInitialization+0x4c>
	{
		case(Master):Set_Bit(SPCR,SPCR_MSTR);break;
    27f0:	ad e2       	ldi	r26, 0x2D	; 45
    27f2:	b0 e0       	ldi	r27, 0x00	; 0
    27f4:	ed e2       	ldi	r30, 0x2D	; 45
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	80 81       	ld	r24, Z
    27fa:	80 61       	ori	r24, 0x10	; 16
    27fc:	8c 93       	st	X, r24
    27fe:	0f c0       	rjmp	.+30     	; 0x281e <SPI_VidInitialization+0x5a>
		case(Slave):Clear_Bit(SPCR,SPCR_MSTR);break;
    2800:	ad e2       	ldi	r26, 0x2D	; 45
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	ed e2       	ldi	r30, 0x2D	; 45
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	8f 7e       	andi	r24, 0xEF	; 239
    280c:	8c 93       	st	X, r24
    280e:	07 c0       	rjmp	.+14     	; 0x281e <SPI_VidInitialization+0x5a>
		default:Clear_Bit(SPCR,SPCR_MSTR);break;
    2810:	ad e2       	ldi	r26, 0x2D	; 45
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	ed e2       	ldi	r30, 0x2D	; 45
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	8f 7e       	andi	r24, 0xEF	; 239
    281c:	8c 93       	st	X, r24
	}

	#if SPI_Interrupt == Disable		/* SPI Interrupt Enable */
		Clear_Bit(SPCR,SPCR_SPIE);
    281e:	ad e2       	ldi	r26, 0x2D	; 45
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	ed e2       	ldi	r30, 0x2D	; 45
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	8f 77       	andi	r24, 0x7F	; 127
    282a:	8c 93       	st	X, r24
	#else
				#warning (" Wrong Configuration !!")
	#endif

	#if Data_Order == Left		/* Data Order (0-Lift)(1-Right) */
		Clear_Bit(SPCR,SPCR_DORD);
    282c:	ad e2       	ldi	r26, 0x2D	; 45
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	ed e2       	ldi	r30, 0x2D	; 45
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	8f 7d       	andi	r24, 0xDF	; 223
    2838:	8c 93       	st	X, r24
	#else
				#warning (" Wrong Configuration !!")
	#endif

	#if Clock_Polarity == Rising		/* Clock Polarity (0-Rising)(1-Falling) */
		Clear_Bit(SPCR,SPCR_CPOL);
    283a:	ad e2       	ldi	r26, 0x2D	; 45
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	ed e2       	ldi	r30, 0x2D	; 45
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	87 7f       	andi	r24, 0xF7	; 247
    2846:	8c 93       	st	X, r24
	#else
				#warning (" Wrong Configuration !!")
	#endif

	#if Clock_Phase == Setup		/* Clock Polarity (0-Rising)(1-Falling) */
		Clear_Bit(SPCR,SPCR_CPOL);
    2848:	ad e2       	ldi	r26, 0x2D	; 45
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	ed e2       	ldi	r30, 0x2D	; 45
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	87 7f       	andi	r24, 0xF7	; 247
    2854:	8c 93       	st	X, r24
		Set_Bit(SPCR,SPCR_CPOL);
	#else
				#warning (" Wrong Configuration !!")
	#endif

	Set_Bit(SPSR,SPSR_SPI2X); /* Double SPI Speed Bit */
    2856:	ae e2       	ldi	r26, 0x2E	; 46
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	ee e2       	ldi	r30, 0x2E	; 46
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z
    2860:	81 60       	ori	r24, 0x01	; 1
    2862:	8c 93       	st	X, r24

	#if Clock_Rate == by_2	/* Clock Rate Select */
		Set_Bit(SPCR,SPCR_SPR0);
		Clear_Bit(SPCR,SPCR_SPR1);
	#elif	Clock_Rate == by_8
		Clear_Bit(SPCR,SPCR_SPR0);
    2864:	ad e2       	ldi	r26, 0x2D	; 45
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	ed e2       	ldi	r30, 0x2D	; 45
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	8e 7f       	andi	r24, 0xFE	; 254
    2870:	8c 93       	st	X, r24
		Clear_Bit(SPCR,SPCR_SPR1);
    2872:	ad e2       	ldi	r26, 0x2D	; 45
    2874:	b0 e0       	ldi	r27, 0x00	; 0
    2876:	ed e2       	ldi	r30, 0x2D	; 45
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	80 81       	ld	r24, Z
    287c:	8d 7f       	andi	r24, 0xFD	; 253
    287e:	8c 93       	st	X, r24
		Set_Bit(SPCR,SPCR_SPR1);
	#else
			#warning (" Wrong Configuration !!")
	#endif

	Set_Bit(SPCR,SPCR_SPE);	   /* SPI Enable */
    2880:	ad e2       	ldi	r26, 0x2D	; 45
    2882:	b0 e0       	ldi	r27, 0x00	; 0
    2884:	ed e2       	ldi	r30, 0x2D	; 45
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	80 81       	ld	r24, Z
    288a:	80 64       	ori	r24, 0x40	; 64
    288c:	8c 93       	st	X, r24
}
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	cf 91       	pop	r28
    2896:	df 91       	pop	r29
    2898:	08 95       	ret

0000289a <SPI_VidSend_Receive>:

void SPI_VidSend_Receive(u8 Copy_u8Data,u8 *Copy_u8Reading)
{
    289a:	df 93       	push	r29
    289c:	cf 93       	push	r28
    289e:	00 d0       	rcall	.+0      	; 0x28a0 <SPI_VidSend_Receive+0x6>
    28a0:	0f 92       	push	r0
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
    28a6:	89 83       	std	Y+1, r24	; 0x01
    28a8:	7b 83       	std	Y+3, r23	; 0x03
    28aa:	6a 83       	std	Y+2, r22	; 0x02
	SPDR=Copy_u8Data;
    28ac:	ef e2       	ldi	r30, 0x2F	; 47
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	80 83       	st	Z, r24
	#if SPI_Interrupt == Disable		/* SPI Interrupt Enable */
		while(!Get_Bit(SPSR,SPSR_SPIF));
    28b4:	ee e2       	ldi	r30, 0x2E	; 46
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	80 81       	ld	r24, Z
    28ba:	88 23       	and	r24, r24
    28bc:	dc f7       	brge	.-10     	; 0x28b4 <SPI_VidSend_Receive+0x1a>
	#elif SPI_Interrupt == Enable
	#else
			#warning (" Wrong Configuration !!")
	#endif
	*Copy_u8Reading = SPDR;
    28be:	ef e2       	ldi	r30, 0x2F	; 47
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	ea 81       	ldd	r30, Y+2	; 0x02
    28c6:	fb 81       	ldd	r31, Y+3	; 0x03
    28c8:	80 83       	st	Z, r24
}
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	cf 91       	pop	r28
    28d2:	df 91       	pop	r29
    28d4:	08 95       	ret

000028d6 <SPI_VidInturrept>:

/*------------------------- ISR -------------------------*/

static void (*SPI_Inturrept_Function)(void)=NULL;
void SPI_VidInturrept(void(*Copy_VidInturrept)(void))
{
    28d6:	df 93       	push	r29
    28d8:	cf 93       	push	r28
    28da:	00 d0       	rcall	.+0      	; 0x28dc <SPI_VidInturrept+0x6>
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
    28e0:	9a 83       	std	Y+2, r25	; 0x02
    28e2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_VidInturrept!=NULL)
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02
    28e8:	00 97       	sbiw	r24, 0x00	; 0
    28ea:	31 f0       	breq	.+12     	; 0x28f8 <SPI_VidInturrept+0x22>
	{
		SPI_Inturrept_Function = Copy_VidInturrept;
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	9a 81       	ldd	r25, Y+2	; 0x02
    28f0:	90 93 bd 02 	sts	0x02BD, r25
    28f4:	80 93 bc 02 	sts	0x02BC, r24
	}
}
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	cf 91       	pop	r28
    28fe:	df 91       	pop	r29
    2900:	08 95       	ret

00002902 <__vector_12>:
void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
    2902:	1f 92       	push	r1
    2904:	0f 92       	push	r0
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	0f 92       	push	r0
    290a:	11 24       	eor	r1, r1
    290c:	2f 93       	push	r18
    290e:	3f 93       	push	r19
    2910:	4f 93       	push	r20
    2912:	5f 93       	push	r21
    2914:	6f 93       	push	r22
    2916:	7f 93       	push	r23
    2918:	8f 93       	push	r24
    291a:	9f 93       	push	r25
    291c:	af 93       	push	r26
    291e:	bf 93       	push	r27
    2920:	ef 93       	push	r30
    2922:	ff 93       	push	r31
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
	if(SPI_Inturrept_Function!=NULL)
    292c:	80 91 bc 02 	lds	r24, 0x02BC
    2930:	90 91 bd 02 	lds	r25, 0x02BD
    2934:	00 97       	sbiw	r24, 0x00	; 0
    2936:	29 f0       	breq	.+10     	; 0x2942 <__vector_12+0x40>
	{
		SPI_Inturrept_Function();
    2938:	e0 91 bc 02 	lds	r30, 0x02BC
    293c:	f0 91 bd 02 	lds	r31, 0x02BD
    2940:	09 95       	icall
	}
}
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	ff 91       	pop	r31
    2948:	ef 91       	pop	r30
    294a:	bf 91       	pop	r27
    294c:	af 91       	pop	r26
    294e:	9f 91       	pop	r25
    2950:	8f 91       	pop	r24
    2952:	7f 91       	pop	r23
    2954:	6f 91       	pop	r22
    2956:	5f 91       	pop	r21
    2958:	4f 91       	pop	r20
    295a:	3f 91       	pop	r19
    295c:	2f 91       	pop	r18
    295e:	0f 90       	pop	r0
    2960:	0f be       	out	0x3f, r0	; 63
    2962:	0f 90       	pop	r0
    2964:	1f 90       	pop	r1
    2966:	18 95       	reti

00002968 <GIE_VidEnable>:
#include "GIE_interface.h"


/*------------------------- GIE Enable -------------------------*/
void GIE_VidEnable ()
{
    2968:	df 93       	push	r29
    296a:	cf 93       	push	r28
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,SREG_I_Bit);
    2970:	af e5       	ldi	r26, 0x5F	; 95
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	ef e5       	ldi	r30, 0x5F	; 95
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	80 68       	ori	r24, 0x80	; 128
    297c:	8c 93       	st	X, r24
}
    297e:	cf 91       	pop	r28
    2980:	df 91       	pop	r29
    2982:	08 95       	ret

00002984 <GIE_VidDisable>:


/*------------------------- GIE Disable -------------------------*/
void GIE_VidDisable (void)
{
    2984:	df 93       	push	r29
    2986:	cf 93       	push	r28
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(SREG,SREG_I_Bit);
    298c:	af e5       	ldi	r26, 0x5F	; 95
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	ef e5       	ldi	r30, 0x5F	; 95
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	80 81       	ld	r24, Z
    2996:	8f 77       	andi	r24, 0x7F	; 127
    2998:	8c 93       	st	X, r24
}
    299a:	cf 91       	pop	r28
    299c:	df 91       	pop	r29
    299e:	08 95       	ret

000029a0 <External_Interrupt_0_VidInitialization>:



/*EXTI Enable */
void External_Interrupt_0_VidInitialization ()
{
    29a0:	df 93       	push	r29
    29a2:	cf 93       	push	r28
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
		Clear_Bit(MCUCR , MCUCR_ISC01);
	#elif External_Interrupt_0_Sense == On_Change
		Set_Bit(MCUCR , MCUCR_ISC00);
		Clear_Bit(MCUCR , MCUCR_ISC01);
	#elif External_Interrupt_0_Sense == Falling_Edge
		Clear_Bit(MCUCR , MCUCR_ISC00);
    29a8:	a5 e5       	ldi	r26, 0x55	; 85
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	e5 e5       	ldi	r30, 0x55	; 85
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	8e 7f       	andi	r24, 0xFE	; 254
    29b4:	8c 93       	st	X, r24
		Set_Bit(MCUCR , MCUCR_ISC01);
    29b6:	a5 e5       	ldi	r26, 0x55	; 85
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	e5 e5       	ldi	r30, 0x55	; 85
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	82 60       	ori	r24, 0x02	; 2
    29c2:	8c 93       	st	X, r24
		Set_Bit(MCUCR , MCUCR_ISC01);
	#else
		#warning (" Wrong Configuration !!")
	#endif
	#if External_Interrupt_0_Enable == Enable		  /* Initial State */
		Set_Bit(GICR,GICR_Interrupt_0);
    29c4:	ab e5       	ldi	r26, 0x5B	; 91
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	eb e5       	ldi	r30, 0x5B	; 91
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 81       	ld	r24, Z
    29ce:	80 64       	ori	r24, 0x40	; 64
    29d0:	8c 93       	st	X, r24
	#elif External_Interrupt_0_Enable == Enable
		Set_Bit(GICR,GICR_Interrupt_0);
	#else
		#warning (" Wrong Configuration !!")
	#endif
}
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	08 95       	ret

000029d8 <External_Interrupt_1_VidInitialization>:


void External_Interrupt_1_VidInitialization ()
{
    29d8:	df 93       	push	r29
    29da:	cf 93       	push	r28
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
		Clear_Bit(MCUCR , MCUCR_ISC11);
	#elif External_Interrupt_1_Sense == On_Change
		Set_Bit(MCUCR , MCUCR_ISC10);
		Clear_Bit(MCUCR , MCUCR_ISC11);
	#elif External_Interrupt_1_Sense == Falling_Edge
		Clear_Bit(MCUCR , MCUCR_ISC10);
    29e0:	a5 e5       	ldi	r26, 0x55	; 85
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	e5 e5       	ldi	r30, 0x55	; 85
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
    29ea:	8b 7f       	andi	r24, 0xFB	; 251
    29ec:	8c 93       	st	X, r24
		Set_Bit(MCUCR , MCUCR_ISC11);
    29ee:	a5 e5       	ldi	r26, 0x55	; 85
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	e5 e5       	ldi	r30, 0x55	; 85
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	88 60       	ori	r24, 0x08	; 8
    29fa:	8c 93       	st	X, r24
	#else
		#warning (" Wrong Configuration !! ")
	#endif
	/* Initial State */
	#if External_Interrupt_1_Enable == Enable
		Set_Bit(GICR,GICR_Interrupt_1);
    29fc:	ab e5       	ldi	r26, 0x5B	; 91
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	eb e5       	ldi	r30, 0x5B	; 91
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	80 68       	ori	r24, 0x80	; 128
    2a08:	8c 93       	st	X, r24
	#elif External_Interrupt_1_Enable == Enable
		Set_Bit(GICR,GICR_Interrupt_1);
	#else
		#warning (" Wrong Configuration !! ")
	#endif
}
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	08 95       	ret

00002a10 <External_Interrupt_2_VidInitialization>:

void External_Interrupt_2_VidInitialization ()
{
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
	#if External_Interrupt_2_Sense == Falling_Edge
		Clear_Bit(MCUCSR, MCUCSR_ISC2);
    2a18:	a4 e5       	ldi	r26, 0x54	; 84
    2a1a:	b0 e0       	ldi	r27, 0x00	; 0
    2a1c:	e4 e5       	ldi	r30, 0x54	; 84
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	8f 7b       	andi	r24, 0xBF	; 191
    2a24:	8c 93       	st	X, r24
	#endif
	/* Initial State */
	#if External_Interrupt_2_Enable   == ENABLE
		SET_BIT(GICR ,GICR_Interrupt_2);
	#elif EXTI_INT2_INITIAL_STATE == DISABLE
		Clear_Bit(GICR , GICR_Interrupt_2);
    2a26:	ab e5       	ldi	r26, 0x5B	; 91
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	eb e5       	ldi	r30, 0x5B	; 91
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	8f 7d       	andi	r24, 0xDF	; 223
    2a32:	8c 93       	st	X, r24
	#else
		#warning (" Wrong Configuration !!")
	#endif
}
    2a34:	cf 91       	pop	r28
    2a36:	df 91       	pop	r29
    2a38:	08 95       	ret

00002a3a <DIO_VidSet_Pin_Direction>:
#include "DIO_Interface.h"

/*------------------------- OPTIONS FOR SINGLE BIN -------------------------*/

void DIO_VidSet_Pin_Direction(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction)		/*SET PIN Direction*/
{
    2a3a:	df 93       	push	r29
    2a3c:	cf 93       	push	r28
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
    2a42:	27 97       	sbiw	r28, 0x07	; 7
    2a44:	0f b6       	in	r0, 0x3f	; 63
    2a46:	f8 94       	cli
    2a48:	de bf       	out	0x3e, r29	; 62
    2a4a:	0f be       	out	0x3f, r0	; 63
    2a4c:	cd bf       	out	0x3d, r28	; 61
    2a4e:	89 83       	std	Y+1, r24	; 0x01
    2a50:	6a 83       	std	Y+2, r22	; 0x02
    2a52:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction==INPUT)
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	88 23       	and	r24, r24
    2a58:	09 f0       	breq	.+2      	; 0x2a5c <DIO_VidSet_Pin_Direction+0x22>
    2a5a:	74 c0       	rjmp	.+232    	; 0x2b44 <DIO_VidSet_Pin_Direction+0x10a>
	{
		switch(Copy_u8Port)
    2a5c:	89 81       	ldd	r24, Y+1	; 0x01
    2a5e:	28 2f       	mov	r18, r24
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	3f 83       	std	Y+7, r19	; 0x07
    2a64:	2e 83       	std	Y+6, r18	; 0x06
    2a66:	8e 81       	ldd	r24, Y+6	; 0x06
    2a68:	9f 81       	ldd	r25, Y+7	; 0x07
    2a6a:	81 30       	cpi	r24, 0x01	; 1
    2a6c:	91 05       	cpc	r25, r1
    2a6e:	59 f1       	breq	.+86     	; 0x2ac6 <DIO_VidSet_Pin_Direction+0x8c>
    2a70:	2e 81       	ldd	r18, Y+6	; 0x06
    2a72:	3f 81       	ldd	r19, Y+7	; 0x07
    2a74:	22 30       	cpi	r18, 0x02	; 2
    2a76:	31 05       	cpc	r19, r1
    2a78:	2c f4       	brge	.+10     	; 0x2a84 <DIO_VidSet_Pin_Direction+0x4a>
    2a7a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a7c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a7e:	00 97       	sbiw	r24, 0x00	; 0
    2a80:	69 f0       	breq	.+26     	; 0x2a9c <DIO_VidSet_Pin_Direction+0x62>
    2a82:	d2 c0       	rjmp	.+420    	; 0x2c28 <DIO_VidSet_Pin_Direction+0x1ee>
    2a84:	2e 81       	ldd	r18, Y+6	; 0x06
    2a86:	3f 81       	ldd	r19, Y+7	; 0x07
    2a88:	22 30       	cpi	r18, 0x02	; 2
    2a8a:	31 05       	cpc	r19, r1
    2a8c:	89 f1       	breq	.+98     	; 0x2af0 <DIO_VidSet_Pin_Direction+0xb6>
    2a8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a90:	9f 81       	ldd	r25, Y+7	; 0x07
    2a92:	83 30       	cpi	r24, 0x03	; 3
    2a94:	91 05       	cpc	r25, r1
    2a96:	09 f4       	brne	.+2      	; 0x2a9a <DIO_VidSet_Pin_Direction+0x60>
    2a98:	40 c0       	rjmp	.+128    	; 0x2b1a <DIO_VidSet_Pin_Direction+0xe0>
    2a9a:	c6 c0       	rjmp	.+396    	; 0x2c28 <DIO_VidSet_Pin_Direction+0x1ee>
		{
			case(Port_A):Clear_Bit(DDRA,Copy_u8Pin);break;
    2a9c:	aa e3       	ldi	r26, 0x3A	; 58
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	ea e3       	ldi	r30, 0x3A	; 58
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	80 81       	ld	r24, Z
    2aa6:	48 2f       	mov	r20, r24
    2aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aaa:	28 2f       	mov	r18, r24
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	02 2e       	mov	r0, r18
    2ab4:	02 c0       	rjmp	.+4      	; 0x2aba <DIO_VidSet_Pin_Direction+0x80>
    2ab6:	88 0f       	add	r24, r24
    2ab8:	99 1f       	adc	r25, r25
    2aba:	0a 94       	dec	r0
    2abc:	e2 f7       	brpl	.-8      	; 0x2ab6 <DIO_VidSet_Pin_Direction+0x7c>
    2abe:	80 95       	com	r24
    2ac0:	84 23       	and	r24, r20
    2ac2:	8c 93       	st	X, r24
    2ac4:	b1 c0       	rjmp	.+354    	; 0x2c28 <DIO_VidSet_Pin_Direction+0x1ee>
			case(Port_B):Clear_Bit(DDRB,Copy_u8Pin);break;
    2ac6:	a7 e3       	ldi	r26, 0x37	; 55
    2ac8:	b0 e0       	ldi	r27, 0x00	; 0
    2aca:	e7 e3       	ldi	r30, 0x37	; 55
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	80 81       	ld	r24, Z
    2ad0:	48 2f       	mov	r20, r24
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	28 2f       	mov	r18, r24
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	02 2e       	mov	r0, r18
    2ade:	02 c0       	rjmp	.+4      	; 0x2ae4 <DIO_VidSet_Pin_Direction+0xaa>
    2ae0:	88 0f       	add	r24, r24
    2ae2:	99 1f       	adc	r25, r25
    2ae4:	0a 94       	dec	r0
    2ae6:	e2 f7       	brpl	.-8      	; 0x2ae0 <DIO_VidSet_Pin_Direction+0xa6>
    2ae8:	80 95       	com	r24
    2aea:	84 23       	and	r24, r20
    2aec:	8c 93       	st	X, r24
    2aee:	9c c0       	rjmp	.+312    	; 0x2c28 <DIO_VidSet_Pin_Direction+0x1ee>
			case(Port_C):Clear_Bit(DDRC,Copy_u8Pin);break;
    2af0:	a4 e3       	ldi	r26, 0x34	; 52
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	e4 e3       	ldi	r30, 0x34	; 52
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	48 2f       	mov	r20, r24
    2afc:	8a 81       	ldd	r24, Y+2	; 0x02
    2afe:	28 2f       	mov	r18, r24
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	02 2e       	mov	r0, r18
    2b08:	02 c0       	rjmp	.+4      	; 0x2b0e <DIO_VidSet_Pin_Direction+0xd4>
    2b0a:	88 0f       	add	r24, r24
    2b0c:	99 1f       	adc	r25, r25
    2b0e:	0a 94       	dec	r0
    2b10:	e2 f7       	brpl	.-8      	; 0x2b0a <DIO_VidSet_Pin_Direction+0xd0>
    2b12:	80 95       	com	r24
    2b14:	84 23       	and	r24, r20
    2b16:	8c 93       	st	X, r24
    2b18:	87 c0       	rjmp	.+270    	; 0x2c28 <DIO_VidSet_Pin_Direction+0x1ee>
			case(Port_D):Clear_Bit(DDRD,Copy_u8Pin);break;
    2b1a:	a1 e3       	ldi	r26, 0x31	; 49
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	e1 e3       	ldi	r30, 0x31	; 49
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	48 2f       	mov	r20, r24
    2b26:	8a 81       	ldd	r24, Y+2	; 0x02
    2b28:	28 2f       	mov	r18, r24
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	02 2e       	mov	r0, r18
    2b32:	02 c0       	rjmp	.+4      	; 0x2b38 <DIO_VidSet_Pin_Direction+0xfe>
    2b34:	88 0f       	add	r24, r24
    2b36:	99 1f       	adc	r25, r25
    2b38:	0a 94       	dec	r0
    2b3a:	e2 f7       	brpl	.-8      	; 0x2b34 <DIO_VidSet_Pin_Direction+0xfa>
    2b3c:	80 95       	com	r24
    2b3e:	84 23       	and	r24, r20
    2b40:	8c 93       	st	X, r24
    2b42:	72 c0       	rjmp	.+228    	; 0x2c28 <DIO_VidSet_Pin_Direction+0x1ee>
		}
	}
	else if(Copy_u8Direction==OUTPUT)
    2b44:	8b 81       	ldd	r24, Y+3	; 0x03
    2b46:	81 30       	cpi	r24, 0x01	; 1
    2b48:	09 f0       	breq	.+2      	; 0x2b4c <DIO_VidSet_Pin_Direction+0x112>
    2b4a:	6e c0       	rjmp	.+220    	; 0x2c28 <DIO_VidSet_Pin_Direction+0x1ee>
	{
		switch(Copy_u8Port)
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	28 2f       	mov	r18, r24
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	3d 83       	std	Y+5, r19	; 0x05
    2b54:	2c 83       	std	Y+4, r18	; 0x04
    2b56:	8c 81       	ldd	r24, Y+4	; 0x04
    2b58:	9d 81       	ldd	r25, Y+5	; 0x05
    2b5a:	81 30       	cpi	r24, 0x01	; 1
    2b5c:	91 05       	cpc	r25, r1
    2b5e:	49 f1       	breq	.+82     	; 0x2bb2 <DIO_VidSet_Pin_Direction+0x178>
    2b60:	2c 81       	ldd	r18, Y+4	; 0x04
    2b62:	3d 81       	ldd	r19, Y+5	; 0x05
    2b64:	22 30       	cpi	r18, 0x02	; 2
    2b66:	31 05       	cpc	r19, r1
    2b68:	2c f4       	brge	.+10     	; 0x2b74 <DIO_VidSet_Pin_Direction+0x13a>
    2b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b6e:	00 97       	sbiw	r24, 0x00	; 0
    2b70:	61 f0       	breq	.+24     	; 0x2b8a <DIO_VidSet_Pin_Direction+0x150>
    2b72:	5a c0       	rjmp	.+180    	; 0x2c28 <DIO_VidSet_Pin_Direction+0x1ee>
    2b74:	2c 81       	ldd	r18, Y+4	; 0x04
    2b76:	3d 81       	ldd	r19, Y+5	; 0x05
    2b78:	22 30       	cpi	r18, 0x02	; 2
    2b7a:	31 05       	cpc	r19, r1
    2b7c:	71 f1       	breq	.+92     	; 0x2bda <DIO_VidSet_Pin_Direction+0x1a0>
    2b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b80:	9d 81       	ldd	r25, Y+5	; 0x05
    2b82:	83 30       	cpi	r24, 0x03	; 3
    2b84:	91 05       	cpc	r25, r1
    2b86:	e9 f1       	breq	.+122    	; 0x2c02 <DIO_VidSet_Pin_Direction+0x1c8>
    2b88:	4f c0       	rjmp	.+158    	; 0x2c28 <DIO_VidSet_Pin_Direction+0x1ee>
		{
			case(Port_A):Set_Bit(DDRA,Copy_u8Pin);break;
    2b8a:	aa e3       	ldi	r26, 0x3A	; 58
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	ea e3       	ldi	r30, 0x3A	; 58
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	48 2f       	mov	r20, r24
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	28 2f       	mov	r18, r24
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	02 2e       	mov	r0, r18
    2ba2:	02 c0       	rjmp	.+4      	; 0x2ba8 <DIO_VidSet_Pin_Direction+0x16e>
    2ba4:	88 0f       	add	r24, r24
    2ba6:	99 1f       	adc	r25, r25
    2ba8:	0a 94       	dec	r0
    2baa:	e2 f7       	brpl	.-8      	; 0x2ba4 <DIO_VidSet_Pin_Direction+0x16a>
    2bac:	84 2b       	or	r24, r20
    2bae:	8c 93       	st	X, r24
    2bb0:	3b c0       	rjmp	.+118    	; 0x2c28 <DIO_VidSet_Pin_Direction+0x1ee>
			case(Port_B):Set_Bit(DDRB,Copy_u8Pin);break;
    2bb2:	a7 e3       	ldi	r26, 0x37	; 55
    2bb4:	b0 e0       	ldi	r27, 0x00	; 0
    2bb6:	e7 e3       	ldi	r30, 0x37	; 55
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	80 81       	ld	r24, Z
    2bbc:	48 2f       	mov	r20, r24
    2bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc0:	28 2f       	mov	r18, r24
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	02 2e       	mov	r0, r18
    2bca:	02 c0       	rjmp	.+4      	; 0x2bd0 <DIO_VidSet_Pin_Direction+0x196>
    2bcc:	88 0f       	add	r24, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	0a 94       	dec	r0
    2bd2:	e2 f7       	brpl	.-8      	; 0x2bcc <DIO_VidSet_Pin_Direction+0x192>
    2bd4:	84 2b       	or	r24, r20
    2bd6:	8c 93       	st	X, r24
    2bd8:	27 c0       	rjmp	.+78     	; 0x2c28 <DIO_VidSet_Pin_Direction+0x1ee>
			case(Port_C):Set_Bit(DDRC,Copy_u8Pin);break;
    2bda:	a4 e3       	ldi	r26, 0x34	; 52
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	e4 e3       	ldi	r30, 0x34	; 52
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	80 81       	ld	r24, Z
    2be4:	48 2f       	mov	r20, r24
    2be6:	8a 81       	ldd	r24, Y+2	; 0x02
    2be8:	28 2f       	mov	r18, r24
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	02 2e       	mov	r0, r18
    2bf2:	02 c0       	rjmp	.+4      	; 0x2bf8 <DIO_VidSet_Pin_Direction+0x1be>
    2bf4:	88 0f       	add	r24, r24
    2bf6:	99 1f       	adc	r25, r25
    2bf8:	0a 94       	dec	r0
    2bfa:	e2 f7       	brpl	.-8      	; 0x2bf4 <DIO_VidSet_Pin_Direction+0x1ba>
    2bfc:	84 2b       	or	r24, r20
    2bfe:	8c 93       	st	X, r24
    2c00:	13 c0       	rjmp	.+38     	; 0x2c28 <DIO_VidSet_Pin_Direction+0x1ee>
			case(Port_D):Set_Bit(DDRD,Copy_u8Pin);break;
    2c02:	a1 e3       	ldi	r26, 0x31	; 49
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	e1 e3       	ldi	r30, 0x31	; 49
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	48 2f       	mov	r20, r24
    2c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c10:	28 2f       	mov	r18, r24
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	02 2e       	mov	r0, r18
    2c1a:	02 c0       	rjmp	.+4      	; 0x2c20 <DIO_VidSet_Pin_Direction+0x1e6>
    2c1c:	88 0f       	add	r24, r24
    2c1e:	99 1f       	adc	r25, r25
    2c20:	0a 94       	dec	r0
    2c22:	e2 f7       	brpl	.-8      	; 0x2c1c <DIO_VidSet_Pin_Direction+0x1e2>
    2c24:	84 2b       	or	r24, r20
    2c26:	8c 93       	st	X, r24
		}
	}
}
    2c28:	27 96       	adiw	r28, 0x07	; 7
    2c2a:	0f b6       	in	r0, 0x3f	; 63
    2c2c:	f8 94       	cli
    2c2e:	de bf       	out	0x3e, r29	; 62
    2c30:	0f be       	out	0x3f, r0	; 63
    2c32:	cd bf       	out	0x3d, r28	; 61
    2c34:	cf 91       	pop	r28
    2c36:	df 91       	pop	r29
    2c38:	08 95       	ret

00002c3a <DIO_VidInternal_Pin_Bull_Up>:

void DIO_VidInternal_Pin_Bull_Up(u8 Copy_u8Port,u8 Copy_u8Pin)						/*INTERNAL PIN PULL UP*/
{
    2c3a:	df 93       	push	r29
    2c3c:	cf 93       	push	r28
    2c3e:	00 d0       	rcall	.+0      	; 0x2c40 <DIO_VidInternal_Pin_Bull_Up+0x6>
    2c40:	00 d0       	rcall	.+0      	; 0x2c42 <DIO_VidInternal_Pin_Bull_Up+0x8>
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
    2c46:	89 83       	std	Y+1, r24	; 0x01
    2c48:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    2c4a:	89 81       	ldd	r24, Y+1	; 0x01
    2c4c:	28 2f       	mov	r18, r24
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	3c 83       	std	Y+4, r19	; 0x04
    2c52:	2b 83       	std	Y+3, r18	; 0x03
    2c54:	8b 81       	ldd	r24, Y+3	; 0x03
    2c56:	9c 81       	ldd	r25, Y+4	; 0x04
    2c58:	81 30       	cpi	r24, 0x01	; 1
    2c5a:	91 05       	cpc	r25, r1
    2c5c:	49 f1       	breq	.+82     	; 0x2cb0 <DIO_VidInternal_Pin_Bull_Up+0x76>
    2c5e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c60:	3c 81       	ldd	r19, Y+4	; 0x04
    2c62:	22 30       	cpi	r18, 0x02	; 2
    2c64:	31 05       	cpc	r19, r1
    2c66:	2c f4       	brge	.+10     	; 0x2c72 <DIO_VidInternal_Pin_Bull_Up+0x38>
    2c68:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6c:	00 97       	sbiw	r24, 0x00	; 0
    2c6e:	61 f0       	breq	.+24     	; 0x2c88 <DIO_VidInternal_Pin_Bull_Up+0x4e>
    2c70:	5a c0       	rjmp	.+180    	; 0x2d26 <DIO_VidInternal_Pin_Bull_Up+0xec>
    2c72:	2b 81       	ldd	r18, Y+3	; 0x03
    2c74:	3c 81       	ldd	r19, Y+4	; 0x04
    2c76:	22 30       	cpi	r18, 0x02	; 2
    2c78:	31 05       	cpc	r19, r1
    2c7a:	71 f1       	breq	.+92     	; 0x2cd8 <DIO_VidInternal_Pin_Bull_Up+0x9e>
    2c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c80:	83 30       	cpi	r24, 0x03	; 3
    2c82:	91 05       	cpc	r25, r1
    2c84:	e9 f1       	breq	.+122    	; 0x2d00 <DIO_VidInternal_Pin_Bull_Up+0xc6>
    2c86:	4f c0       	rjmp	.+158    	; 0x2d26 <DIO_VidInternal_Pin_Bull_Up+0xec>
			{
				case(Port_A):Set_Bit(PORTA,Copy_u8Pin);break;
    2c88:	ab e3       	ldi	r26, 0x3B	; 59
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	eb e3       	ldi	r30, 0x3B	; 59
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	48 2f       	mov	r20, r24
    2c94:	8a 81       	ldd	r24, Y+2	; 0x02
    2c96:	28 2f       	mov	r18, r24
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	02 2e       	mov	r0, r18
    2ca0:	02 c0       	rjmp	.+4      	; 0x2ca6 <DIO_VidInternal_Pin_Bull_Up+0x6c>
    2ca2:	88 0f       	add	r24, r24
    2ca4:	99 1f       	adc	r25, r25
    2ca6:	0a 94       	dec	r0
    2ca8:	e2 f7       	brpl	.-8      	; 0x2ca2 <DIO_VidInternal_Pin_Bull_Up+0x68>
    2caa:	84 2b       	or	r24, r20
    2cac:	8c 93       	st	X, r24
    2cae:	3b c0       	rjmp	.+118    	; 0x2d26 <DIO_VidInternal_Pin_Bull_Up+0xec>
				case(Port_B):Set_Bit(PORTB,Copy_u8Pin);break;
    2cb0:	a8 e3       	ldi	r26, 0x38	; 56
    2cb2:	b0 e0       	ldi	r27, 0x00	; 0
    2cb4:	e8 e3       	ldi	r30, 0x38	; 56
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	80 81       	ld	r24, Z
    2cba:	48 2f       	mov	r20, r24
    2cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbe:	28 2f       	mov	r18, r24
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	02 2e       	mov	r0, r18
    2cc8:	02 c0       	rjmp	.+4      	; 0x2cce <DIO_VidInternal_Pin_Bull_Up+0x94>
    2cca:	88 0f       	add	r24, r24
    2ccc:	99 1f       	adc	r25, r25
    2cce:	0a 94       	dec	r0
    2cd0:	e2 f7       	brpl	.-8      	; 0x2cca <DIO_VidInternal_Pin_Bull_Up+0x90>
    2cd2:	84 2b       	or	r24, r20
    2cd4:	8c 93       	st	X, r24
    2cd6:	27 c0       	rjmp	.+78     	; 0x2d26 <DIO_VidInternal_Pin_Bull_Up+0xec>
				case(Port_C):Set_Bit(PORTC,Copy_u8Pin);break;
    2cd8:	a5 e3       	ldi	r26, 0x35	; 53
    2cda:	b0 e0       	ldi	r27, 0x00	; 0
    2cdc:	e5 e3       	ldi	r30, 0x35	; 53
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	80 81       	ld	r24, Z
    2ce2:	48 2f       	mov	r20, r24
    2ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce6:	28 2f       	mov	r18, r24
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	02 2e       	mov	r0, r18
    2cf0:	02 c0       	rjmp	.+4      	; 0x2cf6 <DIO_VidInternal_Pin_Bull_Up+0xbc>
    2cf2:	88 0f       	add	r24, r24
    2cf4:	99 1f       	adc	r25, r25
    2cf6:	0a 94       	dec	r0
    2cf8:	e2 f7       	brpl	.-8      	; 0x2cf2 <DIO_VidInternal_Pin_Bull_Up+0xb8>
    2cfa:	84 2b       	or	r24, r20
    2cfc:	8c 93       	st	X, r24
    2cfe:	13 c0       	rjmp	.+38     	; 0x2d26 <DIO_VidInternal_Pin_Bull_Up+0xec>
				case(Port_D):Set_Bit(PORTD,Copy_u8Pin);break;
    2d00:	a2 e3       	ldi	r26, 0x32	; 50
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	e2 e3       	ldi	r30, 0x32	; 50
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	48 2f       	mov	r20, r24
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	28 2f       	mov	r18, r24
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	02 2e       	mov	r0, r18
    2d18:	02 c0       	rjmp	.+4      	; 0x2d1e <DIO_VidInternal_Pin_Bull_Up+0xe4>
    2d1a:	88 0f       	add	r24, r24
    2d1c:	99 1f       	adc	r25, r25
    2d1e:	0a 94       	dec	r0
    2d20:	e2 f7       	brpl	.-8      	; 0x2d1a <DIO_VidInternal_Pin_Bull_Up+0xe0>
    2d22:	84 2b       	or	r24, r20
    2d24:	8c 93       	st	X, r24
			}
}
    2d26:	0f 90       	pop	r0
    2d28:	0f 90       	pop	r0
    2d2a:	0f 90       	pop	r0
    2d2c:	0f 90       	pop	r0
    2d2e:	cf 91       	pop	r28
    2d30:	df 91       	pop	r29
    2d32:	08 95       	ret

00002d34 <DIO_VidSet_Pin_Value>:

void DIO_VidSet_Pin_Value(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)				/*SET PIN Value*/
{
    2d34:	df 93       	push	r29
    2d36:	cf 93       	push	r28
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    2d3c:	27 97       	sbiw	r28, 0x07	; 7
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	f8 94       	cli
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	cd bf       	out	0x3d, r28	; 61
    2d48:	89 83       	std	Y+1, r24	; 0x01
    2d4a:	6a 83       	std	Y+2, r22	; 0x02
    2d4c:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value==HI)
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	81 30       	cpi	r24, 0x01	; 1
    2d52:	09 f0       	breq	.+2      	; 0x2d56 <DIO_VidSet_Pin_Value+0x22>
    2d54:	6f c0       	rjmp	.+222    	; 0x2e34 <DIO_VidSet_Pin_Value+0x100>
	{
		switch(Copy_u8Port)
    2d56:	89 81       	ldd	r24, Y+1	; 0x01
    2d58:	28 2f       	mov	r18, r24
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	3f 83       	std	Y+7, r19	; 0x07
    2d5e:	2e 83       	std	Y+6, r18	; 0x06
    2d60:	8e 81       	ldd	r24, Y+6	; 0x06
    2d62:	9f 81       	ldd	r25, Y+7	; 0x07
    2d64:	81 30       	cpi	r24, 0x01	; 1
    2d66:	91 05       	cpc	r25, r1
    2d68:	49 f1       	breq	.+82     	; 0x2dbc <DIO_VidSet_Pin_Value+0x88>
    2d6a:	2e 81       	ldd	r18, Y+6	; 0x06
    2d6c:	3f 81       	ldd	r19, Y+7	; 0x07
    2d6e:	22 30       	cpi	r18, 0x02	; 2
    2d70:	31 05       	cpc	r19, r1
    2d72:	2c f4       	brge	.+10     	; 0x2d7e <DIO_VidSet_Pin_Value+0x4a>
    2d74:	8e 81       	ldd	r24, Y+6	; 0x06
    2d76:	9f 81       	ldd	r25, Y+7	; 0x07
    2d78:	00 97       	sbiw	r24, 0x00	; 0
    2d7a:	61 f0       	breq	.+24     	; 0x2d94 <DIO_VidSet_Pin_Value+0x60>
    2d7c:	d2 c0       	rjmp	.+420    	; 0x2f22 <DIO_VidSet_Pin_Value+0x1ee>
    2d7e:	2e 81       	ldd	r18, Y+6	; 0x06
    2d80:	3f 81       	ldd	r19, Y+7	; 0x07
    2d82:	22 30       	cpi	r18, 0x02	; 2
    2d84:	31 05       	cpc	r19, r1
    2d86:	71 f1       	breq	.+92     	; 0x2de4 <DIO_VidSet_Pin_Value+0xb0>
    2d88:	8e 81       	ldd	r24, Y+6	; 0x06
    2d8a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d8c:	83 30       	cpi	r24, 0x03	; 3
    2d8e:	91 05       	cpc	r25, r1
    2d90:	e9 f1       	breq	.+122    	; 0x2e0c <DIO_VidSet_Pin_Value+0xd8>
    2d92:	c7 c0       	rjmp	.+398    	; 0x2f22 <DIO_VidSet_Pin_Value+0x1ee>
		{
			case(Port_A):Set_Bit(PORTA,Copy_u8Pin);break;
    2d94:	ab e3       	ldi	r26, 0x3B	; 59
    2d96:	b0 e0       	ldi	r27, 0x00	; 0
    2d98:	eb e3       	ldi	r30, 0x3B	; 59
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	80 81       	ld	r24, Z
    2d9e:	48 2f       	mov	r20, r24
    2da0:	8a 81       	ldd	r24, Y+2	; 0x02
    2da2:	28 2f       	mov	r18, r24
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	02 2e       	mov	r0, r18
    2dac:	02 c0       	rjmp	.+4      	; 0x2db2 <DIO_VidSet_Pin_Value+0x7e>
    2dae:	88 0f       	add	r24, r24
    2db0:	99 1f       	adc	r25, r25
    2db2:	0a 94       	dec	r0
    2db4:	e2 f7       	brpl	.-8      	; 0x2dae <DIO_VidSet_Pin_Value+0x7a>
    2db6:	84 2b       	or	r24, r20
    2db8:	8c 93       	st	X, r24
    2dba:	b3 c0       	rjmp	.+358    	; 0x2f22 <DIO_VidSet_Pin_Value+0x1ee>
			case(Port_B):Set_Bit(PORTB,Copy_u8Pin);break;
    2dbc:	a8 e3       	ldi	r26, 0x38	; 56
    2dbe:	b0 e0       	ldi	r27, 0x00	; 0
    2dc0:	e8 e3       	ldi	r30, 0x38	; 56
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	80 81       	ld	r24, Z
    2dc6:	48 2f       	mov	r20, r24
    2dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	02 2e       	mov	r0, r18
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <DIO_VidSet_Pin_Value+0xa6>
    2dd6:	88 0f       	add	r24, r24
    2dd8:	99 1f       	adc	r25, r25
    2dda:	0a 94       	dec	r0
    2ddc:	e2 f7       	brpl	.-8      	; 0x2dd6 <DIO_VidSet_Pin_Value+0xa2>
    2dde:	84 2b       	or	r24, r20
    2de0:	8c 93       	st	X, r24
    2de2:	9f c0       	rjmp	.+318    	; 0x2f22 <DIO_VidSet_Pin_Value+0x1ee>
			case(Port_C):Set_Bit(PORTC,Copy_u8Pin);break;
    2de4:	a5 e3       	ldi	r26, 0x35	; 53
    2de6:	b0 e0       	ldi	r27, 0x00	; 0
    2de8:	e5 e3       	ldi	r30, 0x35	; 53
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	80 81       	ld	r24, Z
    2dee:	48 2f       	mov	r20, r24
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	28 2f       	mov	r18, r24
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	02 2e       	mov	r0, r18
    2dfc:	02 c0       	rjmp	.+4      	; 0x2e02 <DIO_VidSet_Pin_Value+0xce>
    2dfe:	88 0f       	add	r24, r24
    2e00:	99 1f       	adc	r25, r25
    2e02:	0a 94       	dec	r0
    2e04:	e2 f7       	brpl	.-8      	; 0x2dfe <DIO_VidSet_Pin_Value+0xca>
    2e06:	84 2b       	or	r24, r20
    2e08:	8c 93       	st	X, r24
    2e0a:	8b c0       	rjmp	.+278    	; 0x2f22 <DIO_VidSet_Pin_Value+0x1ee>
			case(Port_D):Set_Bit(PORTD,Copy_u8Pin);break;
    2e0c:	a2 e3       	ldi	r26, 0x32	; 50
    2e0e:	b0 e0       	ldi	r27, 0x00	; 0
    2e10:	e2 e3       	ldi	r30, 0x32	; 50
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	80 81       	ld	r24, Z
    2e16:	48 2f       	mov	r20, r24
    2e18:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1a:	28 2f       	mov	r18, r24
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	02 2e       	mov	r0, r18
    2e24:	02 c0       	rjmp	.+4      	; 0x2e2a <DIO_VidSet_Pin_Value+0xf6>
    2e26:	88 0f       	add	r24, r24
    2e28:	99 1f       	adc	r25, r25
    2e2a:	0a 94       	dec	r0
    2e2c:	e2 f7       	brpl	.-8      	; 0x2e26 <DIO_VidSet_Pin_Value+0xf2>
    2e2e:	84 2b       	or	r24, r20
    2e30:	8c 93       	st	X, r24
    2e32:	77 c0       	rjmp	.+238    	; 0x2f22 <DIO_VidSet_Pin_Value+0x1ee>
		}
	}
	else if(Copy_u8Value==LOW)
    2e34:	8b 81       	ldd	r24, Y+3	; 0x03
    2e36:	88 23       	and	r24, r24
    2e38:	09 f0       	breq	.+2      	; 0x2e3c <DIO_VidSet_Pin_Value+0x108>
    2e3a:	73 c0       	rjmp	.+230    	; 0x2f22 <DIO_VidSet_Pin_Value+0x1ee>
	{
		switch(Copy_u8Port)
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	28 2f       	mov	r18, r24
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	3d 83       	std	Y+5, r19	; 0x05
    2e44:	2c 83       	std	Y+4, r18	; 0x04
    2e46:	8c 81       	ldd	r24, Y+4	; 0x04
    2e48:	9d 81       	ldd	r25, Y+5	; 0x05
    2e4a:	81 30       	cpi	r24, 0x01	; 1
    2e4c:	91 05       	cpc	r25, r1
    2e4e:	59 f1       	breq	.+86     	; 0x2ea6 <DIO_VidSet_Pin_Value+0x172>
    2e50:	2c 81       	ldd	r18, Y+4	; 0x04
    2e52:	3d 81       	ldd	r19, Y+5	; 0x05
    2e54:	22 30       	cpi	r18, 0x02	; 2
    2e56:	31 05       	cpc	r19, r1
    2e58:	2c f4       	brge	.+10     	; 0x2e64 <DIO_VidSet_Pin_Value+0x130>
    2e5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e5c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e5e:	00 97       	sbiw	r24, 0x00	; 0
    2e60:	69 f0       	breq	.+26     	; 0x2e7c <DIO_VidSet_Pin_Value+0x148>
    2e62:	5f c0       	rjmp	.+190    	; 0x2f22 <DIO_VidSet_Pin_Value+0x1ee>
    2e64:	2c 81       	ldd	r18, Y+4	; 0x04
    2e66:	3d 81       	ldd	r19, Y+5	; 0x05
    2e68:	22 30       	cpi	r18, 0x02	; 2
    2e6a:	31 05       	cpc	r19, r1
    2e6c:	89 f1       	breq	.+98     	; 0x2ed0 <DIO_VidSet_Pin_Value+0x19c>
    2e6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e70:	9d 81       	ldd	r25, Y+5	; 0x05
    2e72:	83 30       	cpi	r24, 0x03	; 3
    2e74:	91 05       	cpc	r25, r1
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <DIO_VidSet_Pin_Value+0x146>
    2e78:	40 c0       	rjmp	.+128    	; 0x2efa <DIO_VidSet_Pin_Value+0x1c6>
    2e7a:	53 c0       	rjmp	.+166    	; 0x2f22 <DIO_VidSet_Pin_Value+0x1ee>
		{
			case(Port_A):Clear_Bit(PORTA,Copy_u8Pin);break;
    2e7c:	ab e3       	ldi	r26, 0x3B	; 59
    2e7e:	b0 e0       	ldi	r27, 0x00	; 0
    2e80:	eb e3       	ldi	r30, 0x3B	; 59
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	80 81       	ld	r24, Z
    2e86:	48 2f       	mov	r20, r24
    2e88:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8a:	28 2f       	mov	r18, r24
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	02 2e       	mov	r0, r18
    2e94:	02 c0       	rjmp	.+4      	; 0x2e9a <DIO_VidSet_Pin_Value+0x166>
    2e96:	88 0f       	add	r24, r24
    2e98:	99 1f       	adc	r25, r25
    2e9a:	0a 94       	dec	r0
    2e9c:	e2 f7       	brpl	.-8      	; 0x2e96 <DIO_VidSet_Pin_Value+0x162>
    2e9e:	80 95       	com	r24
    2ea0:	84 23       	and	r24, r20
    2ea2:	8c 93       	st	X, r24
    2ea4:	3e c0       	rjmp	.+124    	; 0x2f22 <DIO_VidSet_Pin_Value+0x1ee>
			case(Port_B):Clear_Bit(PORTB,Copy_u8Pin);break;
    2ea6:	a8 e3       	ldi	r26, 0x38	; 56
    2ea8:	b0 e0       	ldi	r27, 0x00	; 0
    2eaa:	e8 e3       	ldi	r30, 0x38	; 56
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	80 81       	ld	r24, Z
    2eb0:	48 2f       	mov	r20, r24
    2eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb4:	28 2f       	mov	r18, r24
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	02 2e       	mov	r0, r18
    2ebe:	02 c0       	rjmp	.+4      	; 0x2ec4 <DIO_VidSet_Pin_Value+0x190>
    2ec0:	88 0f       	add	r24, r24
    2ec2:	99 1f       	adc	r25, r25
    2ec4:	0a 94       	dec	r0
    2ec6:	e2 f7       	brpl	.-8      	; 0x2ec0 <DIO_VidSet_Pin_Value+0x18c>
    2ec8:	80 95       	com	r24
    2eca:	84 23       	and	r24, r20
    2ecc:	8c 93       	st	X, r24
    2ece:	29 c0       	rjmp	.+82     	; 0x2f22 <DIO_VidSet_Pin_Value+0x1ee>
			case(Port_C):Clear_Bit(PORTC,Copy_u8Pin);break;
    2ed0:	a5 e3       	ldi	r26, 0x35	; 53
    2ed2:	b0 e0       	ldi	r27, 0x00	; 0
    2ed4:	e5 e3       	ldi	r30, 0x35	; 53
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	80 81       	ld	r24, Z
    2eda:	48 2f       	mov	r20, r24
    2edc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ede:	28 2f       	mov	r18, r24
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	02 2e       	mov	r0, r18
    2ee8:	02 c0       	rjmp	.+4      	; 0x2eee <DIO_VidSet_Pin_Value+0x1ba>
    2eea:	88 0f       	add	r24, r24
    2eec:	99 1f       	adc	r25, r25
    2eee:	0a 94       	dec	r0
    2ef0:	e2 f7       	brpl	.-8      	; 0x2eea <DIO_VidSet_Pin_Value+0x1b6>
    2ef2:	80 95       	com	r24
    2ef4:	84 23       	and	r24, r20
    2ef6:	8c 93       	st	X, r24
    2ef8:	14 c0       	rjmp	.+40     	; 0x2f22 <DIO_VidSet_Pin_Value+0x1ee>
			case(Port_D):Clear_Bit(PORTD,Copy_u8Pin);break;
    2efa:	a2 e3       	ldi	r26, 0x32	; 50
    2efc:	b0 e0       	ldi	r27, 0x00	; 0
    2efe:	e2 e3       	ldi	r30, 0x32	; 50
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	48 2f       	mov	r20, r24
    2f06:	8a 81       	ldd	r24, Y+2	; 0x02
    2f08:	28 2f       	mov	r18, r24
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	02 2e       	mov	r0, r18
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <DIO_VidSet_Pin_Value+0x1e4>
    2f14:	88 0f       	add	r24, r24
    2f16:	99 1f       	adc	r25, r25
    2f18:	0a 94       	dec	r0
    2f1a:	e2 f7       	brpl	.-8      	; 0x2f14 <DIO_VidSet_Pin_Value+0x1e0>
    2f1c:	80 95       	com	r24
    2f1e:	84 23       	and	r24, r20
    2f20:	8c 93       	st	X, r24
		}
	}
}
    2f22:	27 96       	adiw	r28, 0x07	; 7
    2f24:	0f b6       	in	r0, 0x3f	; 63
    2f26:	f8 94       	cli
    2f28:	de bf       	out	0x3e, r29	; 62
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	cd bf       	out	0x3d, r28	; 61
    2f2e:	cf 91       	pop	r28
    2f30:	df 91       	pop	r29
    2f32:	08 95       	ret

00002f34 <DIO_VidToggle_Pin_Value>:

void DIO_VidToggle_Pin_Value(u8 Copy_u8Port,u8 Copy_u8Pin)								/*TOGGLE PIN Value*/
{
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	00 d0       	rcall	.+0      	; 0x2f3a <DIO_VidToggle_Pin_Value+0x6>
    2f3a:	00 d0       	rcall	.+0      	; 0x2f3c <DIO_VidToggle_Pin_Value+0x8>
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	89 83       	std	Y+1, r24	; 0x01
    2f42:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    2f44:	89 81       	ldd	r24, Y+1	; 0x01
    2f46:	28 2f       	mov	r18, r24
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	3c 83       	std	Y+4, r19	; 0x04
    2f4c:	2b 83       	std	Y+3, r18	; 0x03
    2f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f50:	9c 81       	ldd	r25, Y+4	; 0x04
    2f52:	81 30       	cpi	r24, 0x01	; 1
    2f54:	91 05       	cpc	r25, r1
    2f56:	49 f1       	breq	.+82     	; 0x2faa <DIO_VidToggle_Pin_Value+0x76>
    2f58:	2b 81       	ldd	r18, Y+3	; 0x03
    2f5a:	3c 81       	ldd	r19, Y+4	; 0x04
    2f5c:	22 30       	cpi	r18, 0x02	; 2
    2f5e:	31 05       	cpc	r19, r1
    2f60:	2c f4       	brge	.+10     	; 0x2f6c <DIO_VidToggle_Pin_Value+0x38>
    2f62:	8b 81       	ldd	r24, Y+3	; 0x03
    2f64:	9c 81       	ldd	r25, Y+4	; 0x04
    2f66:	00 97       	sbiw	r24, 0x00	; 0
    2f68:	61 f0       	breq	.+24     	; 0x2f82 <DIO_VidToggle_Pin_Value+0x4e>
    2f6a:	5a c0       	rjmp	.+180    	; 0x3020 <DIO_VidToggle_Pin_Value+0xec>
    2f6c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f6e:	3c 81       	ldd	r19, Y+4	; 0x04
    2f70:	22 30       	cpi	r18, 0x02	; 2
    2f72:	31 05       	cpc	r19, r1
    2f74:	71 f1       	breq	.+92     	; 0x2fd2 <DIO_VidToggle_Pin_Value+0x9e>
    2f76:	8b 81       	ldd	r24, Y+3	; 0x03
    2f78:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7a:	83 30       	cpi	r24, 0x03	; 3
    2f7c:	91 05       	cpc	r25, r1
    2f7e:	e9 f1       	breq	.+122    	; 0x2ffa <DIO_VidToggle_Pin_Value+0xc6>
    2f80:	4f c0       	rjmp	.+158    	; 0x3020 <DIO_VidToggle_Pin_Value+0xec>
	{
		case(Port_A):Toggle_Bit(PORTA,Copy_u8Pin);break;
    2f82:	ab e3       	ldi	r26, 0x3B	; 59
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	eb e3       	ldi	r30, 0x3B	; 59
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	48 2f       	mov	r20, r24
    2f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f90:	28 2f       	mov	r18, r24
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	02 2e       	mov	r0, r18
    2f9a:	02 c0       	rjmp	.+4      	; 0x2fa0 <DIO_VidToggle_Pin_Value+0x6c>
    2f9c:	88 0f       	add	r24, r24
    2f9e:	99 1f       	adc	r25, r25
    2fa0:	0a 94       	dec	r0
    2fa2:	e2 f7       	brpl	.-8      	; 0x2f9c <DIO_VidToggle_Pin_Value+0x68>
    2fa4:	84 27       	eor	r24, r20
    2fa6:	8c 93       	st	X, r24
    2fa8:	3b c0       	rjmp	.+118    	; 0x3020 <DIO_VidToggle_Pin_Value+0xec>
		case(Port_B):Toggle_Bit(PORTB,Copy_u8Pin);break;
    2faa:	a8 e3       	ldi	r26, 0x38	; 56
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	e8 e3       	ldi	r30, 0x38	; 56
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	48 2f       	mov	r20, r24
    2fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb8:	28 2f       	mov	r18, r24
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	02 2e       	mov	r0, r18
    2fc2:	02 c0       	rjmp	.+4      	; 0x2fc8 <DIO_VidToggle_Pin_Value+0x94>
    2fc4:	88 0f       	add	r24, r24
    2fc6:	99 1f       	adc	r25, r25
    2fc8:	0a 94       	dec	r0
    2fca:	e2 f7       	brpl	.-8      	; 0x2fc4 <DIO_VidToggle_Pin_Value+0x90>
    2fcc:	84 27       	eor	r24, r20
    2fce:	8c 93       	st	X, r24
    2fd0:	27 c0       	rjmp	.+78     	; 0x3020 <DIO_VidToggle_Pin_Value+0xec>
		case(Port_C):Toggle_Bit(PORTC,Copy_u8Pin);break;
    2fd2:	a5 e3       	ldi	r26, 0x35	; 53
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	e5 e3       	ldi	r30, 0x35	; 53
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
    2fdc:	48 2f       	mov	r20, r24
    2fde:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe0:	28 2f       	mov	r18, r24
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	02 2e       	mov	r0, r18
    2fea:	02 c0       	rjmp	.+4      	; 0x2ff0 <DIO_VidToggle_Pin_Value+0xbc>
    2fec:	88 0f       	add	r24, r24
    2fee:	99 1f       	adc	r25, r25
    2ff0:	0a 94       	dec	r0
    2ff2:	e2 f7       	brpl	.-8      	; 0x2fec <DIO_VidToggle_Pin_Value+0xb8>
    2ff4:	84 27       	eor	r24, r20
    2ff6:	8c 93       	st	X, r24
    2ff8:	13 c0       	rjmp	.+38     	; 0x3020 <DIO_VidToggle_Pin_Value+0xec>
		case(Port_D):Toggle_Bit(PORTD,Copy_u8Pin);break;
    2ffa:	a2 e3       	ldi	r26, 0x32	; 50
    2ffc:	b0 e0       	ldi	r27, 0x00	; 0
    2ffe:	e2 e3       	ldi	r30, 0x32	; 50
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	80 81       	ld	r24, Z
    3004:	48 2f       	mov	r20, r24
    3006:	8a 81       	ldd	r24, Y+2	; 0x02
    3008:	28 2f       	mov	r18, r24
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	02 2e       	mov	r0, r18
    3012:	02 c0       	rjmp	.+4      	; 0x3018 <DIO_VidToggle_Pin_Value+0xe4>
    3014:	88 0f       	add	r24, r24
    3016:	99 1f       	adc	r25, r25
    3018:	0a 94       	dec	r0
    301a:	e2 f7       	brpl	.-8      	; 0x3014 <DIO_VidToggle_Pin_Value+0xe0>
    301c:	84 27       	eor	r24, r20
    301e:	8c 93       	st	X, r24
	}
}
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	0f 90       	pop	r0
    3026:	0f 90       	pop	r0
    3028:	cf 91       	pop	r28
    302a:	df 91       	pop	r29
    302c:	08 95       	ret

0000302e <DIO_VidGet_Pin_Value>:

void DIO_VidGet_Pin_Value(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *Copy_Pu8Pin_Value)			/*Get PIN Value*/
{
    302e:	df 93       	push	r29
    3030:	cf 93       	push	r28
    3032:	00 d0       	rcall	.+0      	; 0x3034 <DIO_VidGet_Pin_Value+0x6>
    3034:	00 d0       	rcall	.+0      	; 0x3036 <DIO_VidGet_Pin_Value+0x8>
    3036:	00 d0       	rcall	.+0      	; 0x3038 <DIO_VidGet_Pin_Value+0xa>
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
    303c:	89 83       	std	Y+1, r24	; 0x01
    303e:	6a 83       	std	Y+2, r22	; 0x02
    3040:	5c 83       	std	Y+4, r21	; 0x04
    3042:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8Port)
    3044:	89 81       	ldd	r24, Y+1	; 0x01
    3046:	28 2f       	mov	r18, r24
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	3e 83       	std	Y+6, r19	; 0x06
    304c:	2d 83       	std	Y+5, r18	; 0x05
    304e:	4d 81       	ldd	r20, Y+5	; 0x05
    3050:	5e 81       	ldd	r21, Y+6	; 0x06
    3052:	41 30       	cpi	r20, 0x01	; 1
    3054:	51 05       	cpc	r21, r1
    3056:	59 f1       	breq	.+86     	; 0x30ae <DIO_VidGet_Pin_Value+0x80>
    3058:	8d 81       	ldd	r24, Y+5	; 0x05
    305a:	9e 81       	ldd	r25, Y+6	; 0x06
    305c:	82 30       	cpi	r24, 0x02	; 2
    305e:	91 05       	cpc	r25, r1
    3060:	34 f4       	brge	.+12     	; 0x306e <DIO_VidGet_Pin_Value+0x40>
    3062:	2d 81       	ldd	r18, Y+5	; 0x05
    3064:	3e 81       	ldd	r19, Y+6	; 0x06
    3066:	21 15       	cp	r18, r1
    3068:	31 05       	cpc	r19, r1
    306a:	69 f0       	breq	.+26     	; 0x3086 <DIO_VidGet_Pin_Value+0x58>
    306c:	5b c0       	rjmp	.+182    	; 0x3124 <DIO_VidGet_Pin_Value+0xf6>
    306e:	4d 81       	ldd	r20, Y+5	; 0x05
    3070:	5e 81       	ldd	r21, Y+6	; 0x06
    3072:	42 30       	cpi	r20, 0x02	; 2
    3074:	51 05       	cpc	r21, r1
    3076:	79 f1       	breq	.+94     	; 0x30d6 <DIO_VidGet_Pin_Value+0xa8>
    3078:	8d 81       	ldd	r24, Y+5	; 0x05
    307a:	9e 81       	ldd	r25, Y+6	; 0x06
    307c:	83 30       	cpi	r24, 0x03	; 3
    307e:	91 05       	cpc	r25, r1
    3080:	09 f4       	brne	.+2      	; 0x3084 <DIO_VidGet_Pin_Value+0x56>
    3082:	3d c0       	rjmp	.+122    	; 0x30fe <DIO_VidGet_Pin_Value+0xd0>
    3084:	4f c0       	rjmp	.+158    	; 0x3124 <DIO_VidGet_Pin_Value+0xf6>
	{
		case(Port_A):*Copy_Pu8Pin_Value = Get_Bit(PINA,Copy_u8Pin);break;
    3086:	e9 e3       	ldi	r30, 0x39	; 57
    3088:	f0 e0       	ldi	r31, 0x00	; 0
    308a:	80 81       	ld	r24, Z
    308c:	28 2f       	mov	r18, r24
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	8a 81       	ldd	r24, Y+2	; 0x02
    3092:	88 2f       	mov	r24, r24
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	a9 01       	movw	r20, r18
    3098:	02 c0       	rjmp	.+4      	; 0x309e <DIO_VidGet_Pin_Value+0x70>
    309a:	55 95       	asr	r21
    309c:	47 95       	ror	r20
    309e:	8a 95       	dec	r24
    30a0:	e2 f7       	brpl	.-8      	; 0x309a <DIO_VidGet_Pin_Value+0x6c>
    30a2:	ca 01       	movw	r24, r20
    30a4:	81 70       	andi	r24, 0x01	; 1
    30a6:	eb 81       	ldd	r30, Y+3	; 0x03
    30a8:	fc 81       	ldd	r31, Y+4	; 0x04
    30aa:	80 83       	st	Z, r24
    30ac:	3b c0       	rjmp	.+118    	; 0x3124 <DIO_VidGet_Pin_Value+0xf6>
		case(Port_B):*Copy_Pu8Pin_Value = Get_Bit(PINB,Copy_u8Pin);break;
    30ae:	e6 e3       	ldi	r30, 0x36	; 54
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	80 81       	ld	r24, Z
    30b4:	28 2f       	mov	r18, r24
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ba:	88 2f       	mov	r24, r24
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	a9 01       	movw	r20, r18
    30c0:	02 c0       	rjmp	.+4      	; 0x30c6 <DIO_VidGet_Pin_Value+0x98>
    30c2:	55 95       	asr	r21
    30c4:	47 95       	ror	r20
    30c6:	8a 95       	dec	r24
    30c8:	e2 f7       	brpl	.-8      	; 0x30c2 <DIO_VidGet_Pin_Value+0x94>
    30ca:	ca 01       	movw	r24, r20
    30cc:	81 70       	andi	r24, 0x01	; 1
    30ce:	eb 81       	ldd	r30, Y+3	; 0x03
    30d0:	fc 81       	ldd	r31, Y+4	; 0x04
    30d2:	80 83       	st	Z, r24
    30d4:	27 c0       	rjmp	.+78     	; 0x3124 <DIO_VidGet_Pin_Value+0xf6>
		case(Port_C):*Copy_Pu8Pin_Value = Get_Bit(PINC,Copy_u8Pin);break;
    30d6:	e3 e3       	ldi	r30, 0x33	; 51
    30d8:	f0 e0       	ldi	r31, 0x00	; 0
    30da:	80 81       	ld	r24, Z
    30dc:	28 2f       	mov	r18, r24
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	8a 81       	ldd	r24, Y+2	; 0x02
    30e2:	88 2f       	mov	r24, r24
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	a9 01       	movw	r20, r18
    30e8:	02 c0       	rjmp	.+4      	; 0x30ee <DIO_VidGet_Pin_Value+0xc0>
    30ea:	55 95       	asr	r21
    30ec:	47 95       	ror	r20
    30ee:	8a 95       	dec	r24
    30f0:	e2 f7       	brpl	.-8      	; 0x30ea <DIO_VidGet_Pin_Value+0xbc>
    30f2:	ca 01       	movw	r24, r20
    30f4:	81 70       	andi	r24, 0x01	; 1
    30f6:	eb 81       	ldd	r30, Y+3	; 0x03
    30f8:	fc 81       	ldd	r31, Y+4	; 0x04
    30fa:	80 83       	st	Z, r24
    30fc:	13 c0       	rjmp	.+38     	; 0x3124 <DIO_VidGet_Pin_Value+0xf6>
		case(Port_D):*Copy_Pu8Pin_Value = Get_Bit(PIND,Copy_u8Pin);break;
    30fe:	e0 e3       	ldi	r30, 0x30	; 48
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	80 81       	ld	r24, Z
    3104:	28 2f       	mov	r18, r24
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	8a 81       	ldd	r24, Y+2	; 0x02
    310a:	88 2f       	mov	r24, r24
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	a9 01       	movw	r20, r18
    3110:	02 c0       	rjmp	.+4      	; 0x3116 <DIO_VidGet_Pin_Value+0xe8>
    3112:	55 95       	asr	r21
    3114:	47 95       	ror	r20
    3116:	8a 95       	dec	r24
    3118:	e2 f7       	brpl	.-8      	; 0x3112 <DIO_VidGet_Pin_Value+0xe4>
    311a:	ca 01       	movw	r24, r20
    311c:	81 70       	andi	r24, 0x01	; 1
    311e:	eb 81       	ldd	r30, Y+3	; 0x03
    3120:	fc 81       	ldd	r31, Y+4	; 0x04
    3122:	80 83       	st	Z, r24
	}
}
    3124:	26 96       	adiw	r28, 0x06	; 6
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	f8 94       	cli
    312a:	de bf       	out	0x3e, r29	; 62
    312c:	0f be       	out	0x3f, r0	; 63
    312e:	cd bf       	out	0x3d, r28	; 61
    3130:	cf 91       	pop	r28
    3132:	df 91       	pop	r29
    3134:	08 95       	ret

00003136 <DIO_VidSet_Whole_Port_Direction>:


/*------------------------- OPTIONS FOR SINGLE PORT -------------------------*/

void DIO_VidSet_Whole_Port_Direction(u8 Copy_u8Port,u8 Copy_u8Direction)						/*SET PORT Direction*/
{
    3136:	df 93       	push	r29
    3138:	cf 93       	push	r28
    313a:	cd b7       	in	r28, 0x3d	; 61
    313c:	de b7       	in	r29, 0x3e	; 62
    313e:	2e 97       	sbiw	r28, 0x0e	; 14
    3140:	0f b6       	in	r0, 0x3f	; 63
    3142:	f8 94       	cli
    3144:	de bf       	out	0x3e, r29	; 62
    3146:	0f be       	out	0x3f, r0	; 63
    3148:	cd bf       	out	0x3d, r28	; 61
    314a:	89 83       	std	Y+1, r24	; 0x01
    314c:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8Direction==INPUT)
    314e:	8a 81       	ldd	r24, Y+2	; 0x02
    3150:	88 23       	and	r24, r24
    3152:	d9 f5       	brne	.+118    	; 0x31ca <DIO_VidSet_Whole_Port_Direction+0x94>
	{
		switch(Copy_u8Port)
    3154:	89 81       	ldd	r24, Y+1	; 0x01
    3156:	28 2f       	mov	r18, r24
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	3e 87       	std	Y+14, r19	; 0x0e
    315c:	2d 87       	std	Y+13, r18	; 0x0d
    315e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3160:	9e 85       	ldd	r25, Y+14	; 0x0e
    3162:	81 30       	cpi	r24, 0x01	; 1
    3164:	91 05       	cpc	r25, r1
    3166:	e1 f0       	breq	.+56     	; 0x31a0 <DIO_VidSet_Whole_Port_Direction+0x6a>
    3168:	2d 85       	ldd	r18, Y+13	; 0x0d
    316a:	3e 85       	ldd	r19, Y+14	; 0x0e
    316c:	22 30       	cpi	r18, 0x02	; 2
    316e:	31 05       	cpc	r19, r1
    3170:	2c f4       	brge	.+10     	; 0x317c <DIO_VidSet_Whole_Port_Direction+0x46>
    3172:	8d 85       	ldd	r24, Y+13	; 0x0d
    3174:	9e 85       	ldd	r25, Y+14	; 0x0e
    3176:	00 97       	sbiw	r24, 0x00	; 0
    3178:	61 f0       	breq	.+24     	; 0x3192 <DIO_VidSet_Whole_Port_Direction+0x5c>
    317a:	69 c0       	rjmp	.+210    	; 0x324e <DIO_VidSet_Whole_Port_Direction+0x118>
    317c:	2d 85       	ldd	r18, Y+13	; 0x0d
    317e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3180:	22 30       	cpi	r18, 0x02	; 2
    3182:	31 05       	cpc	r19, r1
    3184:	a1 f0       	breq	.+40     	; 0x31ae <DIO_VidSet_Whole_Port_Direction+0x78>
    3186:	8d 85       	ldd	r24, Y+13	; 0x0d
    3188:	9e 85       	ldd	r25, Y+14	; 0x0e
    318a:	83 30       	cpi	r24, 0x03	; 3
    318c:	91 05       	cpc	r25, r1
    318e:	b1 f0       	breq	.+44     	; 0x31bc <DIO_VidSet_Whole_Port_Direction+0x86>
    3190:	5e c0       	rjmp	.+188    	; 0x324e <DIO_VidSet_Whole_Port_Direction+0x118>
				{
					case(Port_A):DDRA&=0x00;break;
    3192:	ea e3       	ldi	r30, 0x3A	; 58
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	90 81       	ld	r25, Z
    3198:	ea e3       	ldi	r30, 0x3A	; 58
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	10 82       	st	Z, r1
    319e:	57 c0       	rjmp	.+174    	; 0x324e <DIO_VidSet_Whole_Port_Direction+0x118>
					case(Port_B):DDRB&=0x00;break;
    31a0:	e7 e3       	ldi	r30, 0x37	; 55
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	20 81       	ld	r18, Z
    31a6:	e7 e3       	ldi	r30, 0x37	; 55
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	10 82       	st	Z, r1
    31ac:	50 c0       	rjmp	.+160    	; 0x324e <DIO_VidSet_Whole_Port_Direction+0x118>
					case(Port_C):DDRC&=0x00;break;
    31ae:	e4 e3       	ldi	r30, 0x34	; 52
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	30 81       	ld	r19, Z
    31b4:	e4 e3       	ldi	r30, 0x34	; 52
    31b6:	f0 e0       	ldi	r31, 0x00	; 0
    31b8:	10 82       	st	Z, r1
    31ba:	49 c0       	rjmp	.+146    	; 0x324e <DIO_VidSet_Whole_Port_Direction+0x118>
					case(Port_D):DDRD&=0x00;break;
    31bc:	e1 e3       	ldi	r30, 0x31	; 49
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	80 81       	ld	r24, Z
    31c2:	e1 e3       	ldi	r30, 0x31	; 49
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	10 82       	st	Z, r1
    31c8:	42 c0       	rjmp	.+132    	; 0x324e <DIO_VidSet_Whole_Port_Direction+0x118>
				}
	}
	else if(Copy_u8Direction==OUTPUT)
    31ca:	8a 81       	ldd	r24, Y+2	; 0x02
    31cc:	81 30       	cpi	r24, 0x01	; 1
    31ce:	09 f0       	breq	.+2      	; 0x31d2 <DIO_VidSet_Whole_Port_Direction+0x9c>
    31d0:	3e c0       	rjmp	.+124    	; 0x324e <DIO_VidSet_Whole_Port_Direction+0x118>
	{
		switch(Copy_u8Port)
    31d2:	89 81       	ldd	r24, Y+1	; 0x01
    31d4:	28 2f       	mov	r18, r24
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	38 87       	std	Y+8, r19	; 0x08
    31da:	2f 83       	std	Y+7, r18	; 0x07
    31dc:	8f 81       	ldd	r24, Y+7	; 0x07
    31de:	98 85       	ldd	r25, Y+8	; 0x08
    31e0:	81 30       	cpi	r24, 0x01	; 1
    31e2:	91 05       	cpc	r25, r1
    31e4:	e9 f0       	breq	.+58     	; 0x3220 <DIO_VidSet_Whole_Port_Direction+0xea>
    31e6:	2f 81       	ldd	r18, Y+7	; 0x07
    31e8:	38 85       	ldd	r19, Y+8	; 0x08
    31ea:	22 30       	cpi	r18, 0x02	; 2
    31ec:	31 05       	cpc	r19, r1
    31ee:	2c f4       	brge	.+10     	; 0x31fa <DIO_VidSet_Whole_Port_Direction+0xc4>
    31f0:	8f 81       	ldd	r24, Y+7	; 0x07
    31f2:	98 85       	ldd	r25, Y+8	; 0x08
    31f4:	00 97       	sbiw	r24, 0x00	; 0
    31f6:	61 f0       	breq	.+24     	; 0x3210 <DIO_VidSet_Whole_Port_Direction+0xda>
    31f8:	2a c0       	rjmp	.+84     	; 0x324e <DIO_VidSet_Whole_Port_Direction+0x118>
    31fa:	2f 81       	ldd	r18, Y+7	; 0x07
    31fc:	38 85       	ldd	r19, Y+8	; 0x08
    31fe:	22 30       	cpi	r18, 0x02	; 2
    3200:	31 05       	cpc	r19, r1
    3202:	b1 f0       	breq	.+44     	; 0x3230 <DIO_VidSet_Whole_Port_Direction+0xfa>
    3204:	8f 81       	ldd	r24, Y+7	; 0x07
    3206:	98 85       	ldd	r25, Y+8	; 0x08
    3208:	83 30       	cpi	r24, 0x03	; 3
    320a:	91 05       	cpc	r25, r1
    320c:	c9 f0       	breq	.+50     	; 0x3240 <DIO_VidSet_Whole_Port_Direction+0x10a>
    320e:	1f c0       	rjmp	.+62     	; 0x324e <DIO_VidSet_Whole_Port_Direction+0x118>
				{
					case(Port_A):DDRA|=0xff;break;
    3210:	ea e3       	ldi	r30, 0x3A	; 58
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	90 81       	ld	r25, Z
    3216:	ea e3       	ldi	r30, 0x3A	; 58
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	8f ef       	ldi	r24, 0xFF	; 255
    321c:	80 83       	st	Z, r24
    321e:	17 c0       	rjmp	.+46     	; 0x324e <DIO_VidSet_Whole_Port_Direction+0x118>
					case(Port_B):DDRB|=0xff;break;
    3220:	e7 e3       	ldi	r30, 0x37	; 55
    3222:	f0 e0       	ldi	r31, 0x00	; 0
    3224:	20 81       	ld	r18, Z
    3226:	e7 e3       	ldi	r30, 0x37	; 55
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	8f ef       	ldi	r24, 0xFF	; 255
    322c:	80 83       	st	Z, r24
    322e:	0f c0       	rjmp	.+30     	; 0x324e <DIO_VidSet_Whole_Port_Direction+0x118>
					case(Port_C):DDRC|=0xff;break;
    3230:	e4 e3       	ldi	r30, 0x34	; 52
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	30 81       	ld	r19, Z
    3236:	e4 e3       	ldi	r30, 0x34	; 52
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	8f ef       	ldi	r24, 0xFF	; 255
    323c:	80 83       	st	Z, r24
    323e:	07 c0       	rjmp	.+14     	; 0x324e <DIO_VidSet_Whole_Port_Direction+0x118>
					case(Port_D):DDRD|=0xff;break;
    3240:	e1 e3       	ldi	r30, 0x31	; 49
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	80 81       	ld	r24, Z
    3246:	e1 e3       	ldi	r30, 0x31	; 49
    3248:	f0 e0       	ldi	r31, 0x00	; 0
    324a:	8f ef       	ldi	r24, 0xFF	; 255
    324c:	80 83       	st	Z, r24
				}
	}
}
    324e:	2e 96       	adiw	r28, 0x0e	; 14
    3250:	0f b6       	in	r0, 0x3f	; 63
    3252:	f8 94       	cli
    3254:	de bf       	out	0x3e, r29	; 62
    3256:	0f be       	out	0x3f, r0	; 63
    3258:	cd bf       	out	0x3d, r28	; 61
    325a:	cf 91       	pop	r28
    325c:	df 91       	pop	r29
    325e:	08 95       	ret

00003260 <DIO_VidSet_Port_Direction>:

void DIO_VidSet_Port_Direction(u8 Copy_u8Port,u8 Copy_u8Value)
{
    3260:	df 93       	push	r29
    3262:	cf 93       	push	r28
    3264:	00 d0       	rcall	.+0      	; 0x3266 <DIO_VidSet_Port_Direction+0x6>
    3266:	00 d0       	rcall	.+0      	; 0x3268 <DIO_VidSet_Port_Direction+0x8>
    3268:	cd b7       	in	r28, 0x3d	; 61
    326a:	de b7       	in	r29, 0x3e	; 62
    326c:	89 83       	std	Y+1, r24	; 0x01
    326e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    3270:	89 81       	ldd	r24, Y+1	; 0x01
    3272:	28 2f       	mov	r18, r24
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	3c 83       	std	Y+4, r19	; 0x04
    3278:	2b 83       	std	Y+3, r18	; 0x03
    327a:	8b 81       	ldd	r24, Y+3	; 0x03
    327c:	9c 81       	ldd	r25, Y+4	; 0x04
    327e:	81 30       	cpi	r24, 0x01	; 1
    3280:	91 05       	cpc	r25, r1
    3282:	d1 f0       	breq	.+52     	; 0x32b8 <DIO_VidSet_Port_Direction+0x58>
    3284:	2b 81       	ldd	r18, Y+3	; 0x03
    3286:	3c 81       	ldd	r19, Y+4	; 0x04
    3288:	22 30       	cpi	r18, 0x02	; 2
    328a:	31 05       	cpc	r19, r1
    328c:	2c f4       	brge	.+10     	; 0x3298 <DIO_VidSet_Port_Direction+0x38>
    328e:	8b 81       	ldd	r24, Y+3	; 0x03
    3290:	9c 81       	ldd	r25, Y+4	; 0x04
    3292:	00 97       	sbiw	r24, 0x00	; 0
    3294:	61 f0       	breq	.+24     	; 0x32ae <DIO_VidSet_Port_Direction+0x4e>
    3296:	1e c0       	rjmp	.+60     	; 0x32d4 <DIO_VidSet_Port_Direction+0x74>
    3298:	2b 81       	ldd	r18, Y+3	; 0x03
    329a:	3c 81       	ldd	r19, Y+4	; 0x04
    329c:	22 30       	cpi	r18, 0x02	; 2
    329e:	31 05       	cpc	r19, r1
    32a0:	81 f0       	breq	.+32     	; 0x32c2 <DIO_VidSet_Port_Direction+0x62>
    32a2:	8b 81       	ldd	r24, Y+3	; 0x03
    32a4:	9c 81       	ldd	r25, Y+4	; 0x04
    32a6:	83 30       	cpi	r24, 0x03	; 3
    32a8:	91 05       	cpc	r25, r1
    32aa:	81 f0       	breq	.+32     	; 0x32cc <DIO_VidSet_Port_Direction+0x6c>
    32ac:	13 c0       	rjmp	.+38     	; 0x32d4 <DIO_VidSet_Port_Direction+0x74>
			{
				case(Port_A):DDRA=Copy_u8Value;break;
    32ae:	ea e3       	ldi	r30, 0x3A	; 58
    32b0:	f0 e0       	ldi	r31, 0x00	; 0
    32b2:	8a 81       	ldd	r24, Y+2	; 0x02
    32b4:	80 83       	st	Z, r24
    32b6:	0e c0       	rjmp	.+28     	; 0x32d4 <DIO_VidSet_Port_Direction+0x74>
				case(Port_B):DDRB=Copy_u8Value;break;
    32b8:	e7 e3       	ldi	r30, 0x37	; 55
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	8a 81       	ldd	r24, Y+2	; 0x02
    32be:	80 83       	st	Z, r24
    32c0:	09 c0       	rjmp	.+18     	; 0x32d4 <DIO_VidSet_Port_Direction+0x74>
				case(Port_C):DDRC=Copy_u8Value;break;
    32c2:	e4 e3       	ldi	r30, 0x34	; 52
    32c4:	f0 e0       	ldi	r31, 0x00	; 0
    32c6:	8a 81       	ldd	r24, Y+2	; 0x02
    32c8:	80 83       	st	Z, r24
    32ca:	04 c0       	rjmp	.+8      	; 0x32d4 <DIO_VidSet_Port_Direction+0x74>
				case(Port_D):DDRD=Copy_u8Value;break;
    32cc:	e1 e3       	ldi	r30, 0x31	; 49
    32ce:	f0 e0       	ldi	r31, 0x00	; 0
    32d0:	8a 81       	ldd	r24, Y+2	; 0x02
    32d2:	80 83       	st	Z, r24
			}
}
    32d4:	0f 90       	pop	r0
    32d6:	0f 90       	pop	r0
    32d8:	0f 90       	pop	r0
    32da:	0f 90       	pop	r0
    32dc:	cf 91       	pop	r28
    32de:	df 91       	pop	r29
    32e0:	08 95       	ret

000032e2 <DIO_VidInternal_Port_Bull_Up>:

void DIO_VidInternal_Port_Bull_Up(u8 Copy_u8Port)										/*INTERNAL PORT PULL UP*/
{
    32e2:	df 93       	push	r29
    32e4:	cf 93       	push	r28
    32e6:	00 d0       	rcall	.+0      	; 0x32e8 <DIO_VidInternal_Port_Bull_Up+0x6>
    32e8:	0f 92       	push	r0
    32ea:	cd b7       	in	r28, 0x3d	; 61
    32ec:	de b7       	in	r29, 0x3e	; 62
    32ee:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Port)
    32f0:	89 81       	ldd	r24, Y+1	; 0x01
    32f2:	28 2f       	mov	r18, r24
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	3b 83       	std	Y+3, r19	; 0x03
    32f8:	2a 83       	std	Y+2, r18	; 0x02
    32fa:	8a 81       	ldd	r24, Y+2	; 0x02
    32fc:	9b 81       	ldd	r25, Y+3	; 0x03
    32fe:	81 30       	cpi	r24, 0x01	; 1
    3300:	91 05       	cpc	r25, r1
    3302:	d1 f0       	breq	.+52     	; 0x3338 <DIO_VidInternal_Port_Bull_Up+0x56>
    3304:	2a 81       	ldd	r18, Y+2	; 0x02
    3306:	3b 81       	ldd	r19, Y+3	; 0x03
    3308:	22 30       	cpi	r18, 0x02	; 2
    330a:	31 05       	cpc	r19, r1
    330c:	2c f4       	brge	.+10     	; 0x3318 <DIO_VidInternal_Port_Bull_Up+0x36>
    330e:	8a 81       	ldd	r24, Y+2	; 0x02
    3310:	9b 81       	ldd	r25, Y+3	; 0x03
    3312:	00 97       	sbiw	r24, 0x00	; 0
    3314:	61 f0       	breq	.+24     	; 0x332e <DIO_VidInternal_Port_Bull_Up+0x4c>
    3316:	1e c0       	rjmp	.+60     	; 0x3354 <DIO_VidInternal_Port_Bull_Up+0x72>
    3318:	2a 81       	ldd	r18, Y+2	; 0x02
    331a:	3b 81       	ldd	r19, Y+3	; 0x03
    331c:	22 30       	cpi	r18, 0x02	; 2
    331e:	31 05       	cpc	r19, r1
    3320:	81 f0       	breq	.+32     	; 0x3342 <DIO_VidInternal_Port_Bull_Up+0x60>
    3322:	8a 81       	ldd	r24, Y+2	; 0x02
    3324:	9b 81       	ldd	r25, Y+3	; 0x03
    3326:	83 30       	cpi	r24, 0x03	; 3
    3328:	91 05       	cpc	r25, r1
    332a:	81 f0       	breq	.+32     	; 0x334c <DIO_VidInternal_Port_Bull_Up+0x6a>
    332c:	13 c0       	rjmp	.+38     	; 0x3354 <DIO_VidInternal_Port_Bull_Up+0x72>
					{
						case(Port_A):PORTA=0xff;break;
    332e:	eb e3       	ldi	r30, 0x3B	; 59
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	8f ef       	ldi	r24, 0xFF	; 255
    3334:	80 83       	st	Z, r24
    3336:	0e c0       	rjmp	.+28     	; 0x3354 <DIO_VidInternal_Port_Bull_Up+0x72>
						case(Port_B):PORTB=0xff;break;
    3338:	e8 e3       	ldi	r30, 0x38	; 56
    333a:	f0 e0       	ldi	r31, 0x00	; 0
    333c:	8f ef       	ldi	r24, 0xFF	; 255
    333e:	80 83       	st	Z, r24
    3340:	09 c0       	rjmp	.+18     	; 0x3354 <DIO_VidInternal_Port_Bull_Up+0x72>
						case(Port_C):PORTC=0xff;break;
    3342:	e5 e3       	ldi	r30, 0x35	; 53
    3344:	f0 e0       	ldi	r31, 0x00	; 0
    3346:	8f ef       	ldi	r24, 0xFF	; 255
    3348:	80 83       	st	Z, r24
    334a:	04 c0       	rjmp	.+8      	; 0x3354 <DIO_VidInternal_Port_Bull_Up+0x72>
						case(Port_D):PORTD=0xff;break;
    334c:	e2 e3       	ldi	r30, 0x32	; 50
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	8f ef       	ldi	r24, 0xFF	; 255
    3352:	80 83       	st	Z, r24
					}
}
    3354:	0f 90       	pop	r0
    3356:	0f 90       	pop	r0
    3358:	0f 90       	pop	r0
    335a:	cf 91       	pop	r28
    335c:	df 91       	pop	r29
    335e:	08 95       	ret

00003360 <DIO_VidSet_Port_Value>:
void DIO_VidSet_Port_Value(u8 Copy_u8Port,u8 Copy_u8Value)								/*SET PORT Value*/
{
    3360:	df 93       	push	r29
    3362:	cf 93       	push	r28
    3364:	00 d0       	rcall	.+0      	; 0x3366 <DIO_VidSet_Port_Value+0x6>
    3366:	00 d0       	rcall	.+0      	; 0x3368 <DIO_VidSet_Port_Value+0x8>
    3368:	cd b7       	in	r28, 0x3d	; 61
    336a:	de b7       	in	r29, 0x3e	; 62
    336c:	89 83       	std	Y+1, r24	; 0x01
    336e:	6a 83       	std	Y+2, r22	; 0x02
		switch(Copy_u8Port)
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	28 2f       	mov	r18, r24
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	3c 83       	std	Y+4, r19	; 0x04
    3378:	2b 83       	std	Y+3, r18	; 0x03
    337a:	8b 81       	ldd	r24, Y+3	; 0x03
    337c:	9c 81       	ldd	r25, Y+4	; 0x04
    337e:	81 30       	cpi	r24, 0x01	; 1
    3380:	91 05       	cpc	r25, r1
    3382:	d1 f0       	breq	.+52     	; 0x33b8 <DIO_VidSet_Port_Value+0x58>
    3384:	2b 81       	ldd	r18, Y+3	; 0x03
    3386:	3c 81       	ldd	r19, Y+4	; 0x04
    3388:	22 30       	cpi	r18, 0x02	; 2
    338a:	31 05       	cpc	r19, r1
    338c:	2c f4       	brge	.+10     	; 0x3398 <DIO_VidSet_Port_Value+0x38>
    338e:	8b 81       	ldd	r24, Y+3	; 0x03
    3390:	9c 81       	ldd	r25, Y+4	; 0x04
    3392:	00 97       	sbiw	r24, 0x00	; 0
    3394:	61 f0       	breq	.+24     	; 0x33ae <DIO_VidSet_Port_Value+0x4e>
    3396:	1e c0       	rjmp	.+60     	; 0x33d4 <DIO_VidSet_Port_Value+0x74>
    3398:	2b 81       	ldd	r18, Y+3	; 0x03
    339a:	3c 81       	ldd	r19, Y+4	; 0x04
    339c:	22 30       	cpi	r18, 0x02	; 2
    339e:	31 05       	cpc	r19, r1
    33a0:	81 f0       	breq	.+32     	; 0x33c2 <DIO_VidSet_Port_Value+0x62>
    33a2:	8b 81       	ldd	r24, Y+3	; 0x03
    33a4:	9c 81       	ldd	r25, Y+4	; 0x04
    33a6:	83 30       	cpi	r24, 0x03	; 3
    33a8:	91 05       	cpc	r25, r1
    33aa:	81 f0       	breq	.+32     	; 0x33cc <DIO_VidSet_Port_Value+0x6c>
    33ac:	13 c0       	rjmp	.+38     	; 0x33d4 <DIO_VidSet_Port_Value+0x74>
		{
			case(Port_A):PORTA=Copy_u8Value;break;
    33ae:	eb e3       	ldi	r30, 0x3B	; 59
    33b0:	f0 e0       	ldi	r31, 0x00	; 0
    33b2:	8a 81       	ldd	r24, Y+2	; 0x02
    33b4:	80 83       	st	Z, r24
    33b6:	0e c0       	rjmp	.+28     	; 0x33d4 <DIO_VidSet_Port_Value+0x74>
			case(Port_B):PORTB=Copy_u8Value;break;
    33b8:	e8 e3       	ldi	r30, 0x38	; 56
    33ba:	f0 e0       	ldi	r31, 0x00	; 0
    33bc:	8a 81       	ldd	r24, Y+2	; 0x02
    33be:	80 83       	st	Z, r24
    33c0:	09 c0       	rjmp	.+18     	; 0x33d4 <DIO_VidSet_Port_Value+0x74>
			case(Port_C):PORTC=Copy_u8Value;break;
    33c2:	e5 e3       	ldi	r30, 0x35	; 53
    33c4:	f0 e0       	ldi	r31, 0x00	; 0
    33c6:	8a 81       	ldd	r24, Y+2	; 0x02
    33c8:	80 83       	st	Z, r24
    33ca:	04 c0       	rjmp	.+8      	; 0x33d4 <DIO_VidSet_Port_Value+0x74>
			case(Port_D):PORTD=Copy_u8Value;break;
    33cc:	e2 e3       	ldi	r30, 0x32	; 50
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	8a 81       	ldd	r24, Y+2	; 0x02
    33d2:	80 83       	st	Z, r24
		}
}
    33d4:	0f 90       	pop	r0
    33d6:	0f 90       	pop	r0
    33d8:	0f 90       	pop	r0
    33da:	0f 90       	pop	r0
    33dc:	cf 91       	pop	r28
    33de:	df 91       	pop	r29
    33e0:	08 95       	ret

000033e2 <DIO_VidToggle_Port_Value>:

void DIO_VidToggle_Port_Value(u8 Copy_u8Port)											/*Toggle PORT Value*/
{
    33e2:	df 93       	push	r29
    33e4:	cf 93       	push	r28
    33e6:	00 d0       	rcall	.+0      	; 0x33e8 <DIO_VidToggle_Port_Value+0x6>
    33e8:	0f 92       	push	r0
    33ea:	cd b7       	in	r28, 0x3d	; 61
    33ec:	de b7       	in	r29, 0x3e	; 62
    33ee:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Port)
    33f0:	89 81       	ldd	r24, Y+1	; 0x01
    33f2:	28 2f       	mov	r18, r24
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	3b 83       	std	Y+3, r19	; 0x03
    33f8:	2a 83       	std	Y+2, r18	; 0x02
    33fa:	8a 81       	ldd	r24, Y+2	; 0x02
    33fc:	9b 81       	ldd	r25, Y+3	; 0x03
    33fe:	81 30       	cpi	r24, 0x01	; 1
    3400:	91 05       	cpc	r25, r1
    3402:	e9 f0       	breq	.+58     	; 0x343e <DIO_VidToggle_Port_Value+0x5c>
    3404:	2a 81       	ldd	r18, Y+2	; 0x02
    3406:	3b 81       	ldd	r19, Y+3	; 0x03
    3408:	22 30       	cpi	r18, 0x02	; 2
    340a:	31 05       	cpc	r19, r1
    340c:	2c f4       	brge	.+10     	; 0x3418 <DIO_VidToggle_Port_Value+0x36>
    340e:	8a 81       	ldd	r24, Y+2	; 0x02
    3410:	9b 81       	ldd	r25, Y+3	; 0x03
    3412:	00 97       	sbiw	r24, 0x00	; 0
    3414:	61 f0       	breq	.+24     	; 0x342e <DIO_VidToggle_Port_Value+0x4c>
    3416:	2a c0       	rjmp	.+84     	; 0x346c <DIO_VidToggle_Port_Value+0x8a>
    3418:	2a 81       	ldd	r18, Y+2	; 0x02
    341a:	3b 81       	ldd	r19, Y+3	; 0x03
    341c:	22 30       	cpi	r18, 0x02	; 2
    341e:	31 05       	cpc	r19, r1
    3420:	b1 f0       	breq	.+44     	; 0x344e <DIO_VidToggle_Port_Value+0x6c>
    3422:	8a 81       	ldd	r24, Y+2	; 0x02
    3424:	9b 81       	ldd	r25, Y+3	; 0x03
    3426:	83 30       	cpi	r24, 0x03	; 3
    3428:	91 05       	cpc	r25, r1
    342a:	c9 f0       	breq	.+50     	; 0x345e <DIO_VidToggle_Port_Value+0x7c>
    342c:	1f c0       	rjmp	.+62     	; 0x346c <DIO_VidToggle_Port_Value+0x8a>
	{
		case(Port_A):PORTA^=0xff;break;
    342e:	ab e3       	ldi	r26, 0x3B	; 59
    3430:	b0 e0       	ldi	r27, 0x00	; 0
    3432:	eb e3       	ldi	r30, 0x3B	; 59
    3434:	f0 e0       	ldi	r31, 0x00	; 0
    3436:	80 81       	ld	r24, Z
    3438:	80 95       	com	r24
    343a:	8c 93       	st	X, r24
    343c:	17 c0       	rjmp	.+46     	; 0x346c <DIO_VidToggle_Port_Value+0x8a>
		case(Port_B):PORTB^=0xff;break;
    343e:	a8 e3       	ldi	r26, 0x38	; 56
    3440:	b0 e0       	ldi	r27, 0x00	; 0
    3442:	e8 e3       	ldi	r30, 0x38	; 56
    3444:	f0 e0       	ldi	r31, 0x00	; 0
    3446:	80 81       	ld	r24, Z
    3448:	80 95       	com	r24
    344a:	8c 93       	st	X, r24
    344c:	0f c0       	rjmp	.+30     	; 0x346c <DIO_VidToggle_Port_Value+0x8a>
		case(Port_C):PORTC^=0xff;break;
    344e:	a5 e3       	ldi	r26, 0x35	; 53
    3450:	b0 e0       	ldi	r27, 0x00	; 0
    3452:	e5 e3       	ldi	r30, 0x35	; 53
    3454:	f0 e0       	ldi	r31, 0x00	; 0
    3456:	80 81       	ld	r24, Z
    3458:	80 95       	com	r24
    345a:	8c 93       	st	X, r24
    345c:	07 c0       	rjmp	.+14     	; 0x346c <DIO_VidToggle_Port_Value+0x8a>
		case(Port_D):PORTD^=0xff;break;
    345e:	a2 e3       	ldi	r26, 0x32	; 50
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	e2 e3       	ldi	r30, 0x32	; 50
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	80 81       	ld	r24, Z
    3468:	80 95       	com	r24
    346a:	8c 93       	st	X, r24
	}
}
    346c:	0f 90       	pop	r0
    346e:	0f 90       	pop	r0
    3470:	0f 90       	pop	r0
    3472:	cf 91       	pop	r28
    3474:	df 91       	pop	r29
    3476:	08 95       	ret

00003478 <DIO_VidGet_Port_Value>:



void DIO_VidGet_Port_Value(u8 Copy_u8Port,u8 *Copy_Pu8Port_Value)						/*Get PORT Value*/
{
    3478:	df 93       	push	r29
    347a:	cf 93       	push	r28
    347c:	00 d0       	rcall	.+0      	; 0x347e <DIO_VidGet_Port_Value+0x6>
    347e:	00 d0       	rcall	.+0      	; 0x3480 <DIO_VidGet_Port_Value+0x8>
    3480:	0f 92       	push	r0
    3482:	cd b7       	in	r28, 0x3d	; 61
    3484:	de b7       	in	r29, 0x3e	; 62
    3486:	89 83       	std	Y+1, r24	; 0x01
    3488:	7b 83       	std	Y+3, r23	; 0x03
    348a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    348c:	89 81       	ldd	r24, Y+1	; 0x01
    348e:	28 2f       	mov	r18, r24
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	3d 83       	std	Y+5, r19	; 0x05
    3494:	2c 83       	std	Y+4, r18	; 0x04
    3496:	8c 81       	ldd	r24, Y+4	; 0x04
    3498:	9d 81       	ldd	r25, Y+5	; 0x05
    349a:	81 30       	cpi	r24, 0x01	; 1
    349c:	91 05       	cpc	r25, r1
    349e:	e1 f0       	breq	.+56     	; 0x34d8 <DIO_VidGet_Port_Value+0x60>
    34a0:	2c 81       	ldd	r18, Y+4	; 0x04
    34a2:	3d 81       	ldd	r19, Y+5	; 0x05
    34a4:	22 30       	cpi	r18, 0x02	; 2
    34a6:	31 05       	cpc	r19, r1
    34a8:	2c f4       	brge	.+10     	; 0x34b4 <DIO_VidGet_Port_Value+0x3c>
    34aa:	8c 81       	ldd	r24, Y+4	; 0x04
    34ac:	9d 81       	ldd	r25, Y+5	; 0x05
    34ae:	00 97       	sbiw	r24, 0x00	; 0
    34b0:	61 f0       	breq	.+24     	; 0x34ca <DIO_VidGet_Port_Value+0x52>
    34b2:	26 c0       	rjmp	.+76     	; 0x3500 <DIO_VidGet_Port_Value+0x88>
    34b4:	2c 81       	ldd	r18, Y+4	; 0x04
    34b6:	3d 81       	ldd	r19, Y+5	; 0x05
    34b8:	22 30       	cpi	r18, 0x02	; 2
    34ba:	31 05       	cpc	r19, r1
    34bc:	a1 f0       	breq	.+40     	; 0x34e6 <DIO_VidGet_Port_Value+0x6e>
    34be:	8c 81       	ldd	r24, Y+4	; 0x04
    34c0:	9d 81       	ldd	r25, Y+5	; 0x05
    34c2:	83 30       	cpi	r24, 0x03	; 3
    34c4:	91 05       	cpc	r25, r1
    34c6:	b1 f0       	breq	.+44     	; 0x34f4 <DIO_VidGet_Port_Value+0x7c>
    34c8:	1b c0       	rjmp	.+54     	; 0x3500 <DIO_VidGet_Port_Value+0x88>
	{
		case(Port_A):*Copy_Pu8Port_Value = PINA;break;
    34ca:	e9 e3       	ldi	r30, 0x39	; 57
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	80 81       	ld	r24, Z
    34d0:	ea 81       	ldd	r30, Y+2	; 0x02
    34d2:	fb 81       	ldd	r31, Y+3	; 0x03
    34d4:	80 83       	st	Z, r24
    34d6:	14 c0       	rjmp	.+40     	; 0x3500 <DIO_VidGet_Port_Value+0x88>
		case(Port_B):*Copy_Pu8Port_Value = PINB;break;
    34d8:	e6 e3       	ldi	r30, 0x36	; 54
    34da:	f0 e0       	ldi	r31, 0x00	; 0
    34dc:	80 81       	ld	r24, Z
    34de:	ea 81       	ldd	r30, Y+2	; 0x02
    34e0:	fb 81       	ldd	r31, Y+3	; 0x03
    34e2:	80 83       	st	Z, r24
    34e4:	0d c0       	rjmp	.+26     	; 0x3500 <DIO_VidGet_Port_Value+0x88>
		case(Port_C):*Copy_Pu8Port_Value = PINC;break;
    34e6:	e3 e3       	ldi	r30, 0x33	; 51
    34e8:	f0 e0       	ldi	r31, 0x00	; 0
    34ea:	80 81       	ld	r24, Z
    34ec:	ea 81       	ldd	r30, Y+2	; 0x02
    34ee:	fb 81       	ldd	r31, Y+3	; 0x03
    34f0:	80 83       	st	Z, r24
    34f2:	06 c0       	rjmp	.+12     	; 0x3500 <DIO_VidGet_Port_Value+0x88>
		case(Port_D):*Copy_Pu8Port_Value = PIND;break;
    34f4:	e0 e3       	ldi	r30, 0x30	; 48
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	80 81       	ld	r24, Z
    34fa:	ea 81       	ldd	r30, Y+2	; 0x02
    34fc:	fb 81       	ldd	r31, Y+3	; 0x03
    34fe:	80 83       	st	Z, r24
	}
}
    3500:	0f 90       	pop	r0
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	0f 90       	pop	r0
    3508:	0f 90       	pop	r0
    350a:	cf 91       	pop	r28
    350c:	df 91       	pop	r29
    350e:	08 95       	ret

00003510 <ADC_VidInitialization>:


/*------------------------- OPTIONS FOR ADC -------------------------*/

void ADC_VidInitialization ()
{
    3510:	df 93       	push	r29
    3512:	cf 93       	push	r28
    3514:	cd b7       	in	r28, 0x3d	; 61
    3516:	de b7       	in	r29, 0x3e	; 62
	/*SELECT REFERANCE*/
	#if Voltage_Referace == Internal
		Clear_Bit(ADMUX, ADMUX_REFS0);
		Clear_Bit(ADMUX, ADMUX_REFS1);
	#elif Voltage_Referace == AREF
		Set_Bit(ADMUX, ADMUX_REFS0);
    3518:	a7 e2       	ldi	r26, 0x27	; 39
    351a:	b0 e0       	ldi	r27, 0x00	; 0
    351c:	e7 e2       	ldi	r30, 0x27	; 39
    351e:	f0 e0       	ldi	r31, 0x00	; 0
    3520:	80 81       	ld	r24, Z
    3522:	80 64       	ori	r24, 0x40	; 64
    3524:	8c 93       	st	X, r24
		Clear_Bit(ADMUX, ADMUX_REFS1);
    3526:	a7 e2       	ldi	r26, 0x27	; 39
    3528:	b0 e0       	ldi	r27, 0x00	; 0
    352a:	e7 e2       	ldi	r30, 0x27	; 39
    352c:	f0 e0       	ldi	r31, 0x00	; 0
    352e:	80 81       	ld	r24, Z
    3530:	8f 77       	andi	r24, 0x7F	; 127
    3532:	8c 93       	st	X, r24
	#else
			#warning (" Wrong Configuration !!")
	#endif

		/*ACTIVE ADJUST*/
	Set_Bit(ADMUX, ADMUX_ADLAR);
    3534:	a7 e2       	ldi	r26, 0x27	; 39
    3536:	b0 e0       	ldi	r27, 0x00	; 0
    3538:	e7 e2       	ldi	r30, 0x27	; 39
    353a:	f0 e0       	ldi	r31, 0x00	; 0
    353c:	80 81       	ld	r24, Z
    353e:	80 62       	ori	r24, 0x20	; 32
    3540:	8c 93       	st	X, r24
	#elif ADC_Prescaler == Prescaler_32
		Set_Bit(ADCSRA,ADCSRA_ADPS0);
		Clear_Bit(ADCSRA,ADCSRA_ADPS1);
		Set_Bit(ADCSRA,ADCSRA_ADPS2);
	#elif ADC_Prescaler == Prescaler_128
		Set_Bit(ADCSRA,ADCSRA_ADPS0);
    3542:	a6 e2       	ldi	r26, 0x26	; 38
    3544:	b0 e0       	ldi	r27, 0x00	; 0
    3546:	e6 e2       	ldi	r30, 0x26	; 38
    3548:	f0 e0       	ldi	r31, 0x00	; 0
    354a:	80 81       	ld	r24, Z
    354c:	81 60       	ori	r24, 0x01	; 1
    354e:	8c 93       	st	X, r24
		Set_Bit(ADCSRA,ADCSRA_ADPS1);
    3550:	a6 e2       	ldi	r26, 0x26	; 38
    3552:	b0 e0       	ldi	r27, 0x00	; 0
    3554:	e6 e2       	ldi	r30, 0x26	; 38
    3556:	f0 e0       	ldi	r31, 0x00	; 0
    3558:	80 81       	ld	r24, Z
    355a:	82 60       	ori	r24, 0x02	; 2
    355c:	8c 93       	st	X, r24
		Set_Bit(ADCSRA,ADCSRA_ADPS2);
    355e:	a6 e2       	ldi	r26, 0x26	; 38
    3560:	b0 e0       	ldi	r27, 0x00	; 0
    3562:	e6 e2       	ldi	r30, 0x26	; 38
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	80 81       	ld	r24, Z
    3568:	84 60       	ori	r24, 0x04	; 4
    356a:	8c 93       	st	X, r24
	#else
		#warning (" Wrong Configuration !! ")
	#endif

		/*ENABLE*/
	Set_Bit(ADCSRA,ADCSRA_ADEN);
    356c:	a6 e2       	ldi	r26, 0x26	; 38
    356e:	b0 e0       	ldi	r27, 0x00	; 0
    3570:	e6 e2       	ldi	r30, 0x26	; 38
    3572:	f0 e0       	ldi	r31, 0x00	; 0
    3574:	80 81       	ld	r24, Z
    3576:	80 68       	ori	r24, 0x80	; 128
    3578:	8c 93       	st	X, r24
}
    357a:	cf 91       	pop	r28
    357c:	df 91       	pop	r29
    357e:	08 95       	ret

00003580 <ADC_VidSync_Reading>:


/*------------------------- Sync_Reading -------------------------*/

void ADC_VidSync_Reading (u8 Copy_u8Channel,u8 *Copy_u8Reading)
{
    3580:	df 93       	push	r29
    3582:	cf 93       	push	r28
    3584:	00 d0       	rcall	.+0      	; 0x3586 <ADC_VidSync_Reading+0x6>
    3586:	0f 92       	push	r0
    3588:	cd b7       	in	r28, 0x3d	; 61
    358a:	de b7       	in	r29, 0x3e	; 62
    358c:	89 83       	std	Y+1, r24	; 0x01
    358e:	7b 83       	std	Y+3, r23	; 0x03
    3590:	6a 83       	std	Y+2, r22	; 0x02
	ADMUX &= 0xE0;
    3592:	a7 e2       	ldi	r26, 0x27	; 39
    3594:	b0 e0       	ldi	r27, 0x00	; 0
    3596:	e7 e2       	ldi	r30, 0x27	; 39
    3598:	f0 e0       	ldi	r31, 0x00	; 0
    359a:	80 81       	ld	r24, Z
    359c:	80 7e       	andi	r24, 0xE0	; 224
    359e:	8c 93       	st	X, r24
	ADMUX = ADMUX | Copy_u8Channel;
    35a0:	a7 e2       	ldi	r26, 0x27	; 39
    35a2:	b0 e0       	ldi	r27, 0x00	; 0
    35a4:	e7 e2       	ldi	r30, 0x27	; 39
    35a6:	f0 e0       	ldi	r31, 0x00	; 0
    35a8:	90 81       	ld	r25, Z
    35aa:	89 81       	ldd	r24, Y+1	; 0x01
    35ac:	89 2b       	or	r24, r25
    35ae:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADSC);			/* Start Conversion */
    35b0:	a6 e2       	ldi	r26, 0x26	; 38
    35b2:	b0 e0       	ldi	r27, 0x00	; 0
    35b4:	e6 e2       	ldi	r30, 0x26	; 38
    35b6:	f0 e0       	ldi	r31, 0x00	; 0
    35b8:	80 81       	ld	r24, Z
    35ba:	80 64       	ori	r24, 0x40	; 64
    35bc:	8c 93       	st	X, r24
	while(!Get_Bit(ADCSRA,ADCSRA_ADIF));
    35be:	e6 e2       	ldi	r30, 0x26	; 38
    35c0:	f0 e0       	ldi	r31, 0x00	; 0
    35c2:	80 81       	ld	r24, Z
    35c4:	82 95       	swap	r24
    35c6:	8f 70       	andi	r24, 0x0F	; 15
    35c8:	88 2f       	mov	r24, r24
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	81 70       	andi	r24, 0x01	; 1
    35ce:	90 70       	andi	r25, 0x00	; 0
    35d0:	00 97       	sbiw	r24, 0x00	; 0
    35d2:	a9 f3       	breq	.-22     	; 0x35be <ADC_VidSync_Reading+0x3e>
	Set_Bit(ADCSRA,ADCSRA_ADIF);
    35d4:	a6 e2       	ldi	r26, 0x26	; 38
    35d6:	b0 e0       	ldi	r27, 0x00	; 0
    35d8:	e6 e2       	ldi	r30, 0x26	; 38
    35da:	f0 e0       	ldi	r31, 0x00	; 0
    35dc:	80 81       	ld	r24, Z
    35de:	80 61       	ori	r24, 0x10	; 16
    35e0:	8c 93       	st	X, r24
	*Copy_u8Reading=ADCH;
    35e2:	e5 e2       	ldi	r30, 0x25	; 37
    35e4:	f0 e0       	ldi	r31, 0x00	; 0
    35e6:	80 81       	ld	r24, Z
    35e8:	ea 81       	ldd	r30, Y+2	; 0x02
    35ea:	fb 81       	ldd	r31, Y+3	; 0x03
    35ec:	80 83       	st	Z, r24
}
    35ee:	0f 90       	pop	r0
    35f0:	0f 90       	pop	r0
    35f2:	0f 90       	pop	r0
    35f4:	cf 91       	pop	r28
    35f6:	df 91       	pop	r29
    35f8:	08 95       	ret

000035fa <ADC_VidAsync_Reading>:


/*------------------------- ASync Reading -------------------------*/

void ADC_VidAsync_Reading (u8 Copy_u8Channel,u8 *Copy_u8Reading)
{
    35fa:	df 93       	push	r29
    35fc:	cf 93       	push	r28
    35fe:	00 d0       	rcall	.+0      	; 0x3600 <ADC_VidAsync_Reading+0x6>
    3600:	0f 92       	push	r0
    3602:	cd b7       	in	r28, 0x3d	; 61
    3604:	de b7       	in	r29, 0x3e	; 62
    3606:	89 83       	std	Y+1, r24	; 0x01
    3608:	7b 83       	std	Y+3, r23	; 0x03
    360a:	6a 83       	std	Y+2, r22	; 0x02
	ADMUX &= 0xE0;
    360c:	a7 e2       	ldi	r26, 0x27	; 39
    360e:	b0 e0       	ldi	r27, 0x00	; 0
    3610:	e7 e2       	ldi	r30, 0x27	; 39
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	80 81       	ld	r24, Z
    3616:	80 7e       	andi	r24, 0xE0	; 224
    3618:	8c 93       	st	X, r24
	ADMUX = ADMUX | Copy_u8Channel;
    361a:	a7 e2       	ldi	r26, 0x27	; 39
    361c:	b0 e0       	ldi	r27, 0x00	; 0
    361e:	e7 e2       	ldi	r30, 0x27	; 39
    3620:	f0 e0       	ldi	r31, 0x00	; 0
    3622:	90 81       	ld	r25, Z
    3624:	89 81       	ldd	r24, Y+1	; 0x01
    3626:	89 2b       	or	r24, r25
    3628:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADSC);			/* Start Conversion */
    362a:	a6 e2       	ldi	r26, 0x26	; 38
    362c:	b0 e0       	ldi	r27, 0x00	; 0
    362e:	e6 e2       	ldi	r30, 0x26	; 38
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	80 81       	ld	r24, Z
    3634:	80 64       	ori	r24, 0x40	; 64
    3636:	8c 93       	st	X, r24
	while(!Get_Bit(ADCSRA,ADCSRA_ADIF));
    3638:	e6 e2       	ldi	r30, 0x26	; 38
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	80 81       	ld	r24, Z
    363e:	82 95       	swap	r24
    3640:	8f 70       	andi	r24, 0x0F	; 15
    3642:	88 2f       	mov	r24, r24
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	81 70       	andi	r24, 0x01	; 1
    3648:	90 70       	andi	r25, 0x00	; 0
    364a:	00 97       	sbiw	r24, 0x00	; 0
    364c:	a9 f3       	breq	.-22     	; 0x3638 <ADC_VidAsync_Reading+0x3e>
	Set_Bit(ADCSRA,ADCSRA_ADIF);
    364e:	a6 e2       	ldi	r26, 0x26	; 38
    3650:	b0 e0       	ldi	r27, 0x00	; 0
    3652:	e6 e2       	ldi	r30, 0x26	; 38
    3654:	f0 e0       	ldi	r31, 0x00	; 0
    3656:	80 81       	ld	r24, Z
    3658:	80 61       	ori	r24, 0x10	; 16
    365a:	8c 93       	st	X, r24
	*Copy_u8Reading=ADCH;
    365c:	e5 e2       	ldi	r30, 0x25	; 37
    365e:	f0 e0       	ldi	r31, 0x00	; 0
    3660:	80 81       	ld	r24, Z
    3662:	ea 81       	ldd	r30, Y+2	; 0x02
    3664:	fb 81       	ldd	r31, Y+3	; 0x03
    3666:	80 83       	st	Z, r24
}
    3668:	0f 90       	pop	r0
    366a:	0f 90       	pop	r0
    366c:	0f 90       	pop	r0
    366e:	cf 91       	pop	r28
    3670:	df 91       	pop	r29
    3672:	08 95       	ret

00003674 <ADC_VidAsync_Mapped_Reading>:


/*------------------------- Mapped Reading -------------------------*/

void ADC_VidAsync_Mapped_Reading (u8 Copy_u8Channel,u32 Copy_u8Min,u32 Copy_u8Max,u32 * Copy_u32Reading)
{
    3674:	ef 92       	push	r14
    3676:	ff 92       	push	r15
    3678:	0f 93       	push	r16
    367a:	1f 93       	push	r17
    367c:	df 93       	push	r29
    367e:	cf 93       	push	r28
    3680:	cd b7       	in	r28, 0x3d	; 61
    3682:	de b7       	in	r29, 0x3e	; 62
    3684:	2b 97       	sbiw	r28, 0x0b	; 11
    3686:	0f b6       	in	r0, 0x3f	; 63
    3688:	f8 94       	cli
    368a:	de bf       	out	0x3e, r29	; 62
    368c:	0f be       	out	0x3f, r0	; 63
    368e:	cd bf       	out	0x3d, r28	; 61
    3690:	89 83       	std	Y+1, r24	; 0x01
    3692:	4a 83       	std	Y+2, r20	; 0x02
    3694:	5b 83       	std	Y+3, r21	; 0x03
    3696:	6c 83       	std	Y+4, r22	; 0x04
    3698:	7d 83       	std	Y+5, r23	; 0x05
    369a:	0e 83       	std	Y+6, r16	; 0x06
    369c:	1f 83       	std	Y+7, r17	; 0x07
    369e:	28 87       	std	Y+8, r18	; 0x08
    36a0:	39 87       	std	Y+9, r19	; 0x09
    36a2:	fb 86       	std	Y+11, r15	; 0x0b
    36a4:	ea 86       	std	Y+10, r14	; 0x0a
	ADMUX &= 0xE0;
    36a6:	a7 e2       	ldi	r26, 0x27	; 39
    36a8:	b0 e0       	ldi	r27, 0x00	; 0
    36aa:	e7 e2       	ldi	r30, 0x27	; 39
    36ac:	f0 e0       	ldi	r31, 0x00	; 0
    36ae:	80 81       	ld	r24, Z
    36b0:	80 7e       	andi	r24, 0xE0	; 224
    36b2:	8c 93       	st	X, r24
	ADMUX = ADMUX | Copy_u8Channel;
    36b4:	a7 e2       	ldi	r26, 0x27	; 39
    36b6:	b0 e0       	ldi	r27, 0x00	; 0
    36b8:	e7 e2       	ldi	r30, 0x27	; 39
    36ba:	f0 e0       	ldi	r31, 0x00	; 0
    36bc:	90 81       	ld	r25, Z
    36be:	89 81       	ldd	r24, Y+1	; 0x01
    36c0:	89 2b       	or	r24, r25
    36c2:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADSC);			/* Start Conversion */
    36c4:	a6 e2       	ldi	r26, 0x26	; 38
    36c6:	b0 e0       	ldi	r27, 0x00	; 0
    36c8:	e6 e2       	ldi	r30, 0x26	; 38
    36ca:	f0 e0       	ldi	r31, 0x00	; 0
    36cc:	80 81       	ld	r24, Z
    36ce:	80 64       	ori	r24, 0x40	; 64
    36d0:	8c 93       	st	X, r24
	while(!Get_Bit(ADCSRA,ADCSRA_ADIF));
    36d2:	e6 e2       	ldi	r30, 0x26	; 38
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	80 81       	ld	r24, Z
    36d8:	82 95       	swap	r24
    36da:	8f 70       	andi	r24, 0x0F	; 15
    36dc:	88 2f       	mov	r24, r24
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	81 70       	andi	r24, 0x01	; 1
    36e2:	90 70       	andi	r25, 0x00	; 0
    36e4:	00 97       	sbiw	r24, 0x00	; 0
    36e6:	a9 f3       	breq	.-22     	; 0x36d2 <ADC_VidAsync_Mapped_Reading+0x5e>
	Set_Bit(ADCSRA,ADCSRA_ADIF);
    36e8:	a6 e2       	ldi	r26, 0x26	; 38
    36ea:	b0 e0       	ldi	r27, 0x00	; 0
    36ec:	e6 e2       	ldi	r30, 0x26	; 38
    36ee:	f0 e0       	ldi	r31, 0x00	; 0
    36f0:	80 81       	ld	r24, Z
    36f2:	80 61       	ori	r24, 0x10	; 16
    36f4:	8c 93       	st	X, r24
	* Copy_u32Reading=((((ADCH)*(Copy_u8Max-Copy_u8Min))/(255UL))+Copy_u8Min);
    36f6:	e5 e2       	ldi	r30, 0x25	; 37
    36f8:	f0 e0       	ldi	r31, 0x00	; 0
    36fa:	80 81       	ld	r24, Z
    36fc:	e8 2e       	mov	r14, r24
    36fe:	ff 24       	eor	r15, r15
    3700:	00 e0       	ldi	r16, 0x00	; 0
    3702:	10 e0       	ldi	r17, 0x00	; 0
    3704:	2e 81       	ldd	r18, Y+6	; 0x06
    3706:	3f 81       	ldd	r19, Y+7	; 0x07
    3708:	48 85       	ldd	r20, Y+8	; 0x08
    370a:	59 85       	ldd	r21, Y+9	; 0x09
    370c:	8a 81       	ldd	r24, Y+2	; 0x02
    370e:	9b 81       	ldd	r25, Y+3	; 0x03
    3710:	ac 81       	ldd	r26, Y+4	; 0x04
    3712:	bd 81       	ldd	r27, Y+5	; 0x05
    3714:	28 1b       	sub	r18, r24
    3716:	39 0b       	sbc	r19, r25
    3718:	4a 0b       	sbc	r20, r26
    371a:	5b 0b       	sbc	r21, r27
    371c:	c8 01       	movw	r24, r16
    371e:	b7 01       	movw	r22, r14
    3720:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	2f ef       	ldi	r18, 0xFF	; 255
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	40 e0       	ldi	r20, 0x00	; 0
    372e:	50 e0       	ldi	r21, 0x00	; 0
    3730:	bc 01       	movw	r22, r24
    3732:	cd 01       	movw	r24, r26
    3734:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodsi4>
    3738:	da 01       	movw	r26, r20
    373a:	c9 01       	movw	r24, r18
    373c:	9c 01       	movw	r18, r24
    373e:	ad 01       	movw	r20, r26
    3740:	8a 81       	ldd	r24, Y+2	; 0x02
    3742:	9b 81       	ldd	r25, Y+3	; 0x03
    3744:	ac 81       	ldd	r26, Y+4	; 0x04
    3746:	bd 81       	ldd	r27, Y+5	; 0x05
    3748:	82 0f       	add	r24, r18
    374a:	93 1f       	adc	r25, r19
    374c:	a4 1f       	adc	r26, r20
    374e:	b5 1f       	adc	r27, r21
    3750:	ea 85       	ldd	r30, Y+10	; 0x0a
    3752:	fb 85       	ldd	r31, Y+11	; 0x0b
    3754:	80 83       	st	Z, r24
    3756:	91 83       	std	Z+1, r25	; 0x01
    3758:	a2 83       	std	Z+2, r26	; 0x02
    375a:	b3 83       	std	Z+3, r27	; 0x03
}
    375c:	2b 96       	adiw	r28, 0x0b	; 11
    375e:	0f b6       	in	r0, 0x3f	; 63
    3760:	f8 94       	cli
    3762:	de bf       	out	0x3e, r29	; 62
    3764:	0f be       	out	0x3f, r0	; 63
    3766:	cd bf       	out	0x3d, r28	; 61
    3768:	cf 91       	pop	r28
    376a:	df 91       	pop	r29
    376c:	1f 91       	pop	r17
    376e:	0f 91       	pop	r16
    3770:	ff 90       	pop	r15
    3772:	ef 90       	pop	r14
    3774:	08 95       	ret

00003776 <main>:
void User_Vid(void);
void New_User_Vid(void);
void Active_Cars_Vid(void);

void main(void)
{
    3776:	df 93       	push	r29
    3778:	cf 93       	push	r28
    377a:	cd b7       	in	r28, 0x3d	; 61
    377c:	de b7       	in	r29, 0x3e	; 62
	LCD_VidInitialization();
    377e:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_VidInitialization>
	Keypad_VidInitialization();
    3782:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <Keypad_VidInitialization>
	while(TRUE)
	{
		User_Select_u8();
    3786:	0e 94 c6 1b 	call	0x378c	; 0x378c <User_Select_u8>
    378a:	fd cf       	rjmp	.-6      	; 0x3786 <main+0x10>

0000378c <User_Select_u8>:
	}
}

u8 User_Select_u8(void)
{
    378c:	df 93       	push	r29
    378e:	cf 93       	push	r28
    3790:	cd b7       	in	r28, 0x3d	; 61
    3792:	de b7       	in	r29, 0x3e	; 62
    3794:	c2 55       	subi	r28, 0x52	; 82
    3796:	d0 40       	sbci	r29, 0x00	; 0
    3798:	0f b6       	in	r0, 0x3f	; 63
    379a:	f8 94       	cli
    379c:	de bf       	out	0x3e, r29	; 62
    379e:	0f be       	out	0x3f, r0	; 63
    37a0:	cd bf       	out	0x3d, r28	; 61
	u8 Option1[16]="1)Parking";
    37a2:	9e 01       	movw	r18, r28
    37a4:	2e 5e       	subi	r18, 0xEE	; 238
    37a6:	3f 4f       	sbci	r19, 0xFF	; 255
    37a8:	26 96       	adiw	r28, 0x06	; 6
    37aa:	3f af       	std	Y+63, r19	; 0x3f
    37ac:	2e af       	std	Y+62, r18	; 0x3e
    37ae:	26 97       	sbiw	r28, 0x06	; 6
    37b0:	81 e7       	ldi	r24, 0x71	; 113
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	28 96       	adiw	r28, 0x08	; 8
    37b6:	9f af       	std	Y+63, r25	; 0x3f
    37b8:	8e af       	std	Y+62, r24	; 0x3e
    37ba:	28 97       	sbiw	r28, 0x08	; 8
    37bc:	9a e0       	ldi	r25, 0x0A	; 10
    37be:	29 96       	adiw	r28, 0x09	; 9
    37c0:	9f af       	std	Y+63, r25	; 0x3f
    37c2:	29 97       	sbiw	r28, 0x09	; 9
    37c4:	28 96       	adiw	r28, 0x08	; 8
    37c6:	ae ad       	ldd	r26, Y+62	; 0x3e
    37c8:	bf ad       	ldd	r27, Y+63	; 0x3f
    37ca:	28 97       	sbiw	r28, 0x08	; 8
    37cc:	0c 90       	ld	r0, X
    37ce:	28 96       	adiw	r28, 0x08	; 8
    37d0:	ee ad       	ldd	r30, Y+62	; 0x3e
    37d2:	ff ad       	ldd	r31, Y+63	; 0x3f
    37d4:	28 97       	sbiw	r28, 0x08	; 8
    37d6:	31 96       	adiw	r30, 0x01	; 1
    37d8:	28 96       	adiw	r28, 0x08	; 8
    37da:	ff af       	std	Y+63, r31	; 0x3f
    37dc:	ee af       	std	Y+62, r30	; 0x3e
    37de:	28 97       	sbiw	r28, 0x08	; 8
    37e0:	26 96       	adiw	r28, 0x06	; 6
    37e2:	ae ad       	ldd	r26, Y+62	; 0x3e
    37e4:	bf ad       	ldd	r27, Y+63	; 0x3f
    37e6:	26 97       	sbiw	r28, 0x06	; 6
    37e8:	0c 92       	st	X, r0
    37ea:	26 96       	adiw	r28, 0x06	; 6
    37ec:	ee ad       	ldd	r30, Y+62	; 0x3e
    37ee:	ff ad       	ldd	r31, Y+63	; 0x3f
    37f0:	26 97       	sbiw	r28, 0x06	; 6
    37f2:	31 96       	adiw	r30, 0x01	; 1
    37f4:	26 96       	adiw	r28, 0x06	; 6
    37f6:	ff af       	std	Y+63, r31	; 0x3f
    37f8:	ee af       	std	Y+62, r30	; 0x3e
    37fa:	26 97       	sbiw	r28, 0x06	; 6
    37fc:	29 96       	adiw	r28, 0x09	; 9
    37fe:	ff ad       	ldd	r31, Y+63	; 0x3f
    3800:	29 97       	sbiw	r28, 0x09	; 9
    3802:	f1 50       	subi	r31, 0x01	; 1
    3804:	29 96       	adiw	r28, 0x09	; 9
    3806:	ff af       	std	Y+63, r31	; 0x3f
    3808:	29 97       	sbiw	r28, 0x09	; 9
    380a:	29 96       	adiw	r28, 0x09	; 9
    380c:	2f ad       	ldd	r18, Y+63	; 0x3f
    380e:	29 97       	sbiw	r28, 0x09	; 9
    3810:	22 23       	and	r18, r18
    3812:	c1 f6       	brne	.-80     	; 0x37c4 <User_Select_u8+0x38>
    3814:	86 e0       	ldi	r24, 0x06	; 6
    3816:	fe 01       	movw	r30, r28
    3818:	7c 96       	adiw	r30, 0x1c	; 28
    381a:	df 01       	movw	r26, r30
    381c:	28 2f       	mov	r18, r24
    381e:	1d 92       	st	X+, r1
    3820:	2a 95       	dec	r18
    3822:	e9 f7       	brne	.-6      	; 0x381e <User_Select_u8+0x92>
	u8 Option2[16]="2)Admin";
    3824:	ce 01       	movw	r24, r28
    3826:	82 96       	adiw	r24, 0x22	; 34
    3828:	2b 96       	adiw	r28, 0x0b	; 11
    382a:	9f af       	std	Y+63, r25	; 0x3f
    382c:	8e af       	std	Y+62, r24	; 0x3e
    382e:	2b 97       	sbiw	r28, 0x0b	; 11
    3830:	a1 e8       	ldi	r26, 0x81	; 129
    3832:	b0 e0       	ldi	r27, 0x00	; 0
    3834:	2d 96       	adiw	r28, 0x0d	; 13
    3836:	bf af       	std	Y+63, r27	; 0x3f
    3838:	ae af       	std	Y+62, r26	; 0x3e
    383a:	2d 97       	sbiw	r28, 0x0d	; 13
    383c:	b8 e0       	ldi	r27, 0x08	; 8
    383e:	2e 96       	adiw	r28, 0x0e	; 14
    3840:	bf af       	std	Y+63, r27	; 0x3f
    3842:	2e 97       	sbiw	r28, 0x0e	; 14
    3844:	2d 96       	adiw	r28, 0x0d	; 13
    3846:	ee ad       	ldd	r30, Y+62	; 0x3e
    3848:	ff ad       	ldd	r31, Y+63	; 0x3f
    384a:	2d 97       	sbiw	r28, 0x0d	; 13
    384c:	00 80       	ld	r0, Z
    384e:	2d 96       	adiw	r28, 0x0d	; 13
    3850:	2e ad       	ldd	r18, Y+62	; 0x3e
    3852:	3f ad       	ldd	r19, Y+63	; 0x3f
    3854:	2d 97       	sbiw	r28, 0x0d	; 13
    3856:	2f 5f       	subi	r18, 0xFF	; 255
    3858:	3f 4f       	sbci	r19, 0xFF	; 255
    385a:	2d 96       	adiw	r28, 0x0d	; 13
    385c:	3f af       	std	Y+63, r19	; 0x3f
    385e:	2e af       	std	Y+62, r18	; 0x3e
    3860:	2d 97       	sbiw	r28, 0x0d	; 13
    3862:	2b 96       	adiw	r28, 0x0b	; 11
    3864:	ae ad       	ldd	r26, Y+62	; 0x3e
    3866:	bf ad       	ldd	r27, Y+63	; 0x3f
    3868:	2b 97       	sbiw	r28, 0x0b	; 11
    386a:	0c 92       	st	X, r0
    386c:	2b 96       	adiw	r28, 0x0b	; 11
    386e:	ee ad       	ldd	r30, Y+62	; 0x3e
    3870:	ff ad       	ldd	r31, Y+63	; 0x3f
    3872:	2b 97       	sbiw	r28, 0x0b	; 11
    3874:	31 96       	adiw	r30, 0x01	; 1
    3876:	2b 96       	adiw	r28, 0x0b	; 11
    3878:	ff af       	std	Y+63, r31	; 0x3f
    387a:	ee af       	std	Y+62, r30	; 0x3e
    387c:	2b 97       	sbiw	r28, 0x0b	; 11
    387e:	2e 96       	adiw	r28, 0x0e	; 14
    3880:	ff ad       	ldd	r31, Y+63	; 0x3f
    3882:	2e 97       	sbiw	r28, 0x0e	; 14
    3884:	f1 50       	subi	r31, 0x01	; 1
    3886:	2e 96       	adiw	r28, 0x0e	; 14
    3888:	ff af       	std	Y+63, r31	; 0x3f
    388a:	2e 97       	sbiw	r28, 0x0e	; 14
    388c:	2e 96       	adiw	r28, 0x0e	; 14
    388e:	2f ad       	ldd	r18, Y+63	; 0x3f
    3890:	2e 97       	sbiw	r28, 0x0e	; 14
    3892:	22 23       	and	r18, r18
    3894:	b9 f6       	brne	.-82     	; 0x3844 <User_Select_u8+0xb8>
    3896:	88 e0       	ldi	r24, 0x08	; 8
    3898:	fe 01       	movw	r30, r28
    389a:	ba 96       	adiw	r30, 0x2a	; 42
    389c:	df 01       	movw	r26, r30
    389e:	28 2f       	mov	r18, r24
    38a0:	1d 92       	st	X+, r1
    38a2:	2a 95       	dec	r18
    38a4:	e9 f7       	brne	.-6      	; 0x38a0 <User_Select_u8+0x114>
	u8 Wrong[16]="Wrong Input..";
    38a6:	ce 01       	movw	r24, r28
    38a8:	c2 96       	adiw	r24, 0x32	; 50
    38aa:	60 96       	adiw	r28, 0x10	; 16
    38ac:	9f af       	std	Y+63, r25	; 0x3f
    38ae:	8e af       	std	Y+62, r24	; 0x3e
    38b0:	60 97       	sbiw	r28, 0x10	; 16
    38b2:	a1 e9       	ldi	r26, 0x91	; 145
    38b4:	b0 e0       	ldi	r27, 0x00	; 0
    38b6:	62 96       	adiw	r28, 0x12	; 18
    38b8:	bf af       	std	Y+63, r27	; 0x3f
    38ba:	ae af       	std	Y+62, r26	; 0x3e
    38bc:	62 97       	sbiw	r28, 0x12	; 18
    38be:	be e0       	ldi	r27, 0x0E	; 14
    38c0:	63 96       	adiw	r28, 0x13	; 19
    38c2:	bf af       	std	Y+63, r27	; 0x3f
    38c4:	63 97       	sbiw	r28, 0x13	; 19
    38c6:	62 96       	adiw	r28, 0x12	; 18
    38c8:	ee ad       	ldd	r30, Y+62	; 0x3e
    38ca:	ff ad       	ldd	r31, Y+63	; 0x3f
    38cc:	62 97       	sbiw	r28, 0x12	; 18
    38ce:	00 80       	ld	r0, Z
    38d0:	62 96       	adiw	r28, 0x12	; 18
    38d2:	2e ad       	ldd	r18, Y+62	; 0x3e
    38d4:	3f ad       	ldd	r19, Y+63	; 0x3f
    38d6:	62 97       	sbiw	r28, 0x12	; 18
    38d8:	2f 5f       	subi	r18, 0xFF	; 255
    38da:	3f 4f       	sbci	r19, 0xFF	; 255
    38dc:	62 96       	adiw	r28, 0x12	; 18
    38de:	3f af       	std	Y+63, r19	; 0x3f
    38e0:	2e af       	std	Y+62, r18	; 0x3e
    38e2:	62 97       	sbiw	r28, 0x12	; 18
    38e4:	60 96       	adiw	r28, 0x10	; 16
    38e6:	ae ad       	ldd	r26, Y+62	; 0x3e
    38e8:	bf ad       	ldd	r27, Y+63	; 0x3f
    38ea:	60 97       	sbiw	r28, 0x10	; 16
    38ec:	0c 92       	st	X, r0
    38ee:	60 96       	adiw	r28, 0x10	; 16
    38f0:	ee ad       	ldd	r30, Y+62	; 0x3e
    38f2:	ff ad       	ldd	r31, Y+63	; 0x3f
    38f4:	60 97       	sbiw	r28, 0x10	; 16
    38f6:	31 96       	adiw	r30, 0x01	; 1
    38f8:	60 96       	adiw	r28, 0x10	; 16
    38fa:	ff af       	std	Y+63, r31	; 0x3f
    38fc:	ee af       	std	Y+62, r30	; 0x3e
    38fe:	60 97       	sbiw	r28, 0x10	; 16
    3900:	63 96       	adiw	r28, 0x13	; 19
    3902:	ff ad       	ldd	r31, Y+63	; 0x3f
    3904:	63 97       	sbiw	r28, 0x13	; 19
    3906:	f1 50       	subi	r31, 0x01	; 1
    3908:	63 96       	adiw	r28, 0x13	; 19
    390a:	ff af       	std	Y+63, r31	; 0x3f
    390c:	63 97       	sbiw	r28, 0x13	; 19
    390e:	63 96       	adiw	r28, 0x13	; 19
    3910:	2f ad       	ldd	r18, Y+63	; 0x3f
    3912:	63 97       	sbiw	r28, 0x13	; 19
    3914:	22 23       	and	r18, r18
    3916:	b9 f6       	brne	.-82     	; 0x38c6 <User_Select_u8+0x13a>
    3918:	fe 01       	movw	r30, r28
    391a:	e0 5c       	subi	r30, 0xC0	; 192
    391c:	ff 4f       	sbci	r31, 0xFF	; 255
    391e:	11 82       	std	Z+1, r1	; 0x01
    3920:	10 82       	st	Z, r1
	u8 global_flag=TRUE;
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	89 8b       	std	Y+17, r24	; 0x11
	u8 password_flag=TRUE;
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	88 8b       	std	Y+16, r24	; 0x10
	u8 data=0;
    392a:	1f 86       	std	Y+15, r1	; 0x0f
    392c:	b2 c0       	rjmp	.+356    	; 0x3a92 <User_Select_u8+0x306>
	while(global_flag)
	{
		LCD_VidClear();
    392e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_VidClear>
		LCD_VidSet_Position(0,0);
    3932:	80 e0       	ldi	r24, 0x00	; 0
    3934:	60 e0       	ldi	r22, 0x00	; 0
    3936:	0e 94 96 0c 	call	0x192c	; 0x192c <LCD_VidSet_Position>
		LCD_VidSend_String(Option1);
    393a:	ce 01       	movw	r24, r28
    393c:	42 96       	adiw	r24, 0x12	; 18
    393e:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_VidSend_String>
		LCD_VidSet_Position(0,1);
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	61 e0       	ldi	r22, 0x01	; 1
    3946:	0e 94 96 0c 	call	0x192c	; 0x192c <LCD_VidSet_Position>
		LCD_VidSend_String(Option2);
    394a:	ce 01       	movw	r24, r28
    394c:	82 96       	adiw	r24, 0x22	; 34
    394e:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_VidSend_String>
		data=Keypad_u8Get_Pressed_Key_Wait()-48;
    3952:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <Keypad_u8Get_Pressed_Key_Wait>
    3956:	80 53       	subi	r24, 0x30	; 48
    3958:	8f 87       	std	Y+15, r24	; 0x0f
		switch(data)
    395a:	8f 85       	ldd	r24, Y+15	; 0x0f
    395c:	a8 2f       	mov	r26, r24
    395e:	b0 e0       	ldi	r27, 0x00	; 0
    3960:	24 96       	adiw	r28, 0x04	; 4
    3962:	bf af       	std	Y+63, r27	; 0x3f
    3964:	ae af       	std	Y+62, r26	; 0x3e
    3966:	24 97       	sbiw	r28, 0x04	; 4
    3968:	24 96       	adiw	r28, 0x04	; 4
    396a:	ee ad       	ldd	r30, Y+62	; 0x3e
    396c:	ff ad       	ldd	r31, Y+63	; 0x3f
    396e:	24 97       	sbiw	r28, 0x04	; 4
    3970:	e1 30       	cpi	r30, 0x01	; 1
    3972:	f1 05       	cpc	r31, r1
    3974:	41 f0       	breq	.+16     	; 0x3986 <User_Select_u8+0x1fa>
    3976:	24 96       	adiw	r28, 0x04	; 4
    3978:	2e ad       	ldd	r18, Y+62	; 0x3e
    397a:	3f ad       	ldd	r19, Y+63	; 0x3f
    397c:	24 97       	sbiw	r28, 0x04	; 4
    397e:	22 30       	cpi	r18, 0x02	; 2
    3980:	31 05       	cpc	r19, r1
    3982:	21 f0       	breq	.+8      	; 0x398c <User_Select_u8+0x200>
    3984:	0e c0       	rjmp	.+28     	; 0x39a2 <User_Select_u8+0x216>
		{
			case(ONE):User_Vid();break;
    3986:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <User_Vid>
    398a:	83 c0       	rjmp	.+262    	; 0x3a92 <User_Select_u8+0x306>
			case(TWO):password_flag=Password_u8();while(password_flag)password_flag=Admin_u8();break;
    398c:	0e 94 47 24 	call	0x488e	; 0x488e <Password_u8>
    3990:	88 8b       	std	Y+16, r24	; 0x10
    3992:	03 c0       	rjmp	.+6      	; 0x399a <User_Select_u8+0x20e>
    3994:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <Admin_u8>
    3998:	88 8b       	std	Y+16, r24	; 0x10
    399a:	88 89       	ldd	r24, Y+16	; 0x10
    399c:	88 23       	and	r24, r24
    399e:	d1 f7       	brne	.-12     	; 0x3994 <User_Select_u8+0x208>
    39a0:	78 c0       	rjmp	.+240    	; 0x3a92 <User_Select_u8+0x306>
			default:LCD_VidClear();LCD_VidSend_String(Wrong);_delay_ms(1000);
    39a2:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_VidClear>
    39a6:	ce 01       	movw	r24, r28
    39a8:	c2 96       	adiw	r24, 0x32	; 50
    39aa:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_VidSend_String>
    39ae:	80 e0       	ldi	r24, 0x00	; 0
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	aa e7       	ldi	r26, 0x7A	; 122
    39b4:	b4 e4       	ldi	r27, 0x44	; 68
    39b6:	8b 87       	std	Y+11, r24	; 0x0b
    39b8:	9c 87       	std	Y+12, r25	; 0x0c
    39ba:	ad 87       	std	Y+13, r26	; 0x0d
    39bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39be:	6b 85       	ldd	r22, Y+11	; 0x0b
    39c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    39c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    39c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    39c6:	20 e0       	ldi	r18, 0x00	; 0
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	4a e7       	ldi	r20, 0x7A	; 122
    39cc:	53 e4       	ldi	r21, 0x43	; 67
    39ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d2:	dc 01       	movw	r26, r24
    39d4:	cb 01       	movw	r24, r22
    39d6:	8f 83       	std	Y+7, r24	; 0x07
    39d8:	98 87       	std	Y+8, r25	; 0x08
    39da:	a9 87       	std	Y+9, r26	; 0x09
    39dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39de:	6f 81       	ldd	r22, Y+7	; 0x07
    39e0:	78 85       	ldd	r23, Y+8	; 0x08
    39e2:	89 85       	ldd	r24, Y+9	; 0x09
    39e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e6:	20 e0       	ldi	r18, 0x00	; 0
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	40 e8       	ldi	r20, 0x80	; 128
    39ec:	5f e3       	ldi	r21, 0x3F	; 63
    39ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39f2:	88 23       	and	r24, r24
    39f4:	2c f4       	brge	.+10     	; 0x3a00 <User_Select_u8+0x274>
		__ticks = 1;
    39f6:	81 e0       	ldi	r24, 0x01	; 1
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	9e 83       	std	Y+6, r25	; 0x06
    39fc:	8d 83       	std	Y+5, r24	; 0x05
    39fe:	3f c0       	rjmp	.+126    	; 0x3a7e <User_Select_u8+0x2f2>
	else if (__tmp > 65535)
    3a00:	6f 81       	ldd	r22, Y+7	; 0x07
    3a02:	78 85       	ldd	r23, Y+8	; 0x08
    3a04:	89 85       	ldd	r24, Y+9	; 0x09
    3a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a08:	20 e0       	ldi	r18, 0x00	; 0
    3a0a:	3f ef       	ldi	r19, 0xFF	; 255
    3a0c:	4f e7       	ldi	r20, 0x7F	; 127
    3a0e:	57 e4       	ldi	r21, 0x47	; 71
    3a10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a14:	18 16       	cp	r1, r24
    3a16:	4c f5       	brge	.+82     	; 0x3a6a <User_Select_u8+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	40 e2       	ldi	r20, 0x20	; 32
    3a26:	51 e4       	ldi	r21, 0x41	; 65
    3a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2c:	dc 01       	movw	r26, r24
    3a2e:	cb 01       	movw	r24, r22
    3a30:	bc 01       	movw	r22, r24
    3a32:	cd 01       	movw	r24, r26
    3a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a38:	dc 01       	movw	r26, r24
    3a3a:	cb 01       	movw	r24, r22
    3a3c:	9e 83       	std	Y+6, r25	; 0x06
    3a3e:	8d 83       	std	Y+5, r24	; 0x05
    3a40:	0f c0       	rjmp	.+30     	; 0x3a60 <User_Select_u8+0x2d4>
    3a42:	89 e1       	ldi	r24, 0x19	; 25
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	9c 83       	std	Y+4, r25	; 0x04
    3a48:	8b 83       	std	Y+3, r24	; 0x03
    3a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a4e:	01 97       	sbiw	r24, 0x01	; 1
    3a50:	f1 f7       	brne	.-4      	; 0x3a4e <User_Select_u8+0x2c2>
    3a52:	9c 83       	std	Y+4, r25	; 0x04
    3a54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a56:	8d 81       	ldd	r24, Y+5	; 0x05
    3a58:	9e 81       	ldd	r25, Y+6	; 0x06
    3a5a:	01 97       	sbiw	r24, 0x01	; 1
    3a5c:	9e 83       	std	Y+6, r25	; 0x06
    3a5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a60:	8d 81       	ldd	r24, Y+5	; 0x05
    3a62:	9e 81       	ldd	r25, Y+6	; 0x06
    3a64:	00 97       	sbiw	r24, 0x00	; 0
    3a66:	69 f7       	brne	.-38     	; 0x3a42 <User_Select_u8+0x2b6>
    3a68:	14 c0       	rjmp	.+40     	; 0x3a92 <User_Select_u8+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a6c:	78 85       	ldd	r23, Y+8	; 0x08
    3a6e:	89 85       	ldd	r24, Y+9	; 0x09
    3a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a76:	dc 01       	movw	r26, r24
    3a78:	cb 01       	movw	r24, r22
    3a7a:	9e 83       	std	Y+6, r25	; 0x06
    3a7c:	8d 83       	std	Y+5, r24	; 0x05
    3a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a80:	9e 81       	ldd	r25, Y+6	; 0x06
    3a82:	9a 83       	std	Y+2, r25	; 0x02
    3a84:	89 83       	std	Y+1, r24	; 0x01
    3a86:	89 81       	ldd	r24, Y+1	; 0x01
    3a88:	9a 81       	ldd	r25, Y+2	; 0x02
    3a8a:	01 97       	sbiw	r24, 0x01	; 1
    3a8c:	f1 f7       	brne	.-4      	; 0x3a8a <User_Select_u8+0x2fe>
    3a8e:	9a 83       	std	Y+2, r25	; 0x02
    3a90:	89 83       	std	Y+1, r24	; 0x01
	u8 Option2[16]="2)Admin";
	u8 Wrong[16]="Wrong Input..";
	u8 global_flag=TRUE;
	u8 password_flag=TRUE;
	u8 data=0;
	while(global_flag)
    3a92:	89 89       	ldd	r24, Y+17	; 0x11
    3a94:	88 23       	and	r24, r24
    3a96:	09 f0       	breq	.+2      	; 0x3a9a <User_Select_u8+0x30e>
    3a98:	4a cf       	rjmp	.-364    	; 0x392e <User_Select_u8+0x1a2>
			case(ONE):User_Vid();break;
			case(TWO):password_flag=Password_u8();while(password_flag)password_flag=Admin_u8();break;
			default:LCD_VidClear();LCD_VidSend_String(Wrong);_delay_ms(1000);
		}
	}
	return TRUE;
    3a9a:	81 e0       	ldi	r24, 0x01	; 1
}
    3a9c:	ce 5a       	subi	r28, 0xAE	; 174
    3a9e:	df 4f       	sbci	r29, 0xFF	; 255
    3aa0:	0f b6       	in	r0, 0x3f	; 63
    3aa2:	f8 94       	cli
    3aa4:	de bf       	out	0x3e, r29	; 62
    3aa6:	0f be       	out	0x3f, r0	; 63
    3aa8:	cd bf       	out	0x3d, r28	; 61
    3aaa:	cf 91       	pop	r28
    3aac:	df 91       	pop	r29
    3aae:	08 95       	ret

00003ab0 <Admin_u8>:


u8 Admin_u8(void)
{
    3ab0:	df 93       	push	r29
    3ab2:	cf 93       	push	r28
    3ab4:	cd b7       	in	r28, 0x3d	; 61
    3ab6:	de b7       	in	r29, 0x3e	; 62
    3ab8:	c1 55       	subi	r28, 0x51	; 81
    3aba:	d0 40       	sbci	r29, 0x00	; 0
    3abc:	0f b6       	in	r0, 0x3f	; 63
    3abe:	f8 94       	cli
    3ac0:	de bf       	out	0x3e, r29	; 62
    3ac2:	0f be       	out	0x3f, r0	; 63
    3ac4:	cd bf       	out	0x3d, r28	; 61
	u8 input;
	u8 flag=TRUE;
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
    3ac8:	8f 87       	std	Y+15, r24	; 0x0f
	u8 Option1[16]="1) Active Cars";
    3aca:	9e 01       	movw	r18, r28
    3acc:	2f 5e       	subi	r18, 0xEF	; 239
    3ace:	3f 4f       	sbci	r19, 0xFF	; 255
    3ad0:	25 96       	adiw	r28, 0x05	; 5
    3ad2:	3f af       	std	Y+63, r19	; 0x3f
    3ad4:	2e af       	std	Y+62, r18	; 0x3e
    3ad6:	25 97       	sbiw	r28, 0x05	; 5
    3ad8:	81 ea       	ldi	r24, 0xA1	; 161
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	27 96       	adiw	r28, 0x07	; 7
    3ade:	9f af       	std	Y+63, r25	; 0x3f
    3ae0:	8e af       	std	Y+62, r24	; 0x3e
    3ae2:	27 97       	sbiw	r28, 0x07	; 7
    3ae4:	9f e0       	ldi	r25, 0x0F	; 15
    3ae6:	28 96       	adiw	r28, 0x08	; 8
    3ae8:	9f af       	std	Y+63, r25	; 0x3f
    3aea:	28 97       	sbiw	r28, 0x08	; 8
    3aec:	27 96       	adiw	r28, 0x07	; 7
    3aee:	ee ad       	ldd	r30, Y+62	; 0x3e
    3af0:	ff ad       	ldd	r31, Y+63	; 0x3f
    3af2:	27 97       	sbiw	r28, 0x07	; 7
    3af4:	00 80       	ld	r0, Z
    3af6:	27 96       	adiw	r28, 0x07	; 7
    3af8:	2e ad       	ldd	r18, Y+62	; 0x3e
    3afa:	3f ad       	ldd	r19, Y+63	; 0x3f
    3afc:	27 97       	sbiw	r28, 0x07	; 7
    3afe:	2f 5f       	subi	r18, 0xFF	; 255
    3b00:	3f 4f       	sbci	r19, 0xFF	; 255
    3b02:	27 96       	adiw	r28, 0x07	; 7
    3b04:	3f af       	std	Y+63, r19	; 0x3f
    3b06:	2e af       	std	Y+62, r18	; 0x3e
    3b08:	27 97       	sbiw	r28, 0x07	; 7
    3b0a:	25 96       	adiw	r28, 0x05	; 5
    3b0c:	ee ad       	ldd	r30, Y+62	; 0x3e
    3b0e:	ff ad       	ldd	r31, Y+63	; 0x3f
    3b10:	25 97       	sbiw	r28, 0x05	; 5
    3b12:	00 82       	st	Z, r0
    3b14:	25 96       	adiw	r28, 0x05	; 5
    3b16:	2e ad       	ldd	r18, Y+62	; 0x3e
    3b18:	3f ad       	ldd	r19, Y+63	; 0x3f
    3b1a:	25 97       	sbiw	r28, 0x05	; 5
    3b1c:	2f 5f       	subi	r18, 0xFF	; 255
    3b1e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b20:	25 96       	adiw	r28, 0x05	; 5
    3b22:	3f af       	std	Y+63, r19	; 0x3f
    3b24:	2e af       	std	Y+62, r18	; 0x3e
    3b26:	25 97       	sbiw	r28, 0x05	; 5
    3b28:	28 96       	adiw	r28, 0x08	; 8
    3b2a:	3f ad       	ldd	r19, Y+63	; 0x3f
    3b2c:	28 97       	sbiw	r28, 0x08	; 8
    3b2e:	31 50       	subi	r19, 0x01	; 1
    3b30:	28 96       	adiw	r28, 0x08	; 8
    3b32:	3f af       	std	Y+63, r19	; 0x3f
    3b34:	28 97       	sbiw	r28, 0x08	; 8
    3b36:	28 96       	adiw	r28, 0x08	; 8
    3b38:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b3a:	28 97       	sbiw	r28, 0x08	; 8
    3b3c:	88 23       	and	r24, r24
    3b3e:	b1 f6       	brne	.-84     	; 0x3aec <Admin_u8+0x3c>
    3b40:	18 a2       	std	Y+32, r1	; 0x20
	u8 Option2[16]="2) All Cars";
    3b42:	fe 01       	movw	r30, r28
    3b44:	b1 96       	adiw	r30, 0x21	; 33
    3b46:	2a 96       	adiw	r28, 0x0a	; 10
    3b48:	ff af       	std	Y+63, r31	; 0x3f
    3b4a:	ee af       	std	Y+62, r30	; 0x3e
    3b4c:	2a 97       	sbiw	r28, 0x0a	; 10
    3b4e:	21 eb       	ldi	r18, 0xB1	; 177
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	2c 96       	adiw	r28, 0x0c	; 12
    3b54:	3f af       	std	Y+63, r19	; 0x3f
    3b56:	2e af       	std	Y+62, r18	; 0x3e
    3b58:	2c 97       	sbiw	r28, 0x0c	; 12
    3b5a:	3c e0       	ldi	r19, 0x0C	; 12
    3b5c:	2d 96       	adiw	r28, 0x0d	; 13
    3b5e:	3f af       	std	Y+63, r19	; 0x3f
    3b60:	2d 97       	sbiw	r28, 0x0d	; 13
    3b62:	2c 96       	adiw	r28, 0x0c	; 12
    3b64:	ee ad       	ldd	r30, Y+62	; 0x3e
    3b66:	ff ad       	ldd	r31, Y+63	; 0x3f
    3b68:	2c 97       	sbiw	r28, 0x0c	; 12
    3b6a:	00 80       	ld	r0, Z
    3b6c:	2c 96       	adiw	r28, 0x0c	; 12
    3b6e:	2e ad       	ldd	r18, Y+62	; 0x3e
    3b70:	3f ad       	ldd	r19, Y+63	; 0x3f
    3b72:	2c 97       	sbiw	r28, 0x0c	; 12
    3b74:	2f 5f       	subi	r18, 0xFF	; 255
    3b76:	3f 4f       	sbci	r19, 0xFF	; 255
    3b78:	2c 96       	adiw	r28, 0x0c	; 12
    3b7a:	3f af       	std	Y+63, r19	; 0x3f
    3b7c:	2e af       	std	Y+62, r18	; 0x3e
    3b7e:	2c 97       	sbiw	r28, 0x0c	; 12
    3b80:	2a 96       	adiw	r28, 0x0a	; 10
    3b82:	ee ad       	ldd	r30, Y+62	; 0x3e
    3b84:	ff ad       	ldd	r31, Y+63	; 0x3f
    3b86:	2a 97       	sbiw	r28, 0x0a	; 10
    3b88:	00 82       	st	Z, r0
    3b8a:	2a 96       	adiw	r28, 0x0a	; 10
    3b8c:	2e ad       	ldd	r18, Y+62	; 0x3e
    3b8e:	3f ad       	ldd	r19, Y+63	; 0x3f
    3b90:	2a 97       	sbiw	r28, 0x0a	; 10
    3b92:	2f 5f       	subi	r18, 0xFF	; 255
    3b94:	3f 4f       	sbci	r19, 0xFF	; 255
    3b96:	2a 96       	adiw	r28, 0x0a	; 10
    3b98:	3f af       	std	Y+63, r19	; 0x3f
    3b9a:	2e af       	std	Y+62, r18	; 0x3e
    3b9c:	2a 97       	sbiw	r28, 0x0a	; 10
    3b9e:	2d 96       	adiw	r28, 0x0d	; 13
    3ba0:	3f ad       	ldd	r19, Y+63	; 0x3f
    3ba2:	2d 97       	sbiw	r28, 0x0d	; 13
    3ba4:	31 50       	subi	r19, 0x01	; 1
    3ba6:	2d 96       	adiw	r28, 0x0d	; 13
    3ba8:	3f af       	std	Y+63, r19	; 0x3f
    3baa:	2d 97       	sbiw	r28, 0x0d	; 13
    3bac:	2d 96       	adiw	r28, 0x0d	; 13
    3bae:	8f ad       	ldd	r24, Y+63	; 0x3f
    3bb0:	2d 97       	sbiw	r28, 0x0d	; 13
    3bb2:	88 23       	and	r24, r24
    3bb4:	b1 f6       	brne	.-84     	; 0x3b62 <Admin_u8+0xb2>
    3bb6:	1d a6       	std	Y+45, r1	; 0x2d
    3bb8:	1e a6       	std	Y+46, r1	; 0x2e
    3bba:	1f a6       	std	Y+47, r1	; 0x2f
    3bbc:	18 aa       	std	Y+48, r1	; 0x30
	u8 Wrong[16]="Wrong Input!!";
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	f1 96       	adiw	r30, 0x31	; 49
    3bc2:	2f 96       	adiw	r28, 0x0f	; 15
    3bc4:	ff af       	std	Y+63, r31	; 0x3f
    3bc6:	ee af       	std	Y+62, r30	; 0x3e
    3bc8:	2f 97       	sbiw	r28, 0x0f	; 15
    3bca:	21 ec       	ldi	r18, 0xC1	; 193
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	61 96       	adiw	r28, 0x11	; 17
    3bd0:	3f af       	std	Y+63, r19	; 0x3f
    3bd2:	2e af       	std	Y+62, r18	; 0x3e
    3bd4:	61 97       	sbiw	r28, 0x11	; 17
    3bd6:	3e e0       	ldi	r19, 0x0E	; 14
    3bd8:	62 96       	adiw	r28, 0x12	; 18
    3bda:	3f af       	std	Y+63, r19	; 0x3f
    3bdc:	62 97       	sbiw	r28, 0x12	; 18
    3bde:	61 96       	adiw	r28, 0x11	; 17
    3be0:	ee ad       	ldd	r30, Y+62	; 0x3e
    3be2:	ff ad       	ldd	r31, Y+63	; 0x3f
    3be4:	61 97       	sbiw	r28, 0x11	; 17
    3be6:	00 80       	ld	r0, Z
    3be8:	61 96       	adiw	r28, 0x11	; 17
    3bea:	2e ad       	ldd	r18, Y+62	; 0x3e
    3bec:	3f ad       	ldd	r19, Y+63	; 0x3f
    3bee:	61 97       	sbiw	r28, 0x11	; 17
    3bf0:	2f 5f       	subi	r18, 0xFF	; 255
    3bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    3bf4:	61 96       	adiw	r28, 0x11	; 17
    3bf6:	3f af       	std	Y+63, r19	; 0x3f
    3bf8:	2e af       	std	Y+62, r18	; 0x3e
    3bfa:	61 97       	sbiw	r28, 0x11	; 17
    3bfc:	2f 96       	adiw	r28, 0x0f	; 15
    3bfe:	ee ad       	ldd	r30, Y+62	; 0x3e
    3c00:	ff ad       	ldd	r31, Y+63	; 0x3f
    3c02:	2f 97       	sbiw	r28, 0x0f	; 15
    3c04:	00 82       	st	Z, r0
    3c06:	2f 96       	adiw	r28, 0x0f	; 15
    3c08:	2e ad       	ldd	r18, Y+62	; 0x3e
    3c0a:	3f ad       	ldd	r19, Y+63	; 0x3f
    3c0c:	2f 97       	sbiw	r28, 0x0f	; 15
    3c0e:	2f 5f       	subi	r18, 0xFF	; 255
    3c10:	3f 4f       	sbci	r19, 0xFF	; 255
    3c12:	2f 96       	adiw	r28, 0x0f	; 15
    3c14:	3f af       	std	Y+63, r19	; 0x3f
    3c16:	2e af       	std	Y+62, r18	; 0x3e
    3c18:	2f 97       	sbiw	r28, 0x0f	; 15
    3c1a:	62 96       	adiw	r28, 0x12	; 18
    3c1c:	3f ad       	ldd	r19, Y+63	; 0x3f
    3c1e:	62 97       	sbiw	r28, 0x12	; 18
    3c20:	31 50       	subi	r19, 0x01	; 1
    3c22:	62 96       	adiw	r28, 0x12	; 18
    3c24:	3f af       	std	Y+63, r19	; 0x3f
    3c26:	62 97       	sbiw	r28, 0x12	; 18
    3c28:	62 96       	adiw	r28, 0x12	; 18
    3c2a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c2c:	62 97       	sbiw	r28, 0x12	; 18
    3c2e:	88 23       	and	r24, r24
    3c30:	b1 f6       	brne	.-84     	; 0x3bde <Admin_u8+0x12e>
    3c32:	fe 01       	movw	r30, r28
    3c34:	ff 96       	adiw	r30, 0x3f	; 63
    3c36:	11 82       	std	Z+1, r1	; 0x01
    3c38:	10 82       	st	Z, r1
    3c3a:	ac c0       	rjmp	.+344    	; 0x3d94 <Admin_u8+0x2e4>
	while(flag)
	{
		LCD_VidClear();
    3c3c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_VidClear>
		LCD_VidSend_String(Option1);
    3c40:	ce 01       	movw	r24, r28
    3c42:	41 96       	adiw	r24, 0x11	; 17
    3c44:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_VidSend_String>
		LCD_VidSet_Position(0,1);
    3c48:	80 e0       	ldi	r24, 0x00	; 0
    3c4a:	61 e0       	ldi	r22, 0x01	; 1
    3c4c:	0e 94 96 0c 	call	0x192c	; 0x192c <LCD_VidSet_Position>
		LCD_VidSend_String(Option2);
    3c50:	ce 01       	movw	r24, r28
    3c52:	81 96       	adiw	r24, 0x21	; 33
    3c54:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_VidSend_String>
		input=Keypad_u8Get_Pressed_Key_Wait()-48;
    3c58:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <Keypad_u8Get_Pressed_Key_Wait>
    3c5c:	80 53       	subi	r24, 0x30	; 48
    3c5e:	88 8b       	std	Y+16, r24	; 0x10
		switch(input)
    3c60:	88 89       	ldd	r24, Y+16	; 0x10
    3c62:	e8 2f       	mov	r30, r24
    3c64:	f0 e0       	ldi	r31, 0x00	; 0
    3c66:	23 96       	adiw	r28, 0x03	; 3
    3c68:	ff af       	std	Y+63, r31	; 0x3f
    3c6a:	ee af       	std	Y+62, r30	; 0x3e
    3c6c:	23 97       	sbiw	r28, 0x03	; 3
    3c6e:	23 96       	adiw	r28, 0x03	; 3
    3c70:	2e ad       	ldd	r18, Y+62	; 0x3e
    3c72:	3f ad       	ldd	r19, Y+63	; 0x3f
    3c74:	23 97       	sbiw	r28, 0x03	; 3
    3c76:	22 30       	cpi	r18, 0x02	; 2
    3c78:	31 05       	cpc	r19, r1
    3c7a:	09 f4       	brne	.+2      	; 0x3c7e <Admin_u8+0x1ce>
    3c7c:	8b c0       	rjmp	.+278    	; 0x3d94 <Admin_u8+0x2e4>
    3c7e:	23 96       	adiw	r28, 0x03	; 3
    3c80:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c82:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c84:	23 97       	sbiw	r28, 0x03	; 3
    3c86:	8f 31       	cpi	r24, 0x1F	; 31
    3c88:	91 05       	cpc	r25, r1
    3c8a:	51 f0       	breq	.+20     	; 0x3ca0 <Admin_u8+0x1f0>
    3c8c:	23 96       	adiw	r28, 0x03	; 3
    3c8e:	ee ad       	ldd	r30, Y+62	; 0x3e
    3c90:	ff ad       	ldd	r31, Y+63	; 0x3f
    3c92:	23 97       	sbiw	r28, 0x03	; 3
    3c94:	e1 30       	cpi	r30, 0x01	; 1
    3c96:	f1 05       	cpc	r31, r1
    3c98:	29 f4       	brne	.+10     	; 0x3ca4 <Admin_u8+0x1f4>
		{
			case(ONE):Active_Cars_Vid();break;
    3c9a:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <Active_Cars_Vid>
    3c9e:	7a c0       	rjmp	.+244    	; 0x3d94 <Admin_u8+0x2e4>
			case(TWO):break;
			case('O'-48):flag=FALSE;break;
    3ca0:	1f 86       	std	Y+15, r1	; 0x0f
    3ca2:	78 c0       	rjmp	.+240    	; 0x3d94 <Admin_u8+0x2e4>
			default:LCD_VidClear();LCD_VidSend_String(Wrong);_delay_ms(1000);
    3ca4:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_VidClear>
    3ca8:	ce 01       	movw	r24, r28
    3caa:	c1 96       	adiw	r24, 0x31	; 49
    3cac:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_VidSend_String>
    3cb0:	80 e0       	ldi	r24, 0x00	; 0
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	aa e7       	ldi	r26, 0x7A	; 122
    3cb6:	b4 e4       	ldi	r27, 0x44	; 68
    3cb8:	8b 87       	std	Y+11, r24	; 0x0b
    3cba:	9c 87       	std	Y+12, r25	; 0x0c
    3cbc:	ad 87       	std	Y+13, r26	; 0x0d
    3cbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cc8:	20 e0       	ldi	r18, 0x00	; 0
    3cca:	30 e0       	ldi	r19, 0x00	; 0
    3ccc:	4a e7       	ldi	r20, 0x7A	; 122
    3cce:	53 e4       	ldi	r21, 0x43	; 67
    3cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd4:	dc 01       	movw	r26, r24
    3cd6:	cb 01       	movw	r24, r22
    3cd8:	8f 83       	std	Y+7, r24	; 0x07
    3cda:	98 87       	std	Y+8, r25	; 0x08
    3cdc:	a9 87       	std	Y+9, r26	; 0x09
    3cde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ce0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ce2:	78 85       	ldd	r23, Y+8	; 0x08
    3ce4:	89 85       	ldd	r24, Y+9	; 0x09
    3ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	40 e8       	ldi	r20, 0x80	; 128
    3cee:	5f e3       	ldi	r21, 0x3F	; 63
    3cf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cf4:	88 23       	and	r24, r24
    3cf6:	2c f4       	brge	.+10     	; 0x3d02 <Admin_u8+0x252>
		__ticks = 1;
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	9e 83       	std	Y+6, r25	; 0x06
    3cfe:	8d 83       	std	Y+5, r24	; 0x05
    3d00:	3f c0       	rjmp	.+126    	; 0x3d80 <Admin_u8+0x2d0>
	else if (__tmp > 65535)
    3d02:	6f 81       	ldd	r22, Y+7	; 0x07
    3d04:	78 85       	ldd	r23, Y+8	; 0x08
    3d06:	89 85       	ldd	r24, Y+9	; 0x09
    3d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	3f ef       	ldi	r19, 0xFF	; 255
    3d0e:	4f e7       	ldi	r20, 0x7F	; 127
    3d10:	57 e4       	ldi	r21, 0x47	; 71
    3d12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d16:	18 16       	cp	r1, r24
    3d18:	4c f5       	brge	.+82     	; 0x3d6c <Admin_u8+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d22:	20 e0       	ldi	r18, 0x00	; 0
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	40 e2       	ldi	r20, 0x20	; 32
    3d28:	51 e4       	ldi	r21, 0x41	; 65
    3d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2e:	dc 01       	movw	r26, r24
    3d30:	cb 01       	movw	r24, r22
    3d32:	bc 01       	movw	r22, r24
    3d34:	cd 01       	movw	r24, r26
    3d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	cb 01       	movw	r24, r22
    3d3e:	9e 83       	std	Y+6, r25	; 0x06
    3d40:	8d 83       	std	Y+5, r24	; 0x05
    3d42:	0f c0       	rjmp	.+30     	; 0x3d62 <Admin_u8+0x2b2>
    3d44:	89 e1       	ldi	r24, 0x19	; 25
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	9c 83       	std	Y+4, r25	; 0x04
    3d4a:	8b 83       	std	Y+3, r24	; 0x03
    3d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d50:	01 97       	sbiw	r24, 0x01	; 1
    3d52:	f1 f7       	brne	.-4      	; 0x3d50 <Admin_u8+0x2a0>
    3d54:	9c 83       	std	Y+4, r25	; 0x04
    3d56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d58:	8d 81       	ldd	r24, Y+5	; 0x05
    3d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d5c:	01 97       	sbiw	r24, 0x01	; 1
    3d5e:	9e 83       	std	Y+6, r25	; 0x06
    3d60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d62:	8d 81       	ldd	r24, Y+5	; 0x05
    3d64:	9e 81       	ldd	r25, Y+6	; 0x06
    3d66:	00 97       	sbiw	r24, 0x00	; 0
    3d68:	69 f7       	brne	.-38     	; 0x3d44 <Admin_u8+0x294>
    3d6a:	14 c0       	rjmp	.+40     	; 0x3d94 <Admin_u8+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d6e:	78 85       	ldd	r23, Y+8	; 0x08
    3d70:	89 85       	ldd	r24, Y+9	; 0x09
    3d72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d78:	dc 01       	movw	r26, r24
    3d7a:	cb 01       	movw	r24, r22
    3d7c:	9e 83       	std	Y+6, r25	; 0x06
    3d7e:	8d 83       	std	Y+5, r24	; 0x05
    3d80:	8d 81       	ldd	r24, Y+5	; 0x05
    3d82:	9e 81       	ldd	r25, Y+6	; 0x06
    3d84:	9a 83       	std	Y+2, r25	; 0x02
    3d86:	89 83       	std	Y+1, r24	; 0x01
    3d88:	89 81       	ldd	r24, Y+1	; 0x01
    3d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8c:	01 97       	sbiw	r24, 0x01	; 1
    3d8e:	f1 f7       	brne	.-4      	; 0x3d8c <Admin_u8+0x2dc>
    3d90:	9a 83       	std	Y+2, r25	; 0x02
    3d92:	89 83       	std	Y+1, r24	; 0x01
	u8 input;
	u8 flag=TRUE;
	u8 Option1[16]="1) Active Cars";
	u8 Option2[16]="2) All Cars";
	u8 Wrong[16]="Wrong Input!!";
	while(flag)
    3d94:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d96:	88 23       	and	r24, r24
    3d98:	09 f0       	breq	.+2      	; 0x3d9c <Admin_u8+0x2ec>
    3d9a:	50 cf       	rjmp	.-352    	; 0x3c3c <Admin_u8+0x18c>
			case(TWO):break;
			case('O'-48):flag=FALSE;break;
			default:LCD_VidClear();LCD_VidSend_String(Wrong);_delay_ms(1000);
		}
	}
	return flag;
    3d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3d9e:	cf 5a       	subi	r28, 0xAF	; 175
    3da0:	df 4f       	sbci	r29, 0xFF	; 255
    3da2:	0f b6       	in	r0, 0x3f	; 63
    3da4:	f8 94       	cli
    3da6:	de bf       	out	0x3e, r29	; 62
    3da8:	0f be       	out	0x3f, r0	; 63
    3daa:	cd bf       	out	0x3d, r28	; 61
    3dac:	cf 91       	pop	r28
    3dae:	df 91       	pop	r29
    3db0:	08 95       	ret

00003db2 <Active_Cars_Vid>:

void Active_Cars_Vid(void)
{
    3db2:	df 93       	push	r29
    3db4:	cf 93       	push	r28
    3db6:	cd b7       	in	r28, 0x3d	; 61
    3db8:	de b7       	in	r29, 0x3e	; 62
    3dba:	c2 57       	subi	r28, 0x72	; 114
    3dbc:	d0 40       	sbci	r29, 0x00	; 0
    3dbe:	0f b6       	in	r0, 0x3f	; 63
    3dc0:	f8 94       	cli
    3dc2:	de bf       	out	0x3e, r29	; 62
    3dc4:	0f be       	out	0x3f, r0	; 63
    3dc6:	cd bf       	out	0x3d, r28	; 61
	u8 Option1[16]="ID : ";
    3dc8:	ce 01       	movw	r24, r28
    3dca:	80 96       	adiw	r24, 0x20	; 32
    3dcc:	a6 96       	adiw	r28, 0x26	; 38
    3dce:	9f af       	std	Y+63, r25	; 0x3f
    3dd0:	8e af       	std	Y+62, r24	; 0x3e
    3dd2:	a6 97       	sbiw	r28, 0x26	; 38
    3dd4:	a1 ed       	ldi	r26, 0xD1	; 209
    3dd6:	b0 e0       	ldi	r27, 0x00	; 0
    3dd8:	a8 96       	adiw	r28, 0x28	; 40
    3dda:	bf af       	std	Y+63, r27	; 0x3f
    3ddc:	ae af       	std	Y+62, r26	; 0x3e
    3dde:	a8 97       	sbiw	r28, 0x28	; 40
    3de0:	b6 e0       	ldi	r27, 0x06	; 6
    3de2:	a9 96       	adiw	r28, 0x29	; 41
    3de4:	bf af       	std	Y+63, r27	; 0x3f
    3de6:	a9 97       	sbiw	r28, 0x29	; 41
    3de8:	a8 96       	adiw	r28, 0x28	; 40
    3dea:	ee ad       	ldd	r30, Y+62	; 0x3e
    3dec:	ff ad       	ldd	r31, Y+63	; 0x3f
    3dee:	a8 97       	sbiw	r28, 0x28	; 40
    3df0:	00 80       	ld	r0, Z
    3df2:	a8 96       	adiw	r28, 0x28	; 40
    3df4:	8e ad       	ldd	r24, Y+62	; 0x3e
    3df6:	9f ad       	ldd	r25, Y+63	; 0x3f
    3df8:	a8 97       	sbiw	r28, 0x28	; 40
    3dfa:	01 96       	adiw	r24, 0x01	; 1
    3dfc:	a8 96       	adiw	r28, 0x28	; 40
    3dfe:	9f af       	std	Y+63, r25	; 0x3f
    3e00:	8e af       	std	Y+62, r24	; 0x3e
    3e02:	a8 97       	sbiw	r28, 0x28	; 40
    3e04:	a6 96       	adiw	r28, 0x26	; 38
    3e06:	ae ad       	ldd	r26, Y+62	; 0x3e
    3e08:	bf ad       	ldd	r27, Y+63	; 0x3f
    3e0a:	a6 97       	sbiw	r28, 0x26	; 38
    3e0c:	0c 92       	st	X, r0
    3e0e:	a6 96       	adiw	r28, 0x26	; 38
    3e10:	ee ad       	ldd	r30, Y+62	; 0x3e
    3e12:	ff ad       	ldd	r31, Y+63	; 0x3f
    3e14:	a6 97       	sbiw	r28, 0x26	; 38
    3e16:	31 96       	adiw	r30, 0x01	; 1
    3e18:	a6 96       	adiw	r28, 0x26	; 38
    3e1a:	ff af       	std	Y+63, r31	; 0x3f
    3e1c:	ee af       	std	Y+62, r30	; 0x3e
    3e1e:	a6 97       	sbiw	r28, 0x26	; 38
    3e20:	a9 96       	adiw	r28, 0x29	; 41
    3e22:	ff ad       	ldd	r31, Y+63	; 0x3f
    3e24:	a9 97       	sbiw	r28, 0x29	; 41
    3e26:	f1 50       	subi	r31, 0x01	; 1
    3e28:	a9 96       	adiw	r28, 0x29	; 41
    3e2a:	ff af       	std	Y+63, r31	; 0x3f
    3e2c:	a9 97       	sbiw	r28, 0x29	; 41
    3e2e:	a9 96       	adiw	r28, 0x29	; 41
    3e30:	8f ad       	ldd	r24, Y+63	; 0x3f
    3e32:	a9 97       	sbiw	r28, 0x29	; 41
    3e34:	88 23       	and	r24, r24
    3e36:	c1 f6       	brne	.-80     	; 0x3de8 <Active_Cars_Vid+0x36>
    3e38:	8a e0       	ldi	r24, 0x0A	; 10
    3e3a:	fe 01       	movw	r30, r28
    3e3c:	b6 96       	adiw	r30, 0x26	; 38
    3e3e:	df 01       	movw	r26, r30
    3e40:	98 2f       	mov	r25, r24
    3e42:	1d 92       	st	X+, r1
    3e44:	9a 95       	dec	r25
    3e46:	e9 f7       	brne	.-6      	; 0x3e42 <Active_Cars_Vid+0x90>
	u8 Option2[16]="Time : ";
    3e48:	de 01       	movw	r26, r28
    3e4a:	d0 96       	adiw	r26, 0x30	; 48
    3e4c:	ab 96       	adiw	r28, 0x2b	; 43
    3e4e:	bf af       	std	Y+63, r27	; 0x3f
    3e50:	ae af       	std	Y+62, r26	; 0x3e
    3e52:	ab 97       	sbiw	r28, 0x2b	; 43
    3e54:	e1 ee       	ldi	r30, 0xE1	; 225
    3e56:	f0 e0       	ldi	r31, 0x00	; 0
    3e58:	ad 96       	adiw	r28, 0x2d	; 45
    3e5a:	ff af       	std	Y+63, r31	; 0x3f
    3e5c:	ee af       	std	Y+62, r30	; 0x3e
    3e5e:	ad 97       	sbiw	r28, 0x2d	; 45
    3e60:	f8 e0       	ldi	r31, 0x08	; 8
    3e62:	ae 96       	adiw	r28, 0x2e	; 46
    3e64:	ff af       	std	Y+63, r31	; 0x3f
    3e66:	ae 97       	sbiw	r28, 0x2e	; 46
    3e68:	ad 96       	adiw	r28, 0x2d	; 45
    3e6a:	ae ad       	ldd	r26, Y+62	; 0x3e
    3e6c:	bf ad       	ldd	r27, Y+63	; 0x3f
    3e6e:	ad 97       	sbiw	r28, 0x2d	; 45
    3e70:	0c 90       	ld	r0, X
    3e72:	ad 96       	adiw	r28, 0x2d	; 45
    3e74:	ee ad       	ldd	r30, Y+62	; 0x3e
    3e76:	ff ad       	ldd	r31, Y+63	; 0x3f
    3e78:	ad 97       	sbiw	r28, 0x2d	; 45
    3e7a:	31 96       	adiw	r30, 0x01	; 1
    3e7c:	ad 96       	adiw	r28, 0x2d	; 45
    3e7e:	ff af       	std	Y+63, r31	; 0x3f
    3e80:	ee af       	std	Y+62, r30	; 0x3e
    3e82:	ad 97       	sbiw	r28, 0x2d	; 45
    3e84:	ab 96       	adiw	r28, 0x2b	; 43
    3e86:	ae ad       	ldd	r26, Y+62	; 0x3e
    3e88:	bf ad       	ldd	r27, Y+63	; 0x3f
    3e8a:	ab 97       	sbiw	r28, 0x2b	; 43
    3e8c:	0c 92       	st	X, r0
    3e8e:	ab 96       	adiw	r28, 0x2b	; 43
    3e90:	ee ad       	ldd	r30, Y+62	; 0x3e
    3e92:	ff ad       	ldd	r31, Y+63	; 0x3f
    3e94:	ab 97       	sbiw	r28, 0x2b	; 43
    3e96:	31 96       	adiw	r30, 0x01	; 1
    3e98:	ab 96       	adiw	r28, 0x2b	; 43
    3e9a:	ff af       	std	Y+63, r31	; 0x3f
    3e9c:	ee af       	std	Y+62, r30	; 0x3e
    3e9e:	ab 97       	sbiw	r28, 0x2b	; 43
    3ea0:	ae 96       	adiw	r28, 0x2e	; 46
    3ea2:	ff ad       	ldd	r31, Y+63	; 0x3f
    3ea4:	ae 97       	sbiw	r28, 0x2e	; 46
    3ea6:	f1 50       	subi	r31, 0x01	; 1
    3ea8:	ae 96       	adiw	r28, 0x2e	; 46
    3eaa:	ff af       	std	Y+63, r31	; 0x3f
    3eac:	ae 97       	sbiw	r28, 0x2e	; 46
    3eae:	ae 96       	adiw	r28, 0x2e	; 46
    3eb0:	8f ad       	ldd	r24, Y+63	; 0x3f
    3eb2:	ae 97       	sbiw	r28, 0x2e	; 46
    3eb4:	88 23       	and	r24, r24
    3eb6:	c1 f6       	brne	.-80     	; 0x3e68 <Active_Cars_Vid+0xb6>
    3eb8:	88 e0       	ldi	r24, 0x08	; 8
    3eba:	fe 01       	movw	r30, r28
    3ebc:	f8 96       	adiw	r30, 0x38	; 56
    3ebe:	df 01       	movw	r26, r30
    3ec0:	98 2f       	mov	r25, r24
    3ec2:	1d 92       	st	X+, r1
    3ec4:	9a 95       	dec	r25
    3ec6:	e9 f7       	brne	.-6      	; 0x3ec2 <Active_Cars_Vid+0x110>
	u8 Wrong[16]="No Active Cars";
    3ec8:	de 01       	movw	r26, r28
    3eca:	a0 5c       	subi	r26, 0xC0	; 192
    3ecc:	bf 4f       	sbci	r27, 0xFF	; 255
    3ece:	e0 96       	adiw	r28, 0x30	; 48
    3ed0:	bf af       	std	Y+63, r27	; 0x3f
    3ed2:	ae af       	std	Y+62, r26	; 0x3e
    3ed4:	e0 97       	sbiw	r28, 0x30	; 48
    3ed6:	e1 ef       	ldi	r30, 0xF1	; 241
    3ed8:	f0 e0       	ldi	r31, 0x00	; 0
    3eda:	e2 96       	adiw	r28, 0x32	; 50
    3edc:	ff af       	std	Y+63, r31	; 0x3f
    3ede:	ee af       	std	Y+62, r30	; 0x3e
    3ee0:	e2 97       	sbiw	r28, 0x32	; 50
    3ee2:	ff e0       	ldi	r31, 0x0F	; 15
    3ee4:	e3 96       	adiw	r28, 0x33	; 51
    3ee6:	ff af       	std	Y+63, r31	; 0x3f
    3ee8:	e3 97       	sbiw	r28, 0x33	; 51
    3eea:	e2 96       	adiw	r28, 0x32	; 50
    3eec:	ae ad       	ldd	r26, Y+62	; 0x3e
    3eee:	bf ad       	ldd	r27, Y+63	; 0x3f
    3ef0:	e2 97       	sbiw	r28, 0x32	; 50
    3ef2:	0c 90       	ld	r0, X
    3ef4:	e2 96       	adiw	r28, 0x32	; 50
    3ef6:	ee ad       	ldd	r30, Y+62	; 0x3e
    3ef8:	ff ad       	ldd	r31, Y+63	; 0x3f
    3efa:	e2 97       	sbiw	r28, 0x32	; 50
    3efc:	31 96       	adiw	r30, 0x01	; 1
    3efe:	e2 96       	adiw	r28, 0x32	; 50
    3f00:	ff af       	std	Y+63, r31	; 0x3f
    3f02:	ee af       	std	Y+62, r30	; 0x3e
    3f04:	e2 97       	sbiw	r28, 0x32	; 50
    3f06:	e0 96       	adiw	r28, 0x30	; 48
    3f08:	ae ad       	ldd	r26, Y+62	; 0x3e
    3f0a:	bf ad       	ldd	r27, Y+63	; 0x3f
    3f0c:	e0 97       	sbiw	r28, 0x30	; 48
    3f0e:	0c 92       	st	X, r0
    3f10:	e0 96       	adiw	r28, 0x30	; 48
    3f12:	ee ad       	ldd	r30, Y+62	; 0x3e
    3f14:	ff ad       	ldd	r31, Y+63	; 0x3f
    3f16:	e0 97       	sbiw	r28, 0x30	; 48
    3f18:	31 96       	adiw	r30, 0x01	; 1
    3f1a:	e0 96       	adiw	r28, 0x30	; 48
    3f1c:	ff af       	std	Y+63, r31	; 0x3f
    3f1e:	ee af       	std	Y+62, r30	; 0x3e
    3f20:	e0 97       	sbiw	r28, 0x30	; 48
    3f22:	e3 96       	adiw	r28, 0x33	; 51
    3f24:	ff ad       	ldd	r31, Y+63	; 0x3f
    3f26:	e3 97       	sbiw	r28, 0x33	; 51
    3f28:	f1 50       	subi	r31, 0x01	; 1
    3f2a:	e3 96       	adiw	r28, 0x33	; 51
    3f2c:	ff af       	std	Y+63, r31	; 0x3f
    3f2e:	e3 97       	sbiw	r28, 0x33	; 51
    3f30:	e3 96       	adiw	r28, 0x33	; 51
    3f32:	8f ad       	ldd	r24, Y+63	; 0x3f
    3f34:	e3 97       	sbiw	r28, 0x33	; 51
    3f36:	88 23       	and	r24, r24
    3f38:	c1 f6       	brne	.-80     	; 0x3eea <Active_Cars_Vid+0x138>
    3f3a:	fe 01       	movw	r30, r28
    3f3c:	e1 5b       	subi	r30, 0xB1	; 177
    3f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f40:	10 82       	st	Z, r1
	u8 Copy_u8Count=ZERO;
    3f42:	1f 8e       	std	Y+31, r1	; 0x1f
	u8 flag=TRUE;
    3f44:	81 e0       	ldi	r24, 0x01	; 1
    3f46:	8e 8f       	std	Y+30, r24	; 0x1e
    3f48:	37 c1       	rjmp	.+622    	; 0x41b8 <Active_Cars_Vid+0x406>
	u16 Num[10];
	while(flag)
	{
		if(Keypad_u8Get_Pressed_Key()=='O')break;
    3f4a:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <Keypad_u8Get_Pressed_Key>
    3f4e:	8f 34       	cpi	r24, 0x4F	; 79
    3f50:	09 f4       	brne	.+2      	; 0x3f54 <Active_Cars_Vid+0x1a2>
    3f52:	36 c1       	rjmp	.+620    	; 0x41c0 <Active_Cars_Vid+0x40e>
		for(u8 i=0;i<Maximum_Clients;i++)
    3f54:	1d 8e       	std	Y+29, r1	; 0x1d
    3f56:	ae c0       	rjmp	.+348    	; 0x40b4 <Active_Cars_Vid+0x302>
		{
			if(parking_data[i].state==HI)
    3f58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f5a:	88 2f       	mov	r24, r24
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	88 0f       	add	r24, r24
    3f60:	99 1f       	adc	r25, r25
    3f62:	01 96       	adiw	r24, 0x01	; 1
    3f64:	88 0f       	add	r24, r24
    3f66:	99 1f       	adc	r25, r25
    3f68:	fc 01       	movw	r30, r24
    3f6a:	e1 54       	subi	r30, 0x41	; 65
    3f6c:	fd 4f       	sbci	r31, 0xFD	; 253
    3f6e:	80 81       	ld	r24, Z
    3f70:	81 30       	cpi	r24, 0x01	; 1
    3f72:	09 f0       	breq	.+2      	; 0x3f76 <Active_Cars_Vid+0x1c4>
    3f74:	9c c0       	rjmp	.+312    	; 0x40ae <Active_Cars_Vid+0x2fc>
			{
				LCD_VidClear();
    3f76:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_VidClear>
				LCD_VidSend_String(Option1);
    3f7a:	ce 01       	movw	r24, r28
    3f7c:	80 96       	adiw	r24, 0x20	; 32
    3f7e:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_VidSend_String>
				itoa(parking_data[i].id,Num,10);
    3f82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f84:	88 2f       	mov	r24, r24
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	88 0f       	add	r24, r24
    3f8a:	99 1f       	adc	r25, r25
    3f8c:	88 0f       	add	r24, r24
    3f8e:	99 1f       	adc	r25, r25
    3f90:	fc 01       	movw	r30, r24
    3f92:	e1 54       	subi	r30, 0x41	; 65
    3f94:	fd 4f       	sbci	r31, 0xFD	; 253
    3f96:	80 81       	ld	r24, Z
    3f98:	91 81       	ldd	r25, Z+1	; 0x01
    3f9a:	9e 01       	movw	r18, r28
    3f9c:	20 5b       	subi	r18, 0xB0	; 176
    3f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3fa0:	b9 01       	movw	r22, r18
    3fa2:	4a e0       	ldi	r20, 0x0A	; 10
    3fa4:	50 e0       	ldi	r21, 0x00	; 0
    3fa6:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <itoa>
				LCD_VidSend_String(Num);
    3faa:	ce 01       	movw	r24, r28
    3fac:	80 5b       	subi	r24, 0xB0	; 176
    3fae:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb0:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_VidSend_String>
				LCD_VidSet_Position(0,1);
    3fb4:	80 e0       	ldi	r24, 0x00	; 0
    3fb6:	61 e0       	ldi	r22, 0x01	; 1
    3fb8:	0e 94 96 0c 	call	0x192c	; 0x192c <LCD_VidSet_Position>
				LCD_VidSend_String(Option2);
    3fbc:	ce 01       	movw	r24, r28
    3fbe:	c0 96       	adiw	r24, 0x30	; 48
    3fc0:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_VidSend_String>
    3fc4:	80 e0       	ldi	r24, 0x00	; 0
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	aa ef       	ldi	r26, 0xFA	; 250
    3fca:	b3 e4       	ldi	r27, 0x43	; 67
    3fcc:	89 8f       	std	Y+25, r24	; 0x19
    3fce:	9a 8f       	std	Y+26, r25	; 0x1a
    3fd0:	ab 8f       	std	Y+27, r26	; 0x1b
    3fd2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fd4:	69 8d       	ldd	r22, Y+25	; 0x19
    3fd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fdc:	20 e0       	ldi	r18, 0x00	; 0
    3fde:	30 e0       	ldi	r19, 0x00	; 0
    3fe0:	4a e7       	ldi	r20, 0x7A	; 122
    3fe2:	53 e4       	ldi	r21, 0x43	; 67
    3fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fe8:	dc 01       	movw	r26, r24
    3fea:	cb 01       	movw	r24, r22
    3fec:	8d 8b       	std	Y+21, r24	; 0x15
    3fee:	9e 8b       	std	Y+22, r25	; 0x16
    3ff0:	af 8b       	std	Y+23, r26	; 0x17
    3ff2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ff4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ff6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ff8:	8f 89       	ldd	r24, Y+23	; 0x17
    3ffa:	98 8d       	ldd	r25, Y+24	; 0x18
    3ffc:	20 e0       	ldi	r18, 0x00	; 0
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	40 e8       	ldi	r20, 0x80	; 128
    4002:	5f e3       	ldi	r21, 0x3F	; 63
    4004:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4008:	88 23       	and	r24, r24
    400a:	2c f4       	brge	.+10     	; 0x4016 <Active_Cars_Vid+0x264>
		__ticks = 1;
    400c:	81 e0       	ldi	r24, 0x01	; 1
    400e:	90 e0       	ldi	r25, 0x00	; 0
    4010:	9c 8b       	std	Y+20, r25	; 0x14
    4012:	8b 8b       	std	Y+19, r24	; 0x13
    4014:	3f c0       	rjmp	.+126    	; 0x4094 <Active_Cars_Vid+0x2e2>
	else if (__tmp > 65535)
    4016:	6d 89       	ldd	r22, Y+21	; 0x15
    4018:	7e 89       	ldd	r23, Y+22	; 0x16
    401a:	8f 89       	ldd	r24, Y+23	; 0x17
    401c:	98 8d       	ldd	r25, Y+24	; 0x18
    401e:	20 e0       	ldi	r18, 0x00	; 0
    4020:	3f ef       	ldi	r19, 0xFF	; 255
    4022:	4f e7       	ldi	r20, 0x7F	; 127
    4024:	57 e4       	ldi	r21, 0x47	; 71
    4026:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    402a:	18 16       	cp	r1, r24
    402c:	4c f5       	brge	.+82     	; 0x4080 <Active_Cars_Vid+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    402e:	69 8d       	ldd	r22, Y+25	; 0x19
    4030:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4032:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4034:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4036:	20 e0       	ldi	r18, 0x00	; 0
    4038:	30 e0       	ldi	r19, 0x00	; 0
    403a:	40 e2       	ldi	r20, 0x20	; 32
    403c:	51 e4       	ldi	r21, 0x41	; 65
    403e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4042:	dc 01       	movw	r26, r24
    4044:	cb 01       	movw	r24, r22
    4046:	bc 01       	movw	r22, r24
    4048:	cd 01       	movw	r24, r26
    404a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    404e:	dc 01       	movw	r26, r24
    4050:	cb 01       	movw	r24, r22
    4052:	9c 8b       	std	Y+20, r25	; 0x14
    4054:	8b 8b       	std	Y+19, r24	; 0x13
    4056:	0f c0       	rjmp	.+30     	; 0x4076 <Active_Cars_Vid+0x2c4>
    4058:	89 e1       	ldi	r24, 0x19	; 25
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	9a 8b       	std	Y+18, r25	; 0x12
    405e:	89 8b       	std	Y+17, r24	; 0x11
    4060:	89 89       	ldd	r24, Y+17	; 0x11
    4062:	9a 89       	ldd	r25, Y+18	; 0x12
    4064:	01 97       	sbiw	r24, 0x01	; 1
    4066:	f1 f7       	brne	.-4      	; 0x4064 <Active_Cars_Vid+0x2b2>
    4068:	9a 8b       	std	Y+18, r25	; 0x12
    406a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    406c:	8b 89       	ldd	r24, Y+19	; 0x13
    406e:	9c 89       	ldd	r25, Y+20	; 0x14
    4070:	01 97       	sbiw	r24, 0x01	; 1
    4072:	9c 8b       	std	Y+20, r25	; 0x14
    4074:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4076:	8b 89       	ldd	r24, Y+19	; 0x13
    4078:	9c 89       	ldd	r25, Y+20	; 0x14
    407a:	00 97       	sbiw	r24, 0x00	; 0
    407c:	69 f7       	brne	.-38     	; 0x4058 <Active_Cars_Vid+0x2a6>
    407e:	14 c0       	rjmp	.+40     	; 0x40a8 <Active_Cars_Vid+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4080:	6d 89       	ldd	r22, Y+21	; 0x15
    4082:	7e 89       	ldd	r23, Y+22	; 0x16
    4084:	8f 89       	ldd	r24, Y+23	; 0x17
    4086:	98 8d       	ldd	r25, Y+24	; 0x18
    4088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    408c:	dc 01       	movw	r26, r24
    408e:	cb 01       	movw	r24, r22
    4090:	9c 8b       	std	Y+20, r25	; 0x14
    4092:	8b 8b       	std	Y+19, r24	; 0x13
    4094:	8b 89       	ldd	r24, Y+19	; 0x13
    4096:	9c 89       	ldd	r25, Y+20	; 0x14
    4098:	98 8b       	std	Y+16, r25	; 0x10
    409a:	8f 87       	std	Y+15, r24	; 0x0f
    409c:	8f 85       	ldd	r24, Y+15	; 0x0f
    409e:	98 89       	ldd	r25, Y+16	; 0x10
    40a0:	01 97       	sbiw	r24, 0x01	; 1
    40a2:	f1 f7       	brne	.-4      	; 0x40a0 <Active_Cars_Vid+0x2ee>
    40a4:	98 8b       	std	Y+16, r25	; 0x10
    40a6:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				Copy_u8Count++;
    40a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40aa:	8f 5f       	subi	r24, 0xFF	; 255
    40ac:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 flag=TRUE;
	u16 Num[10];
	while(flag)
	{
		if(Keypad_u8Get_Pressed_Key()=='O')break;
		for(u8 i=0;i<Maximum_Clients;i++)
    40ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40b0:	8f 5f       	subi	r24, 0xFF	; 255
    40b2:	8d 8f       	std	Y+29, r24	; 0x1d
    40b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40b6:	82 33       	cpi	r24, 0x32	; 50
    40b8:	08 f4       	brcc	.+2      	; 0x40bc <Active_Cars_Vid+0x30a>
    40ba:	4e cf       	rjmp	.-356    	; 0x3f58 <Active_Cars_Vid+0x1a6>
				LCD_VidSend_String(Option2);
				_delay_ms(500);
				Copy_u8Count++;
			}
		}
		if(Copy_u8Count==ZERO){LCD_VidClear();LCD_VidSend_String(Wrong);_delay_ms(500);flag=FALSE;}
    40bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40be:	88 23       	and	r24, r24
    40c0:	09 f0       	breq	.+2      	; 0x40c4 <Active_Cars_Vid+0x312>
    40c2:	7a c0       	rjmp	.+244    	; 0x41b8 <Active_Cars_Vid+0x406>
    40c4:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_VidClear>
    40c8:	ce 01       	movw	r24, r28
    40ca:	80 5c       	subi	r24, 0xC0	; 192
    40cc:	9f 4f       	sbci	r25, 0xFF	; 255
    40ce:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_VidSend_String>
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	aa ef       	ldi	r26, 0xFA	; 250
    40d8:	b3 e4       	ldi	r27, 0x43	; 67
    40da:	8b 87       	std	Y+11, r24	; 0x0b
    40dc:	9c 87       	std	Y+12, r25	; 0x0c
    40de:	ad 87       	std	Y+13, r26	; 0x0d
    40e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    40e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    40e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    40e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    40ea:	20 e0       	ldi	r18, 0x00	; 0
    40ec:	30 e0       	ldi	r19, 0x00	; 0
    40ee:	4a e7       	ldi	r20, 0x7A	; 122
    40f0:	53 e4       	ldi	r21, 0x43	; 67
    40f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f6:	dc 01       	movw	r26, r24
    40f8:	cb 01       	movw	r24, r22
    40fa:	8f 83       	std	Y+7, r24	; 0x07
    40fc:	98 87       	std	Y+8, r25	; 0x08
    40fe:	a9 87       	std	Y+9, r26	; 0x09
    4100:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4102:	6f 81       	ldd	r22, Y+7	; 0x07
    4104:	78 85       	ldd	r23, Y+8	; 0x08
    4106:	89 85       	ldd	r24, Y+9	; 0x09
    4108:	9a 85       	ldd	r25, Y+10	; 0x0a
    410a:	20 e0       	ldi	r18, 0x00	; 0
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	40 e8       	ldi	r20, 0x80	; 128
    4110:	5f e3       	ldi	r21, 0x3F	; 63
    4112:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4116:	88 23       	and	r24, r24
    4118:	2c f4       	brge	.+10     	; 0x4124 <Active_Cars_Vid+0x372>
		__ticks = 1;
    411a:	81 e0       	ldi	r24, 0x01	; 1
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	9e 83       	std	Y+6, r25	; 0x06
    4120:	8d 83       	std	Y+5, r24	; 0x05
    4122:	3f c0       	rjmp	.+126    	; 0x41a2 <Active_Cars_Vid+0x3f0>
	else if (__tmp > 65535)
    4124:	6f 81       	ldd	r22, Y+7	; 0x07
    4126:	78 85       	ldd	r23, Y+8	; 0x08
    4128:	89 85       	ldd	r24, Y+9	; 0x09
    412a:	9a 85       	ldd	r25, Y+10	; 0x0a
    412c:	20 e0       	ldi	r18, 0x00	; 0
    412e:	3f ef       	ldi	r19, 0xFF	; 255
    4130:	4f e7       	ldi	r20, 0x7F	; 127
    4132:	57 e4       	ldi	r21, 0x47	; 71
    4134:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4138:	18 16       	cp	r1, r24
    413a:	4c f5       	brge	.+82     	; 0x418e <Active_Cars_Vid+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    413c:	6b 85       	ldd	r22, Y+11	; 0x0b
    413e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4140:	8d 85       	ldd	r24, Y+13	; 0x0d
    4142:	9e 85       	ldd	r25, Y+14	; 0x0e
    4144:	20 e0       	ldi	r18, 0x00	; 0
    4146:	30 e0       	ldi	r19, 0x00	; 0
    4148:	40 e2       	ldi	r20, 0x20	; 32
    414a:	51 e4       	ldi	r21, 0x41	; 65
    414c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	bc 01       	movw	r22, r24
    4156:	cd 01       	movw	r24, r26
    4158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    415c:	dc 01       	movw	r26, r24
    415e:	cb 01       	movw	r24, r22
    4160:	9e 83       	std	Y+6, r25	; 0x06
    4162:	8d 83       	std	Y+5, r24	; 0x05
    4164:	0f c0       	rjmp	.+30     	; 0x4184 <Active_Cars_Vid+0x3d2>
    4166:	89 e1       	ldi	r24, 0x19	; 25
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	9c 83       	std	Y+4, r25	; 0x04
    416c:	8b 83       	std	Y+3, r24	; 0x03
    416e:	8b 81       	ldd	r24, Y+3	; 0x03
    4170:	9c 81       	ldd	r25, Y+4	; 0x04
    4172:	01 97       	sbiw	r24, 0x01	; 1
    4174:	f1 f7       	brne	.-4      	; 0x4172 <Active_Cars_Vid+0x3c0>
    4176:	9c 83       	std	Y+4, r25	; 0x04
    4178:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    417a:	8d 81       	ldd	r24, Y+5	; 0x05
    417c:	9e 81       	ldd	r25, Y+6	; 0x06
    417e:	01 97       	sbiw	r24, 0x01	; 1
    4180:	9e 83       	std	Y+6, r25	; 0x06
    4182:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4184:	8d 81       	ldd	r24, Y+5	; 0x05
    4186:	9e 81       	ldd	r25, Y+6	; 0x06
    4188:	00 97       	sbiw	r24, 0x00	; 0
    418a:	69 f7       	brne	.-38     	; 0x4166 <Active_Cars_Vid+0x3b4>
    418c:	14 c0       	rjmp	.+40     	; 0x41b6 <Active_Cars_Vid+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    418e:	6f 81       	ldd	r22, Y+7	; 0x07
    4190:	78 85       	ldd	r23, Y+8	; 0x08
    4192:	89 85       	ldd	r24, Y+9	; 0x09
    4194:	9a 85       	ldd	r25, Y+10	; 0x0a
    4196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    419a:	dc 01       	movw	r26, r24
    419c:	cb 01       	movw	r24, r22
    419e:	9e 83       	std	Y+6, r25	; 0x06
    41a0:	8d 83       	std	Y+5, r24	; 0x05
    41a2:	8d 81       	ldd	r24, Y+5	; 0x05
    41a4:	9e 81       	ldd	r25, Y+6	; 0x06
    41a6:	9a 83       	std	Y+2, r25	; 0x02
    41a8:	89 83       	std	Y+1, r24	; 0x01
    41aa:	89 81       	ldd	r24, Y+1	; 0x01
    41ac:	9a 81       	ldd	r25, Y+2	; 0x02
    41ae:	01 97       	sbiw	r24, 0x01	; 1
    41b0:	f1 f7       	brne	.-4      	; 0x41ae <Active_Cars_Vid+0x3fc>
    41b2:	9a 83       	std	Y+2, r25	; 0x02
    41b4:	89 83       	std	Y+1, r24	; 0x01
    41b6:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 Option2[16]="Time : ";
	u8 Wrong[16]="No Active Cars";
	u8 Copy_u8Count=ZERO;
	u8 flag=TRUE;
	u16 Num[10];
	while(flag)
    41b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    41ba:	88 23       	and	r24, r24
    41bc:	09 f0       	breq	.+2      	; 0x41c0 <Active_Cars_Vid+0x40e>
    41be:	c5 ce       	rjmp	.-630    	; 0x3f4a <Active_Cars_Vid+0x198>
				Copy_u8Count++;
			}
		}
		if(Copy_u8Count==ZERO){LCD_VidClear();LCD_VidSend_String(Wrong);_delay_ms(500);flag=FALSE;}
	}
}
    41c0:	ce 58       	subi	r28, 0x8E	; 142
    41c2:	df 4f       	sbci	r29, 0xFF	; 255
    41c4:	0f b6       	in	r0, 0x3f	; 63
    41c6:	f8 94       	cli
    41c8:	de bf       	out	0x3e, r29	; 62
    41ca:	0f be       	out	0x3f, r0	; 63
    41cc:	cd bf       	out	0x3d, r28	; 61
    41ce:	cf 91       	pop	r28
    41d0:	df 91       	pop	r29
    41d2:	08 95       	ret

000041d4 <User_Vid>:



void User_Vid(void)
{
    41d4:	df 93       	push	r29
    41d6:	cf 93       	push	r28
    41d8:	cd b7       	in	r28, 0x3d	; 61
    41da:	de b7       	in	r29, 0x3e	; 62
    41dc:	c1 55       	subi	r28, 0x51	; 81
    41de:	d0 40       	sbci	r29, 0x00	; 0
    41e0:	0f b6       	in	r0, 0x3f	; 63
    41e2:	f8 94       	cli
    41e4:	de bf       	out	0x3e, r29	; 62
    41e6:	0f be       	out	0x3f, r0	; 63
    41e8:	cd bf       	out	0x3d, r28	; 61
	u8 input;
	u8 flag=TRUE;
    41ea:	81 e0       	ldi	r24, 0x01	; 1
    41ec:	8f 87       	std	Y+15, r24	; 0x0f
	u8 Option1[16]="1) In <-";
    41ee:	9e 01       	movw	r18, r28
    41f0:	2f 5e       	subi	r18, 0xEF	; 239
    41f2:	3f 4f       	sbci	r19, 0xFF	; 255
    41f4:	25 96       	adiw	r28, 0x05	; 5
    41f6:	3f af       	std	Y+63, r19	; 0x3f
    41f8:	2e af       	std	Y+62, r18	; 0x3e
    41fa:	25 97       	sbiw	r28, 0x05	; 5
    41fc:	81 e0       	ldi	r24, 0x01	; 1
    41fe:	91 e0       	ldi	r25, 0x01	; 1
    4200:	27 96       	adiw	r28, 0x07	; 7
    4202:	9f af       	std	Y+63, r25	; 0x3f
    4204:	8e af       	std	Y+62, r24	; 0x3e
    4206:	27 97       	sbiw	r28, 0x07	; 7
    4208:	99 e0       	ldi	r25, 0x09	; 9
    420a:	28 96       	adiw	r28, 0x08	; 8
    420c:	9f af       	std	Y+63, r25	; 0x3f
    420e:	28 97       	sbiw	r28, 0x08	; 8
    4210:	27 96       	adiw	r28, 0x07	; 7
    4212:	ae ad       	ldd	r26, Y+62	; 0x3e
    4214:	bf ad       	ldd	r27, Y+63	; 0x3f
    4216:	27 97       	sbiw	r28, 0x07	; 7
    4218:	0c 90       	ld	r0, X
    421a:	27 96       	adiw	r28, 0x07	; 7
    421c:	ee ad       	ldd	r30, Y+62	; 0x3e
    421e:	ff ad       	ldd	r31, Y+63	; 0x3f
    4220:	27 97       	sbiw	r28, 0x07	; 7
    4222:	31 96       	adiw	r30, 0x01	; 1
    4224:	27 96       	adiw	r28, 0x07	; 7
    4226:	ff af       	std	Y+63, r31	; 0x3f
    4228:	ee af       	std	Y+62, r30	; 0x3e
    422a:	27 97       	sbiw	r28, 0x07	; 7
    422c:	25 96       	adiw	r28, 0x05	; 5
    422e:	ae ad       	ldd	r26, Y+62	; 0x3e
    4230:	bf ad       	ldd	r27, Y+63	; 0x3f
    4232:	25 97       	sbiw	r28, 0x05	; 5
    4234:	0c 92       	st	X, r0
    4236:	25 96       	adiw	r28, 0x05	; 5
    4238:	ee ad       	ldd	r30, Y+62	; 0x3e
    423a:	ff ad       	ldd	r31, Y+63	; 0x3f
    423c:	25 97       	sbiw	r28, 0x05	; 5
    423e:	31 96       	adiw	r30, 0x01	; 1
    4240:	25 96       	adiw	r28, 0x05	; 5
    4242:	ff af       	std	Y+63, r31	; 0x3f
    4244:	ee af       	std	Y+62, r30	; 0x3e
    4246:	25 97       	sbiw	r28, 0x05	; 5
    4248:	28 96       	adiw	r28, 0x08	; 8
    424a:	ff ad       	ldd	r31, Y+63	; 0x3f
    424c:	28 97       	sbiw	r28, 0x08	; 8
    424e:	f1 50       	subi	r31, 0x01	; 1
    4250:	28 96       	adiw	r28, 0x08	; 8
    4252:	ff af       	std	Y+63, r31	; 0x3f
    4254:	28 97       	sbiw	r28, 0x08	; 8
    4256:	28 96       	adiw	r28, 0x08	; 8
    4258:	2f ad       	ldd	r18, Y+63	; 0x3f
    425a:	28 97       	sbiw	r28, 0x08	; 8
    425c:	22 23       	and	r18, r18
    425e:	c1 f6       	brne	.-80     	; 0x4210 <User_Vid+0x3c>
    4260:	87 e0       	ldi	r24, 0x07	; 7
    4262:	fe 01       	movw	r30, r28
    4264:	7a 96       	adiw	r30, 0x1a	; 26
    4266:	df 01       	movw	r26, r30
    4268:	28 2f       	mov	r18, r24
    426a:	1d 92       	st	X+, r1
    426c:	2a 95       	dec	r18
    426e:	e9 f7       	brne	.-6      	; 0x426a <User_Vid+0x96>
	u8 Option2[16]="2) Out ->";
    4270:	ce 01       	movw	r24, r28
    4272:	81 96       	adiw	r24, 0x21	; 33
    4274:	2a 96       	adiw	r28, 0x0a	; 10
    4276:	9f af       	std	Y+63, r25	; 0x3f
    4278:	8e af       	std	Y+62, r24	; 0x3e
    427a:	2a 97       	sbiw	r28, 0x0a	; 10
    427c:	a1 e1       	ldi	r26, 0x11	; 17
    427e:	b1 e0       	ldi	r27, 0x01	; 1
    4280:	2c 96       	adiw	r28, 0x0c	; 12
    4282:	bf af       	std	Y+63, r27	; 0x3f
    4284:	ae af       	std	Y+62, r26	; 0x3e
    4286:	2c 97       	sbiw	r28, 0x0c	; 12
    4288:	ba e0       	ldi	r27, 0x0A	; 10
    428a:	2d 96       	adiw	r28, 0x0d	; 13
    428c:	bf af       	std	Y+63, r27	; 0x3f
    428e:	2d 97       	sbiw	r28, 0x0d	; 13
    4290:	2c 96       	adiw	r28, 0x0c	; 12
    4292:	ee ad       	ldd	r30, Y+62	; 0x3e
    4294:	ff ad       	ldd	r31, Y+63	; 0x3f
    4296:	2c 97       	sbiw	r28, 0x0c	; 12
    4298:	00 80       	ld	r0, Z
    429a:	2c 96       	adiw	r28, 0x0c	; 12
    429c:	2e ad       	ldd	r18, Y+62	; 0x3e
    429e:	3f ad       	ldd	r19, Y+63	; 0x3f
    42a0:	2c 97       	sbiw	r28, 0x0c	; 12
    42a2:	2f 5f       	subi	r18, 0xFF	; 255
    42a4:	3f 4f       	sbci	r19, 0xFF	; 255
    42a6:	2c 96       	adiw	r28, 0x0c	; 12
    42a8:	3f af       	std	Y+63, r19	; 0x3f
    42aa:	2e af       	std	Y+62, r18	; 0x3e
    42ac:	2c 97       	sbiw	r28, 0x0c	; 12
    42ae:	2a 96       	adiw	r28, 0x0a	; 10
    42b0:	ae ad       	ldd	r26, Y+62	; 0x3e
    42b2:	bf ad       	ldd	r27, Y+63	; 0x3f
    42b4:	2a 97       	sbiw	r28, 0x0a	; 10
    42b6:	0c 92       	st	X, r0
    42b8:	2a 96       	adiw	r28, 0x0a	; 10
    42ba:	ee ad       	ldd	r30, Y+62	; 0x3e
    42bc:	ff ad       	ldd	r31, Y+63	; 0x3f
    42be:	2a 97       	sbiw	r28, 0x0a	; 10
    42c0:	31 96       	adiw	r30, 0x01	; 1
    42c2:	2a 96       	adiw	r28, 0x0a	; 10
    42c4:	ff af       	std	Y+63, r31	; 0x3f
    42c6:	ee af       	std	Y+62, r30	; 0x3e
    42c8:	2a 97       	sbiw	r28, 0x0a	; 10
    42ca:	2d 96       	adiw	r28, 0x0d	; 13
    42cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    42ce:	2d 97       	sbiw	r28, 0x0d	; 13
    42d0:	f1 50       	subi	r31, 0x01	; 1
    42d2:	2d 96       	adiw	r28, 0x0d	; 13
    42d4:	ff af       	std	Y+63, r31	; 0x3f
    42d6:	2d 97       	sbiw	r28, 0x0d	; 13
    42d8:	2d 96       	adiw	r28, 0x0d	; 13
    42da:	2f ad       	ldd	r18, Y+63	; 0x3f
    42dc:	2d 97       	sbiw	r28, 0x0d	; 13
    42de:	22 23       	and	r18, r18
    42e0:	b9 f6       	brne	.-82     	; 0x4290 <User_Vid+0xbc>
    42e2:	86 e0       	ldi	r24, 0x06	; 6
    42e4:	fe 01       	movw	r30, r28
    42e6:	bb 96       	adiw	r30, 0x2b	; 43
    42e8:	df 01       	movw	r26, r30
    42ea:	28 2f       	mov	r18, r24
    42ec:	1d 92       	st	X+, r1
    42ee:	2a 95       	dec	r18
    42f0:	e9 f7       	brne	.-6      	; 0x42ec <User_Vid+0x118>
	u8 Wrong[16]="Wrong Input!!";
    42f2:	ce 01       	movw	r24, r28
    42f4:	c1 96       	adiw	r24, 0x31	; 49
    42f6:	2f 96       	adiw	r28, 0x0f	; 15
    42f8:	9f af       	std	Y+63, r25	; 0x3f
    42fa:	8e af       	std	Y+62, r24	; 0x3e
    42fc:	2f 97       	sbiw	r28, 0x0f	; 15
    42fe:	a1 ec       	ldi	r26, 0xC1	; 193
    4300:	b0 e0       	ldi	r27, 0x00	; 0
    4302:	61 96       	adiw	r28, 0x11	; 17
    4304:	bf af       	std	Y+63, r27	; 0x3f
    4306:	ae af       	std	Y+62, r26	; 0x3e
    4308:	61 97       	sbiw	r28, 0x11	; 17
    430a:	be e0       	ldi	r27, 0x0E	; 14
    430c:	62 96       	adiw	r28, 0x12	; 18
    430e:	bf af       	std	Y+63, r27	; 0x3f
    4310:	62 97       	sbiw	r28, 0x12	; 18
    4312:	61 96       	adiw	r28, 0x11	; 17
    4314:	ee ad       	ldd	r30, Y+62	; 0x3e
    4316:	ff ad       	ldd	r31, Y+63	; 0x3f
    4318:	61 97       	sbiw	r28, 0x11	; 17
    431a:	00 80       	ld	r0, Z
    431c:	61 96       	adiw	r28, 0x11	; 17
    431e:	2e ad       	ldd	r18, Y+62	; 0x3e
    4320:	3f ad       	ldd	r19, Y+63	; 0x3f
    4322:	61 97       	sbiw	r28, 0x11	; 17
    4324:	2f 5f       	subi	r18, 0xFF	; 255
    4326:	3f 4f       	sbci	r19, 0xFF	; 255
    4328:	61 96       	adiw	r28, 0x11	; 17
    432a:	3f af       	std	Y+63, r19	; 0x3f
    432c:	2e af       	std	Y+62, r18	; 0x3e
    432e:	61 97       	sbiw	r28, 0x11	; 17
    4330:	2f 96       	adiw	r28, 0x0f	; 15
    4332:	ae ad       	ldd	r26, Y+62	; 0x3e
    4334:	bf ad       	ldd	r27, Y+63	; 0x3f
    4336:	2f 97       	sbiw	r28, 0x0f	; 15
    4338:	0c 92       	st	X, r0
    433a:	2f 96       	adiw	r28, 0x0f	; 15
    433c:	ee ad       	ldd	r30, Y+62	; 0x3e
    433e:	ff ad       	ldd	r31, Y+63	; 0x3f
    4340:	2f 97       	sbiw	r28, 0x0f	; 15
    4342:	31 96       	adiw	r30, 0x01	; 1
    4344:	2f 96       	adiw	r28, 0x0f	; 15
    4346:	ff af       	std	Y+63, r31	; 0x3f
    4348:	ee af       	std	Y+62, r30	; 0x3e
    434a:	2f 97       	sbiw	r28, 0x0f	; 15
    434c:	62 96       	adiw	r28, 0x12	; 18
    434e:	ff ad       	ldd	r31, Y+63	; 0x3f
    4350:	62 97       	sbiw	r28, 0x12	; 18
    4352:	f1 50       	subi	r31, 0x01	; 1
    4354:	62 96       	adiw	r28, 0x12	; 18
    4356:	ff af       	std	Y+63, r31	; 0x3f
    4358:	62 97       	sbiw	r28, 0x12	; 18
    435a:	62 96       	adiw	r28, 0x12	; 18
    435c:	2f ad       	ldd	r18, Y+63	; 0x3f
    435e:	62 97       	sbiw	r28, 0x12	; 18
    4360:	22 23       	and	r18, r18
    4362:	b9 f6       	brne	.-82     	; 0x4312 <User_Vid+0x13e>
    4364:	fe 01       	movw	r30, r28
    4366:	ff 96       	adiw	r30, 0x3f	; 63
    4368:	11 82       	std	Z+1, r1	; 0x01
    436a:	10 82       	st	Z, r1
    436c:	ac c0       	rjmp	.+344    	; 0x44c6 <User_Vid+0x2f2>
	while(flag)
	{
		LCD_VidClear();
    436e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_VidClear>
		LCD_VidSend_String(Option1);
    4372:	ce 01       	movw	r24, r28
    4374:	41 96       	adiw	r24, 0x11	; 17
    4376:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_VidSend_String>
		LCD_VidSet_Position(0,1);
    437a:	80 e0       	ldi	r24, 0x00	; 0
    437c:	61 e0       	ldi	r22, 0x01	; 1
    437e:	0e 94 96 0c 	call	0x192c	; 0x192c <LCD_VidSet_Position>
		LCD_VidSend_String(Option2);
    4382:	ce 01       	movw	r24, r28
    4384:	81 96       	adiw	r24, 0x21	; 33
    4386:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_VidSend_String>
		input=Keypad_u8Get_Pressed_Key_Wait()-48;
    438a:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <Keypad_u8Get_Pressed_Key_Wait>
    438e:	80 53       	subi	r24, 0x30	; 48
    4390:	88 8b       	std	Y+16, r24	; 0x10
		switch(input)
    4392:	88 89       	ldd	r24, Y+16	; 0x10
    4394:	a8 2f       	mov	r26, r24
    4396:	b0 e0       	ldi	r27, 0x00	; 0
    4398:	23 96       	adiw	r28, 0x03	; 3
    439a:	bf af       	std	Y+63, r27	; 0x3f
    439c:	ae af       	std	Y+62, r26	; 0x3e
    439e:	23 97       	sbiw	r28, 0x03	; 3
    43a0:	23 96       	adiw	r28, 0x03	; 3
    43a2:	ee ad       	ldd	r30, Y+62	; 0x3e
    43a4:	ff ad       	ldd	r31, Y+63	; 0x3f
    43a6:	23 97       	sbiw	r28, 0x03	; 3
    43a8:	e2 30       	cpi	r30, 0x02	; 2
    43aa:	f1 05       	cpc	r31, r1
    43ac:	09 f4       	brne	.+2      	; 0x43b0 <User_Vid+0x1dc>
    43ae:	8b c0       	rjmp	.+278    	; 0x44c6 <User_Vid+0x2f2>
    43b0:	23 96       	adiw	r28, 0x03	; 3
    43b2:	2e ad       	ldd	r18, Y+62	; 0x3e
    43b4:	3f ad       	ldd	r19, Y+63	; 0x3f
    43b6:	23 97       	sbiw	r28, 0x03	; 3
    43b8:	2f 31       	cpi	r18, 0x1F	; 31
    43ba:	31 05       	cpc	r19, r1
    43bc:	51 f0       	breq	.+20     	; 0x43d2 <User_Vid+0x1fe>
    43be:	23 96       	adiw	r28, 0x03	; 3
    43c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    43c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    43c4:	23 97       	sbiw	r28, 0x03	; 3
    43c6:	81 30       	cpi	r24, 0x01	; 1
    43c8:	91 05       	cpc	r25, r1
    43ca:	29 f4       	brne	.+10     	; 0x43d6 <User_Vid+0x202>
		{
			case(ONE):New_User_Vid();break;
    43cc:	0e 94 71 22 	call	0x44e2	; 0x44e2 <New_User_Vid>
    43d0:	7a c0       	rjmp	.+244    	; 0x44c6 <User_Vid+0x2f2>
			case(TWO):break;
			case('O'-48):flag=FALSE;break;
    43d2:	1f 86       	std	Y+15, r1	; 0x0f
    43d4:	78 c0       	rjmp	.+240    	; 0x44c6 <User_Vid+0x2f2>
			default:LCD_VidClear();LCD_VidSend_String(Wrong);_delay_ms(1000);
    43d6:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_VidClear>
    43da:	ce 01       	movw	r24, r28
    43dc:	c1 96       	adiw	r24, 0x31	; 49
    43de:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_VidSend_String>
    43e2:	80 e0       	ldi	r24, 0x00	; 0
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	aa e7       	ldi	r26, 0x7A	; 122
    43e8:	b4 e4       	ldi	r27, 0x44	; 68
    43ea:	8b 87       	std	Y+11, r24	; 0x0b
    43ec:	9c 87       	std	Y+12, r25	; 0x0c
    43ee:	ad 87       	std	Y+13, r26	; 0x0d
    43f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    43f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    43f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    43f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    43fa:	20 e0       	ldi	r18, 0x00	; 0
    43fc:	30 e0       	ldi	r19, 0x00	; 0
    43fe:	4a e7       	ldi	r20, 0x7A	; 122
    4400:	53 e4       	ldi	r21, 0x43	; 67
    4402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4406:	dc 01       	movw	r26, r24
    4408:	cb 01       	movw	r24, r22
    440a:	8f 83       	std	Y+7, r24	; 0x07
    440c:	98 87       	std	Y+8, r25	; 0x08
    440e:	a9 87       	std	Y+9, r26	; 0x09
    4410:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4412:	6f 81       	ldd	r22, Y+7	; 0x07
    4414:	78 85       	ldd	r23, Y+8	; 0x08
    4416:	89 85       	ldd	r24, Y+9	; 0x09
    4418:	9a 85       	ldd	r25, Y+10	; 0x0a
    441a:	20 e0       	ldi	r18, 0x00	; 0
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	40 e8       	ldi	r20, 0x80	; 128
    4420:	5f e3       	ldi	r21, 0x3F	; 63
    4422:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4426:	88 23       	and	r24, r24
    4428:	2c f4       	brge	.+10     	; 0x4434 <User_Vid+0x260>
		__ticks = 1;
    442a:	81 e0       	ldi	r24, 0x01	; 1
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	9e 83       	std	Y+6, r25	; 0x06
    4430:	8d 83       	std	Y+5, r24	; 0x05
    4432:	3f c0       	rjmp	.+126    	; 0x44b2 <User_Vid+0x2de>
	else if (__tmp > 65535)
    4434:	6f 81       	ldd	r22, Y+7	; 0x07
    4436:	78 85       	ldd	r23, Y+8	; 0x08
    4438:	89 85       	ldd	r24, Y+9	; 0x09
    443a:	9a 85       	ldd	r25, Y+10	; 0x0a
    443c:	20 e0       	ldi	r18, 0x00	; 0
    443e:	3f ef       	ldi	r19, 0xFF	; 255
    4440:	4f e7       	ldi	r20, 0x7F	; 127
    4442:	57 e4       	ldi	r21, 0x47	; 71
    4444:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4448:	18 16       	cp	r1, r24
    444a:	4c f5       	brge	.+82     	; 0x449e <User_Vid+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    444c:	6b 85       	ldd	r22, Y+11	; 0x0b
    444e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4450:	8d 85       	ldd	r24, Y+13	; 0x0d
    4452:	9e 85       	ldd	r25, Y+14	; 0x0e
    4454:	20 e0       	ldi	r18, 0x00	; 0
    4456:	30 e0       	ldi	r19, 0x00	; 0
    4458:	40 e2       	ldi	r20, 0x20	; 32
    445a:	51 e4       	ldi	r21, 0x41	; 65
    445c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4460:	dc 01       	movw	r26, r24
    4462:	cb 01       	movw	r24, r22
    4464:	bc 01       	movw	r22, r24
    4466:	cd 01       	movw	r24, r26
    4468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    446c:	dc 01       	movw	r26, r24
    446e:	cb 01       	movw	r24, r22
    4470:	9e 83       	std	Y+6, r25	; 0x06
    4472:	8d 83       	std	Y+5, r24	; 0x05
    4474:	0f c0       	rjmp	.+30     	; 0x4494 <User_Vid+0x2c0>
    4476:	89 e1       	ldi	r24, 0x19	; 25
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	9c 83       	std	Y+4, r25	; 0x04
    447c:	8b 83       	std	Y+3, r24	; 0x03
    447e:	8b 81       	ldd	r24, Y+3	; 0x03
    4480:	9c 81       	ldd	r25, Y+4	; 0x04
    4482:	01 97       	sbiw	r24, 0x01	; 1
    4484:	f1 f7       	brne	.-4      	; 0x4482 <User_Vid+0x2ae>
    4486:	9c 83       	std	Y+4, r25	; 0x04
    4488:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    448a:	8d 81       	ldd	r24, Y+5	; 0x05
    448c:	9e 81       	ldd	r25, Y+6	; 0x06
    448e:	01 97       	sbiw	r24, 0x01	; 1
    4490:	9e 83       	std	Y+6, r25	; 0x06
    4492:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4494:	8d 81       	ldd	r24, Y+5	; 0x05
    4496:	9e 81       	ldd	r25, Y+6	; 0x06
    4498:	00 97       	sbiw	r24, 0x00	; 0
    449a:	69 f7       	brne	.-38     	; 0x4476 <User_Vid+0x2a2>
    449c:	14 c0       	rjmp	.+40     	; 0x44c6 <User_Vid+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    449e:	6f 81       	ldd	r22, Y+7	; 0x07
    44a0:	78 85       	ldd	r23, Y+8	; 0x08
    44a2:	89 85       	ldd	r24, Y+9	; 0x09
    44a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    44a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44aa:	dc 01       	movw	r26, r24
    44ac:	cb 01       	movw	r24, r22
    44ae:	9e 83       	std	Y+6, r25	; 0x06
    44b0:	8d 83       	std	Y+5, r24	; 0x05
    44b2:	8d 81       	ldd	r24, Y+5	; 0x05
    44b4:	9e 81       	ldd	r25, Y+6	; 0x06
    44b6:	9a 83       	std	Y+2, r25	; 0x02
    44b8:	89 83       	std	Y+1, r24	; 0x01
    44ba:	89 81       	ldd	r24, Y+1	; 0x01
    44bc:	9a 81       	ldd	r25, Y+2	; 0x02
    44be:	01 97       	sbiw	r24, 0x01	; 1
    44c0:	f1 f7       	brne	.-4      	; 0x44be <User_Vid+0x2ea>
    44c2:	9a 83       	std	Y+2, r25	; 0x02
    44c4:	89 83       	std	Y+1, r24	; 0x01
	u8 input;
	u8 flag=TRUE;
	u8 Option1[16]="1) In <-";
	u8 Option2[16]="2) Out ->";
	u8 Wrong[16]="Wrong Input!!";
	while(flag)
    44c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    44c8:	88 23       	and	r24, r24
    44ca:	09 f0       	breq	.+2      	; 0x44ce <User_Vid+0x2fa>
    44cc:	50 cf       	rjmp	.-352    	; 0x436e <User_Vid+0x19a>
			case(TWO):break;
			case('O'-48):flag=FALSE;break;
			default:LCD_VidClear();LCD_VidSend_String(Wrong);_delay_ms(1000);
		}
	}
}
    44ce:	cf 5a       	subi	r28, 0xAF	; 175
    44d0:	df 4f       	sbci	r29, 0xFF	; 255
    44d2:	0f b6       	in	r0, 0x3f	; 63
    44d4:	f8 94       	cli
    44d6:	de bf       	out	0x3e, r29	; 62
    44d8:	0f be       	out	0x3f, r0	; 63
    44da:	cd bf       	out	0x3d, r28	; 61
    44dc:	cf 91       	pop	r28
    44de:	df 91       	pop	r29
    44e0:	08 95       	ret

000044e2 <New_User_Vid>:

void New_User_Vid(void)
{
    44e2:	df 93       	push	r29
    44e4:	cf 93       	push	r28
    44e6:	cd b7       	in	r28, 0x3d	; 61
    44e8:	de b7       	in	r29, 0x3e	; 62
    44ea:	c9 54       	subi	r28, 0x49	; 73
    44ec:	d0 40       	sbci	r29, 0x00	; 0
    44ee:	0f b6       	in	r0, 0x3f	; 63
    44f0:	f8 94       	cli
    44f2:	de bf       	out	0x3e, r29	; 62
    44f4:	0f be       	out	0x3f, r0	; 63
    44f6:	cd bf       	out	0x3d, r28	; 61
	u32 input;
	u8 flag=TRUE;
    44f8:	81 e0       	ldi	r24, 0x01	; 1
    44fa:	8b 8f       	std	Y+27, r24	; 0x1b
	u32 data=0;
    44fc:	1f 8a       	std	Y+23, r1	; 0x17
    44fe:	18 8e       	std	Y+24, r1	; 0x18
    4500:	19 8e       	std	Y+25, r1	; 0x19
    4502:	1a 8e       	std	Y+26, r1	; 0x1a
	u8 Option1[16]="Please Enter ID";
    4504:	ce 01       	movw	r24, r28
    4506:	80 96       	adiw	r24, 0x20	; 32
    4508:	22 96       	adiw	r28, 0x02	; 2
    450a:	9f af       	std	Y+63, r25	; 0x3f
    450c:	8e af       	std	Y+62, r24	; 0x3e
    450e:	22 97       	sbiw	r28, 0x02	; 2
    4510:	e1 e2       	ldi	r30, 0x21	; 33
    4512:	f1 e0       	ldi	r31, 0x01	; 1
    4514:	24 96       	adiw	r28, 0x04	; 4
    4516:	ff af       	std	Y+63, r31	; 0x3f
    4518:	ee af       	std	Y+62, r30	; 0x3e
    451a:	24 97       	sbiw	r28, 0x04	; 4
    451c:	f0 e1       	ldi	r31, 0x10	; 16
    451e:	25 96       	adiw	r28, 0x05	; 5
    4520:	ff af       	std	Y+63, r31	; 0x3f
    4522:	25 97       	sbiw	r28, 0x05	; 5
    4524:	24 96       	adiw	r28, 0x04	; 4
    4526:	ee ad       	ldd	r30, Y+62	; 0x3e
    4528:	ff ad       	ldd	r31, Y+63	; 0x3f
    452a:	24 97       	sbiw	r28, 0x04	; 4
    452c:	00 80       	ld	r0, Z
    452e:	24 96       	adiw	r28, 0x04	; 4
    4530:	8e ad       	ldd	r24, Y+62	; 0x3e
    4532:	9f ad       	ldd	r25, Y+63	; 0x3f
    4534:	24 97       	sbiw	r28, 0x04	; 4
    4536:	01 96       	adiw	r24, 0x01	; 1
    4538:	24 96       	adiw	r28, 0x04	; 4
    453a:	9f af       	std	Y+63, r25	; 0x3f
    453c:	8e af       	std	Y+62, r24	; 0x3e
    453e:	24 97       	sbiw	r28, 0x04	; 4
    4540:	22 96       	adiw	r28, 0x02	; 2
    4542:	ee ad       	ldd	r30, Y+62	; 0x3e
    4544:	ff ad       	ldd	r31, Y+63	; 0x3f
    4546:	22 97       	sbiw	r28, 0x02	; 2
    4548:	00 82       	st	Z, r0
    454a:	22 96       	adiw	r28, 0x02	; 2
    454c:	8e ad       	ldd	r24, Y+62	; 0x3e
    454e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4550:	22 97       	sbiw	r28, 0x02	; 2
    4552:	01 96       	adiw	r24, 0x01	; 1
    4554:	22 96       	adiw	r28, 0x02	; 2
    4556:	9f af       	std	Y+63, r25	; 0x3f
    4558:	8e af       	std	Y+62, r24	; 0x3e
    455a:	22 97       	sbiw	r28, 0x02	; 2
    455c:	25 96       	adiw	r28, 0x05	; 5
    455e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4560:	25 97       	sbiw	r28, 0x05	; 5
    4562:	91 50       	subi	r25, 0x01	; 1
    4564:	25 96       	adiw	r28, 0x05	; 5
    4566:	9f af       	std	Y+63, r25	; 0x3f
    4568:	25 97       	sbiw	r28, 0x05	; 5
    456a:	25 96       	adiw	r28, 0x05	; 5
    456c:	ef ad       	ldd	r30, Y+63	; 0x3f
    456e:	25 97       	sbiw	r28, 0x05	; 5
    4570:	ee 23       	and	r30, r30
    4572:	c1 f6       	brne	.-80     	; 0x4524 <New_User_Vid+0x42>
	u8 Option2[16]="Invalid ID !!";
    4574:	ce 01       	movw	r24, r28
    4576:	c0 96       	adiw	r24, 0x30	; 48
    4578:	27 96       	adiw	r28, 0x07	; 7
    457a:	9f af       	std	Y+63, r25	; 0x3f
    457c:	8e af       	std	Y+62, r24	; 0x3e
    457e:	27 97       	sbiw	r28, 0x07	; 7
    4580:	e1 e3       	ldi	r30, 0x31	; 49
    4582:	f1 e0       	ldi	r31, 0x01	; 1
    4584:	29 96       	adiw	r28, 0x09	; 9
    4586:	ff af       	std	Y+63, r31	; 0x3f
    4588:	ee af       	std	Y+62, r30	; 0x3e
    458a:	29 97       	sbiw	r28, 0x09	; 9
    458c:	fe e0       	ldi	r31, 0x0E	; 14
    458e:	2a 96       	adiw	r28, 0x0a	; 10
    4590:	ff af       	std	Y+63, r31	; 0x3f
    4592:	2a 97       	sbiw	r28, 0x0a	; 10
    4594:	29 96       	adiw	r28, 0x09	; 9
    4596:	ee ad       	ldd	r30, Y+62	; 0x3e
    4598:	ff ad       	ldd	r31, Y+63	; 0x3f
    459a:	29 97       	sbiw	r28, 0x09	; 9
    459c:	00 80       	ld	r0, Z
    459e:	29 96       	adiw	r28, 0x09	; 9
    45a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    45a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    45a4:	29 97       	sbiw	r28, 0x09	; 9
    45a6:	01 96       	adiw	r24, 0x01	; 1
    45a8:	29 96       	adiw	r28, 0x09	; 9
    45aa:	9f af       	std	Y+63, r25	; 0x3f
    45ac:	8e af       	std	Y+62, r24	; 0x3e
    45ae:	29 97       	sbiw	r28, 0x09	; 9
    45b0:	27 96       	adiw	r28, 0x07	; 7
    45b2:	ee ad       	ldd	r30, Y+62	; 0x3e
    45b4:	ff ad       	ldd	r31, Y+63	; 0x3f
    45b6:	27 97       	sbiw	r28, 0x07	; 7
    45b8:	00 82       	st	Z, r0
    45ba:	27 96       	adiw	r28, 0x07	; 7
    45bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    45be:	9f ad       	ldd	r25, Y+63	; 0x3f
    45c0:	27 97       	sbiw	r28, 0x07	; 7
    45c2:	01 96       	adiw	r24, 0x01	; 1
    45c4:	27 96       	adiw	r28, 0x07	; 7
    45c6:	9f af       	std	Y+63, r25	; 0x3f
    45c8:	8e af       	std	Y+62, r24	; 0x3e
    45ca:	27 97       	sbiw	r28, 0x07	; 7
    45cc:	2a 96       	adiw	r28, 0x0a	; 10
    45ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    45d0:	2a 97       	sbiw	r28, 0x0a	; 10
    45d2:	91 50       	subi	r25, 0x01	; 1
    45d4:	2a 96       	adiw	r28, 0x0a	; 10
    45d6:	9f af       	std	Y+63, r25	; 0x3f
    45d8:	2a 97       	sbiw	r28, 0x0a	; 10
    45da:	2a 96       	adiw	r28, 0x0a	; 10
    45dc:	ef ad       	ldd	r30, Y+63	; 0x3f
    45de:	2a 97       	sbiw	r28, 0x0a	; 10
    45e0:	ee 23       	and	r30, r30
    45e2:	c1 f6       	brne	.-80     	; 0x4594 <New_User_Vid+0xb2>
    45e4:	1f ae       	std	Y+63, r1	; 0x3f
    45e6:	1e ae       	std	Y+62, r1	; 0x3e
    45e8:	e8 c0       	rjmp	.+464    	; 0x47ba <New_User_Vid+0x2d8>
	while(flag)
	{
		LCD_VidClear();
    45ea:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_VidClear>
		LCD_VidSend_String(Option1);
    45ee:	ce 01       	movw	r24, r28
    45f0:	80 96       	adiw	r24, 0x20	; 32
    45f2:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_VidSend_String>
		LCD_VidSet_Position(0,1);
    45f6:	80 e0       	ldi	r24, 0x00	; 0
    45f8:	61 e0       	ldi	r22, 0x01	; 1
    45fa:	0e 94 96 0c 	call	0x192c	; 0x192c <LCD_VidSet_Position>
		for(u32 i=0,s=1000; i<Admin_Password_Size ; i++,s/=10)
    45fe:	1b 8a       	std	Y+19, r1	; 0x13
    4600:	1c 8a       	std	Y+20, r1	; 0x14
    4602:	1d 8a       	std	Y+21, r1	; 0x15
    4604:	1e 8a       	std	Y+22, r1	; 0x16
    4606:	88 ee       	ldi	r24, 0xE8	; 232
    4608:	93 e0       	ldi	r25, 0x03	; 3
    460a:	a0 e0       	ldi	r26, 0x00	; 0
    460c:	b0 e0       	ldi	r27, 0x00	; 0
    460e:	8f 87       	std	Y+15, r24	; 0x0f
    4610:	98 8b       	std	Y+16, r25	; 0x10
    4612:	a9 8b       	std	Y+17, r26	; 0x11
    4614:	ba 8b       	std	Y+18, r27	; 0x12
    4616:	47 c0       	rjmp	.+142    	; 0x46a6 <New_User_Vid+0x1c4>
		{
			input=Keypad_u8Get_Pressed_Key_Wait();
    4618:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <Keypad_u8Get_Pressed_Key_Wait>
    461c:	88 2f       	mov	r24, r24
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	a0 e0       	ldi	r26, 0x00	; 0
    4622:	b0 e0       	ldi	r27, 0x00	; 0
    4624:	8c 8f       	std	Y+28, r24	; 0x1c
    4626:	9d 8f       	std	Y+29, r25	; 0x1d
    4628:	ae 8f       	std	Y+30, r26	; 0x1e
    462a:	bf 8f       	std	Y+31, r27	; 0x1f
			LCD_VidSend_Data(input);
    462c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    462e:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_VidSend_Data>
			data+=((input-48)*s);
    4632:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4634:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4636:	ae 8d       	ldd	r26, Y+30	; 0x1e
    4638:	bf 8d       	ldd	r27, Y+31	; 0x1f
    463a:	c0 97       	sbiw	r24, 0x30	; 48
    463c:	a1 09       	sbc	r26, r1
    463e:	b1 09       	sbc	r27, r1
    4640:	2f 85       	ldd	r18, Y+15	; 0x0f
    4642:	38 89       	ldd	r19, Y+16	; 0x10
    4644:	49 89       	ldd	r20, Y+17	; 0x11
    4646:	5a 89       	ldd	r21, Y+18	; 0x12
    4648:	bc 01       	movw	r22, r24
    464a:	cd 01       	movw	r24, r26
    464c:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
    4650:	9b 01       	movw	r18, r22
    4652:	ac 01       	movw	r20, r24
    4654:	8f 89       	ldd	r24, Y+23	; 0x17
    4656:	98 8d       	ldd	r25, Y+24	; 0x18
    4658:	a9 8d       	ldd	r26, Y+25	; 0x19
    465a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    465c:	82 0f       	add	r24, r18
    465e:	93 1f       	adc	r25, r19
    4660:	a4 1f       	adc	r26, r20
    4662:	b5 1f       	adc	r27, r21
    4664:	8f 8b       	std	Y+23, r24	; 0x17
    4666:	98 8f       	std	Y+24, r25	; 0x18
    4668:	a9 8f       	std	Y+25, r26	; 0x19
    466a:	ba 8f       	std	Y+26, r27	; 0x1a
	while(flag)
	{
		LCD_VidClear();
		LCD_VidSend_String(Option1);
		LCD_VidSet_Position(0,1);
		for(u32 i=0,s=1000; i<Admin_Password_Size ; i++,s/=10)
    466c:	8b 89       	ldd	r24, Y+19	; 0x13
    466e:	9c 89       	ldd	r25, Y+20	; 0x14
    4670:	ad 89       	ldd	r26, Y+21	; 0x15
    4672:	be 89       	ldd	r27, Y+22	; 0x16
    4674:	01 96       	adiw	r24, 0x01	; 1
    4676:	a1 1d       	adc	r26, r1
    4678:	b1 1d       	adc	r27, r1
    467a:	8b 8b       	std	Y+19, r24	; 0x13
    467c:	9c 8b       	std	Y+20, r25	; 0x14
    467e:	ad 8b       	std	Y+21, r26	; 0x15
    4680:	be 8b       	std	Y+22, r27	; 0x16
    4682:	8f 85       	ldd	r24, Y+15	; 0x0f
    4684:	98 89       	ldd	r25, Y+16	; 0x10
    4686:	a9 89       	ldd	r26, Y+17	; 0x11
    4688:	ba 89       	ldd	r27, Y+18	; 0x12
    468a:	2a e0       	ldi	r18, 0x0A	; 10
    468c:	30 e0       	ldi	r19, 0x00	; 0
    468e:	40 e0       	ldi	r20, 0x00	; 0
    4690:	50 e0       	ldi	r21, 0x00	; 0
    4692:	bc 01       	movw	r22, r24
    4694:	cd 01       	movw	r24, r26
    4696:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodsi4>
    469a:	da 01       	movw	r26, r20
    469c:	c9 01       	movw	r24, r18
    469e:	8f 87       	std	Y+15, r24	; 0x0f
    46a0:	98 8b       	std	Y+16, r25	; 0x10
    46a2:	a9 8b       	std	Y+17, r26	; 0x11
    46a4:	ba 8b       	std	Y+18, r27	; 0x12
    46a6:	8b 89       	ldd	r24, Y+19	; 0x13
    46a8:	9c 89       	ldd	r25, Y+20	; 0x14
    46aa:	ad 89       	ldd	r26, Y+21	; 0x15
    46ac:	be 89       	ldd	r27, Y+22	; 0x16
    46ae:	84 30       	cpi	r24, 0x04	; 4
    46b0:	91 05       	cpc	r25, r1
    46b2:	a1 05       	cpc	r26, r1
    46b4:	b1 05       	cpc	r27, r1
    46b6:	08 f4       	brcc	.+2      	; 0x46ba <New_User_Vid+0x1d8>
    46b8:	af cf       	rjmp	.-162    	; 0x4618 <New_User_Vid+0x136>
		{
			input=Keypad_u8Get_Pressed_Key_Wait();
			LCD_VidSend_Data(input);
			data+=((input-48)*s);
		}
		if(ID_Check_u8(data)==FALSE)
    46ba:	8f 89       	ldd	r24, Y+23	; 0x17
    46bc:	0e 94 0d 24 	call	0x481a	; 0x481a <ID_Check_u8>
    46c0:	88 23       	and	r24, r24
    46c2:	09 f0       	breq	.+2      	; 0x46c6 <New_User_Vid+0x1e4>
    46c4:	79 c0       	rjmp	.+242    	; 0x47b8 <New_User_Vid+0x2d6>
		{
			LCD_VidClear();
    46c6:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_VidClear>
			LCD_VidSend_String(Option2);
    46ca:	ce 01       	movw	r24, r28
    46cc:	c0 96       	adiw	r24, 0x30	; 48
    46ce:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_VidSend_String>
    46d2:	80 e0       	ldi	r24, 0x00	; 0
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	aa ef       	ldi	r26, 0xFA	; 250
    46d8:	b3 e4       	ldi	r27, 0x43	; 67
    46da:	8b 87       	std	Y+11, r24	; 0x0b
    46dc:	9c 87       	std	Y+12, r25	; 0x0c
    46de:	ad 87       	std	Y+13, r26	; 0x0d
    46e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    46e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    46e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    46e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    46ea:	20 e0       	ldi	r18, 0x00	; 0
    46ec:	30 e0       	ldi	r19, 0x00	; 0
    46ee:	4a e7       	ldi	r20, 0x7A	; 122
    46f0:	53 e4       	ldi	r21, 0x43	; 67
    46f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46f6:	dc 01       	movw	r26, r24
    46f8:	cb 01       	movw	r24, r22
    46fa:	8f 83       	std	Y+7, r24	; 0x07
    46fc:	98 87       	std	Y+8, r25	; 0x08
    46fe:	a9 87       	std	Y+9, r26	; 0x09
    4700:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4702:	6f 81       	ldd	r22, Y+7	; 0x07
    4704:	78 85       	ldd	r23, Y+8	; 0x08
    4706:	89 85       	ldd	r24, Y+9	; 0x09
    4708:	9a 85       	ldd	r25, Y+10	; 0x0a
    470a:	20 e0       	ldi	r18, 0x00	; 0
    470c:	30 e0       	ldi	r19, 0x00	; 0
    470e:	40 e8       	ldi	r20, 0x80	; 128
    4710:	5f e3       	ldi	r21, 0x3F	; 63
    4712:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4716:	88 23       	and	r24, r24
    4718:	2c f4       	brge	.+10     	; 0x4724 <New_User_Vid+0x242>
		__ticks = 1;
    471a:	81 e0       	ldi	r24, 0x01	; 1
    471c:	90 e0       	ldi	r25, 0x00	; 0
    471e:	9e 83       	std	Y+6, r25	; 0x06
    4720:	8d 83       	std	Y+5, r24	; 0x05
    4722:	3f c0       	rjmp	.+126    	; 0x47a2 <New_User_Vid+0x2c0>
	else if (__tmp > 65535)
    4724:	6f 81       	ldd	r22, Y+7	; 0x07
    4726:	78 85       	ldd	r23, Y+8	; 0x08
    4728:	89 85       	ldd	r24, Y+9	; 0x09
    472a:	9a 85       	ldd	r25, Y+10	; 0x0a
    472c:	20 e0       	ldi	r18, 0x00	; 0
    472e:	3f ef       	ldi	r19, 0xFF	; 255
    4730:	4f e7       	ldi	r20, 0x7F	; 127
    4732:	57 e4       	ldi	r21, 0x47	; 71
    4734:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4738:	18 16       	cp	r1, r24
    473a:	4c f5       	brge	.+82     	; 0x478e <New_User_Vid+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    473c:	6b 85       	ldd	r22, Y+11	; 0x0b
    473e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4740:	8d 85       	ldd	r24, Y+13	; 0x0d
    4742:	9e 85       	ldd	r25, Y+14	; 0x0e
    4744:	20 e0       	ldi	r18, 0x00	; 0
    4746:	30 e0       	ldi	r19, 0x00	; 0
    4748:	40 e2       	ldi	r20, 0x20	; 32
    474a:	51 e4       	ldi	r21, 0x41	; 65
    474c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4750:	dc 01       	movw	r26, r24
    4752:	cb 01       	movw	r24, r22
    4754:	bc 01       	movw	r22, r24
    4756:	cd 01       	movw	r24, r26
    4758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    475c:	dc 01       	movw	r26, r24
    475e:	cb 01       	movw	r24, r22
    4760:	9e 83       	std	Y+6, r25	; 0x06
    4762:	8d 83       	std	Y+5, r24	; 0x05
    4764:	0f c0       	rjmp	.+30     	; 0x4784 <New_User_Vid+0x2a2>
    4766:	89 e1       	ldi	r24, 0x19	; 25
    4768:	90 e0       	ldi	r25, 0x00	; 0
    476a:	9c 83       	std	Y+4, r25	; 0x04
    476c:	8b 83       	std	Y+3, r24	; 0x03
    476e:	8b 81       	ldd	r24, Y+3	; 0x03
    4770:	9c 81       	ldd	r25, Y+4	; 0x04
    4772:	01 97       	sbiw	r24, 0x01	; 1
    4774:	f1 f7       	brne	.-4      	; 0x4772 <New_User_Vid+0x290>
    4776:	9c 83       	std	Y+4, r25	; 0x04
    4778:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    477a:	8d 81       	ldd	r24, Y+5	; 0x05
    477c:	9e 81       	ldd	r25, Y+6	; 0x06
    477e:	01 97       	sbiw	r24, 0x01	; 1
    4780:	9e 83       	std	Y+6, r25	; 0x06
    4782:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4784:	8d 81       	ldd	r24, Y+5	; 0x05
    4786:	9e 81       	ldd	r25, Y+6	; 0x06
    4788:	00 97       	sbiw	r24, 0x00	; 0
    478a:	69 f7       	brne	.-38     	; 0x4766 <New_User_Vid+0x284>
    478c:	16 c0       	rjmp	.+44     	; 0x47ba <New_User_Vid+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    478e:	6f 81       	ldd	r22, Y+7	; 0x07
    4790:	78 85       	ldd	r23, Y+8	; 0x08
    4792:	89 85       	ldd	r24, Y+9	; 0x09
    4794:	9a 85       	ldd	r25, Y+10	; 0x0a
    4796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    479a:	dc 01       	movw	r26, r24
    479c:	cb 01       	movw	r24, r22
    479e:	9e 83       	std	Y+6, r25	; 0x06
    47a0:	8d 83       	std	Y+5, r24	; 0x05
    47a2:	8d 81       	ldd	r24, Y+5	; 0x05
    47a4:	9e 81       	ldd	r25, Y+6	; 0x06
    47a6:	9a 83       	std	Y+2, r25	; 0x02
    47a8:	89 83       	std	Y+1, r24	; 0x01
    47aa:	89 81       	ldd	r24, Y+1	; 0x01
    47ac:	9a 81       	ldd	r25, Y+2	; 0x02
    47ae:	01 97       	sbiw	r24, 0x01	; 1
    47b0:	f1 f7       	brne	.-4      	; 0x47ae <New_User_Vid+0x2cc>
    47b2:	9a 83       	std	Y+2, r25	; 0x02
    47b4:	89 83       	std	Y+1, r24	; 0x01
    47b6:	01 c0       	rjmp	.+2      	; 0x47ba <New_User_Vid+0x2d8>
			_delay_ms(500);
		}
		else{flag=FALSE;}
    47b8:	1b 8e       	std	Y+27, r1	; 0x1b
	u32 input;
	u8 flag=TRUE;
	u32 data=0;
	u8 Option1[16]="Please Enter ID";
	u8 Option2[16]="Invalid ID !!";
	while(flag)
    47ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47bc:	88 23       	and	r24, r24
    47be:	09 f0       	breq	.+2      	; 0x47c2 <New_User_Vid+0x2e0>
    47c0:	14 cf       	rjmp	.-472    	; 0x45ea <New_User_Vid+0x108>
			LCD_VidSend_String(Option2);
			_delay_ms(500);
		}
		else{flag=FALSE;}
	}
	parking_data[Global_Counter].id=data;
    47c2:	80 91 be 02 	lds	r24, 0x02BE
    47c6:	88 2f       	mov	r24, r24
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	2f 89       	ldd	r18, Y+23	; 0x17
    47cc:	38 8d       	ldd	r19, Y+24	; 0x18
    47ce:	88 0f       	add	r24, r24
    47d0:	99 1f       	adc	r25, r25
    47d2:	88 0f       	add	r24, r24
    47d4:	99 1f       	adc	r25, r25
    47d6:	fc 01       	movw	r30, r24
    47d8:	e1 54       	subi	r30, 0x41	; 65
    47da:	fd 4f       	sbci	r31, 0xFD	; 253
    47dc:	31 83       	std	Z+1, r19	; 0x01
    47de:	20 83       	st	Z, r18
	parking_data[Global_Counter].state=HI;
    47e0:	80 91 be 02 	lds	r24, 0x02BE
    47e4:	88 2f       	mov	r24, r24
    47e6:	90 e0       	ldi	r25, 0x00	; 0
    47e8:	88 0f       	add	r24, r24
    47ea:	99 1f       	adc	r25, r25
    47ec:	01 96       	adiw	r24, 0x01	; 1
    47ee:	88 0f       	add	r24, r24
    47f0:	99 1f       	adc	r25, r25
    47f2:	fc 01       	movw	r30, r24
    47f4:	e1 54       	subi	r30, 0x41	; 65
    47f6:	fd 4f       	sbci	r31, 0xFD	; 253
    47f8:	81 e0       	ldi	r24, 0x01	; 1
    47fa:	80 83       	st	Z, r24
	/*Timer Start*/
	Global_Counter++;
    47fc:	80 91 be 02 	lds	r24, 0x02BE
    4800:	8f 5f       	subi	r24, 0xFF	; 255
    4802:	80 93 be 02 	sts	0x02BE, r24
}
    4806:	c7 5b       	subi	r28, 0xB7	; 183
    4808:	df 4f       	sbci	r29, 0xFF	; 255
    480a:	0f b6       	in	r0, 0x3f	; 63
    480c:	f8 94       	cli
    480e:	de bf       	out	0x3e, r29	; 62
    4810:	0f be       	out	0x3f, r0	; 63
    4812:	cd bf       	out	0x3d, r28	; 61
    4814:	cf 91       	pop	r28
    4816:	df 91       	pop	r29
    4818:	08 95       	ret

0000481a <ID_Check_u8>:

u8 ID_Check_u8(u8 Copy_u8id)
{
    481a:	df 93       	push	r29
    481c:	cf 93       	push	r28
    481e:	00 d0       	rcall	.+0      	; 0x4820 <ID_Check_u8+0x6>
    4820:	0f 92       	push	r0
    4822:	cd b7       	in	r28, 0x3d	; 61
    4824:	de b7       	in	r29, 0x3e	; 62
    4826:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0 ; i<Maximum_Clients;i++)
    4828:	19 82       	std	Y+1, r1	; 0x01
    482a:	25 c0       	rjmp	.+74     	; 0x4876 <ID_Check_u8+0x5c>
	{
		if((parking_data[i].state==HI)&&(parking_data[i].id==Copy_u8id))
    482c:	89 81       	ldd	r24, Y+1	; 0x01
    482e:	88 2f       	mov	r24, r24
    4830:	90 e0       	ldi	r25, 0x00	; 0
    4832:	88 0f       	add	r24, r24
    4834:	99 1f       	adc	r25, r25
    4836:	01 96       	adiw	r24, 0x01	; 1
    4838:	88 0f       	add	r24, r24
    483a:	99 1f       	adc	r25, r25
    483c:	fc 01       	movw	r30, r24
    483e:	e1 54       	subi	r30, 0x41	; 65
    4840:	fd 4f       	sbci	r31, 0xFD	; 253
    4842:	80 81       	ld	r24, Z
    4844:	81 30       	cpi	r24, 0x01	; 1
    4846:	a1 f4       	brne	.+40     	; 0x4870 <ID_Check_u8+0x56>
    4848:	89 81       	ldd	r24, Y+1	; 0x01
    484a:	88 2f       	mov	r24, r24
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	88 0f       	add	r24, r24
    4850:	99 1f       	adc	r25, r25
    4852:	88 0f       	add	r24, r24
    4854:	99 1f       	adc	r25, r25
    4856:	fc 01       	movw	r30, r24
    4858:	e1 54       	subi	r30, 0x41	; 65
    485a:	fd 4f       	sbci	r31, 0xFD	; 253
    485c:	20 81       	ld	r18, Z
    485e:	31 81       	ldd	r19, Z+1	; 0x01
    4860:	8a 81       	ldd	r24, Y+2	; 0x02
    4862:	88 2f       	mov	r24, r24
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	28 17       	cp	r18, r24
    4868:	39 07       	cpc	r19, r25
    486a:	11 f4       	brne	.+4      	; 0x4870 <ID_Check_u8+0x56>
		{
			return FALSE;
    486c:	1b 82       	std	Y+3, r1	; 0x03
    486e:	08 c0       	rjmp	.+16     	; 0x4880 <ID_Check_u8+0x66>
	Global_Counter++;
}

u8 ID_Check_u8(u8 Copy_u8id)
{
	for(u8 i=0 ; i<Maximum_Clients;i++)
    4870:	89 81       	ldd	r24, Y+1	; 0x01
    4872:	8f 5f       	subi	r24, 0xFF	; 255
    4874:	89 83       	std	Y+1, r24	; 0x01
    4876:	89 81       	ldd	r24, Y+1	; 0x01
    4878:	82 33       	cpi	r24, 0x32	; 50
    487a:	c0 f2       	brcs	.-80     	; 0x482c <ID_Check_u8+0x12>
		if((parking_data[i].state==HI)&&(parking_data[i].id==Copy_u8id))
		{
			return FALSE;
		}
	}
	return TRUE;
    487c:	81 e0       	ldi	r24, 0x01	; 1
    487e:	8b 83       	std	Y+3, r24	; 0x03
    4880:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4882:	0f 90       	pop	r0
    4884:	0f 90       	pop	r0
    4886:	0f 90       	pop	r0
    4888:	cf 91       	pop	r28
    488a:	df 91       	pop	r29
    488c:	08 95       	ret

0000488e <Password_u8>:

u8 Password_u8(void)
{
    488e:	df 93       	push	r29
    4890:	cf 93       	push	r28
    4892:	cd b7       	in	r28, 0x3d	; 61
    4894:	de b7       	in	r29, 0x3e	; 62
    4896:	c0 56       	subi	r28, 0x60	; 96
    4898:	d0 40       	sbci	r29, 0x00	; 0
    489a:	0f b6       	in	r0, 0x3f	; 63
    489c:	f8 94       	cli
    489e:	de bf       	out	0x3e, r29	; 62
    48a0:	0f be       	out	0x3f, r0	; 63
    48a2:	cd bf       	out	0x3d, r28	; 61
	u8 data,password=ZERO;
    48a4:	1f 8e       	std	Y+31, r1	; 0x1f
	u8 flag=TRUE;
    48a6:	81 e0       	ldi	r24, 0x01	; 1
    48a8:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 Enter[16]="Enter Password";
    48aa:	ce 01       	movw	r24, r28
    48ac:	81 96       	adiw	r24, 0x21	; 33
    48ae:	64 96       	adiw	r28, 0x14	; 20
    48b0:	9f af       	std	Y+63, r25	; 0x3f
    48b2:	8e af       	std	Y+62, r24	; 0x3e
    48b4:	64 97       	sbiw	r28, 0x14	; 20
    48b6:	a1 e4       	ldi	r26, 0x41	; 65
    48b8:	b1 e0       	ldi	r27, 0x01	; 1
    48ba:	66 96       	adiw	r28, 0x16	; 22
    48bc:	bf af       	std	Y+63, r27	; 0x3f
    48be:	ae af       	std	Y+62, r26	; 0x3e
    48c0:	66 97       	sbiw	r28, 0x16	; 22
    48c2:	bf e0       	ldi	r27, 0x0F	; 15
    48c4:	67 96       	adiw	r28, 0x17	; 23
    48c6:	bf af       	std	Y+63, r27	; 0x3f
    48c8:	67 97       	sbiw	r28, 0x17	; 23
    48ca:	66 96       	adiw	r28, 0x16	; 22
    48cc:	ee ad       	ldd	r30, Y+62	; 0x3e
    48ce:	ff ad       	ldd	r31, Y+63	; 0x3f
    48d0:	66 97       	sbiw	r28, 0x16	; 22
    48d2:	00 80       	ld	r0, Z
    48d4:	66 96       	adiw	r28, 0x16	; 22
    48d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    48d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    48da:	66 97       	sbiw	r28, 0x16	; 22
    48dc:	01 96       	adiw	r24, 0x01	; 1
    48de:	66 96       	adiw	r28, 0x16	; 22
    48e0:	9f af       	std	Y+63, r25	; 0x3f
    48e2:	8e af       	std	Y+62, r24	; 0x3e
    48e4:	66 97       	sbiw	r28, 0x16	; 22
    48e6:	64 96       	adiw	r28, 0x14	; 20
    48e8:	ae ad       	ldd	r26, Y+62	; 0x3e
    48ea:	bf ad       	ldd	r27, Y+63	; 0x3f
    48ec:	64 97       	sbiw	r28, 0x14	; 20
    48ee:	0c 92       	st	X, r0
    48f0:	64 96       	adiw	r28, 0x14	; 20
    48f2:	ee ad       	ldd	r30, Y+62	; 0x3e
    48f4:	ff ad       	ldd	r31, Y+63	; 0x3f
    48f6:	64 97       	sbiw	r28, 0x14	; 20
    48f8:	31 96       	adiw	r30, 0x01	; 1
    48fa:	64 96       	adiw	r28, 0x14	; 20
    48fc:	ff af       	std	Y+63, r31	; 0x3f
    48fe:	ee af       	std	Y+62, r30	; 0x3e
    4900:	64 97       	sbiw	r28, 0x14	; 20
    4902:	67 96       	adiw	r28, 0x17	; 23
    4904:	ff ad       	ldd	r31, Y+63	; 0x3f
    4906:	67 97       	sbiw	r28, 0x17	; 23
    4908:	f1 50       	subi	r31, 0x01	; 1
    490a:	67 96       	adiw	r28, 0x17	; 23
    490c:	ff af       	std	Y+63, r31	; 0x3f
    490e:	67 97       	sbiw	r28, 0x17	; 23
    4910:	67 96       	adiw	r28, 0x17	; 23
    4912:	8f ad       	ldd	r24, Y+63	; 0x3f
    4914:	67 97       	sbiw	r28, 0x17	; 23
    4916:	88 23       	and	r24, r24
    4918:	c1 f6       	brne	.-80     	; 0x48ca <Password_u8+0x3c>
    491a:	18 aa       	std	Y+48, r1	; 0x30
	u8 Wrong[16]="Wrong Password";
    491c:	de 01       	movw	r26, r28
    491e:	d1 96       	adiw	r26, 0x31	; 49
    4920:	69 96       	adiw	r28, 0x19	; 25
    4922:	bf af       	std	Y+63, r27	; 0x3f
    4924:	ae af       	std	Y+62, r26	; 0x3e
    4926:	69 97       	sbiw	r28, 0x19	; 25
    4928:	e1 e5       	ldi	r30, 0x51	; 81
    492a:	f1 e0       	ldi	r31, 0x01	; 1
    492c:	6b 96       	adiw	r28, 0x1b	; 27
    492e:	ff af       	std	Y+63, r31	; 0x3f
    4930:	ee af       	std	Y+62, r30	; 0x3e
    4932:	6b 97       	sbiw	r28, 0x1b	; 27
    4934:	ff e0       	ldi	r31, 0x0F	; 15
    4936:	6c 96       	adiw	r28, 0x1c	; 28
    4938:	ff af       	std	Y+63, r31	; 0x3f
    493a:	6c 97       	sbiw	r28, 0x1c	; 28
    493c:	6b 96       	adiw	r28, 0x1b	; 27
    493e:	ae ad       	ldd	r26, Y+62	; 0x3e
    4940:	bf ad       	ldd	r27, Y+63	; 0x3f
    4942:	6b 97       	sbiw	r28, 0x1b	; 27
    4944:	0c 90       	ld	r0, X
    4946:	6b 96       	adiw	r28, 0x1b	; 27
    4948:	ee ad       	ldd	r30, Y+62	; 0x3e
    494a:	ff ad       	ldd	r31, Y+63	; 0x3f
    494c:	6b 97       	sbiw	r28, 0x1b	; 27
    494e:	31 96       	adiw	r30, 0x01	; 1
    4950:	6b 96       	adiw	r28, 0x1b	; 27
    4952:	ff af       	std	Y+63, r31	; 0x3f
    4954:	ee af       	std	Y+62, r30	; 0x3e
    4956:	6b 97       	sbiw	r28, 0x1b	; 27
    4958:	69 96       	adiw	r28, 0x19	; 25
    495a:	ae ad       	ldd	r26, Y+62	; 0x3e
    495c:	bf ad       	ldd	r27, Y+63	; 0x3f
    495e:	69 97       	sbiw	r28, 0x19	; 25
    4960:	0c 92       	st	X, r0
    4962:	69 96       	adiw	r28, 0x19	; 25
    4964:	ee ad       	ldd	r30, Y+62	; 0x3e
    4966:	ff ad       	ldd	r31, Y+63	; 0x3f
    4968:	69 97       	sbiw	r28, 0x19	; 25
    496a:	31 96       	adiw	r30, 0x01	; 1
    496c:	69 96       	adiw	r28, 0x19	; 25
    496e:	ff af       	std	Y+63, r31	; 0x3f
    4970:	ee af       	std	Y+62, r30	; 0x3e
    4972:	69 97       	sbiw	r28, 0x19	; 25
    4974:	6c 96       	adiw	r28, 0x1c	; 28
    4976:	ff ad       	ldd	r31, Y+63	; 0x3f
    4978:	6c 97       	sbiw	r28, 0x1c	; 28
    497a:	f1 50       	subi	r31, 0x01	; 1
    497c:	6c 96       	adiw	r28, 0x1c	; 28
    497e:	ff af       	std	Y+63, r31	; 0x3f
    4980:	6c 97       	sbiw	r28, 0x1c	; 28
    4982:	6c 96       	adiw	r28, 0x1c	; 28
    4984:	8f ad       	ldd	r24, Y+63	; 0x3f
    4986:	6c 97       	sbiw	r28, 0x1c	; 28
    4988:	88 23       	and	r24, r24
    498a:	c1 f6       	brne	.-80     	; 0x493c <Password_u8+0xae>
    498c:	fe 01       	movw	r30, r28
    498e:	e0 5c       	subi	r30, 0xC0	; 192
    4990:	ff 4f       	sbci	r31, 0xFF	; 255
    4992:	10 82       	st	Z, r1
	u8 Welcome[16]="Welcome...";
    4994:	de 01       	movw	r26, r28
    4996:	af 5b       	subi	r26, 0xBF	; 191
    4998:	bf 4f       	sbci	r27, 0xFF	; 255
    499a:	6e 96       	adiw	r28, 0x1e	; 30
    499c:	bf af       	std	Y+63, r27	; 0x3f
    499e:	ae af       	std	Y+62, r26	; 0x3e
    49a0:	6e 97       	sbiw	r28, 0x1e	; 30
    49a2:	e1 e6       	ldi	r30, 0x61	; 97
    49a4:	f1 e0       	ldi	r31, 0x01	; 1
    49a6:	a0 96       	adiw	r28, 0x20	; 32
    49a8:	ff af       	std	Y+63, r31	; 0x3f
    49aa:	ee af       	std	Y+62, r30	; 0x3e
    49ac:	a0 97       	sbiw	r28, 0x20	; 32
    49ae:	fb e0       	ldi	r31, 0x0B	; 11
    49b0:	a1 96       	adiw	r28, 0x21	; 33
    49b2:	ff af       	std	Y+63, r31	; 0x3f
    49b4:	a1 97       	sbiw	r28, 0x21	; 33
    49b6:	a0 96       	adiw	r28, 0x20	; 32
    49b8:	ae ad       	ldd	r26, Y+62	; 0x3e
    49ba:	bf ad       	ldd	r27, Y+63	; 0x3f
    49bc:	a0 97       	sbiw	r28, 0x20	; 32
    49be:	0c 90       	ld	r0, X
    49c0:	a0 96       	adiw	r28, 0x20	; 32
    49c2:	ee ad       	ldd	r30, Y+62	; 0x3e
    49c4:	ff ad       	ldd	r31, Y+63	; 0x3f
    49c6:	a0 97       	sbiw	r28, 0x20	; 32
    49c8:	31 96       	adiw	r30, 0x01	; 1
    49ca:	a0 96       	adiw	r28, 0x20	; 32
    49cc:	ff af       	std	Y+63, r31	; 0x3f
    49ce:	ee af       	std	Y+62, r30	; 0x3e
    49d0:	a0 97       	sbiw	r28, 0x20	; 32
    49d2:	6e 96       	adiw	r28, 0x1e	; 30
    49d4:	ae ad       	ldd	r26, Y+62	; 0x3e
    49d6:	bf ad       	ldd	r27, Y+63	; 0x3f
    49d8:	6e 97       	sbiw	r28, 0x1e	; 30
    49da:	0c 92       	st	X, r0
    49dc:	6e 96       	adiw	r28, 0x1e	; 30
    49de:	ee ad       	ldd	r30, Y+62	; 0x3e
    49e0:	ff ad       	ldd	r31, Y+63	; 0x3f
    49e2:	6e 97       	sbiw	r28, 0x1e	; 30
    49e4:	31 96       	adiw	r30, 0x01	; 1
    49e6:	6e 96       	adiw	r28, 0x1e	; 30
    49e8:	ff af       	std	Y+63, r31	; 0x3f
    49ea:	ee af       	std	Y+62, r30	; 0x3e
    49ec:	6e 97       	sbiw	r28, 0x1e	; 30
    49ee:	a1 96       	adiw	r28, 0x21	; 33
    49f0:	ff ad       	ldd	r31, Y+63	; 0x3f
    49f2:	a1 97       	sbiw	r28, 0x21	; 33
    49f4:	f1 50       	subi	r31, 0x01	; 1
    49f6:	a1 96       	adiw	r28, 0x21	; 33
    49f8:	ff af       	std	Y+63, r31	; 0x3f
    49fa:	a1 97       	sbiw	r28, 0x21	; 33
    49fc:	a1 96       	adiw	r28, 0x21	; 33
    49fe:	8f ad       	ldd	r24, Y+63	; 0x3f
    4a00:	a1 97       	sbiw	r28, 0x21	; 33
    4a02:	88 23       	and	r24, r24
    4a04:	c1 f6       	brne	.-80     	; 0x49b6 <Password_u8+0x128>
    4a06:	ce 01       	movw	r24, r28
    4a08:	84 5b       	subi	r24, 0xB4	; 180
    4a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a0c:	25 e0       	ldi	r18, 0x05	; 5
    4a0e:	fc 01       	movw	r30, r24
    4a10:	df 01       	movw	r26, r30
    4a12:	82 2f       	mov	r24, r18
    4a14:	1d 92       	st	X+, r1
    4a16:	8a 95       	dec	r24
    4a18:	e9 f7       	brne	.-6      	; 0x4a14 <Password_u8+0x186>
    4a1a:	2a c1       	rjmp	.+596    	; 0x4c70 <Password_u8+0x3e2>
	while(flag)
	{
		LCD_VidClear();
    4a1c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LCD_VidClear>
		LCD_VidSet_Position(0,0);
    4a20:	80 e0       	ldi	r24, 0x00	; 0
    4a22:	60 e0       	ldi	r22, 0x00	; 0
    4a24:	0e 94 96 0c 	call	0x192c	; 0x192c <LCD_VidSet_Position>
		LCD_VidSend_String(Enter);
    4a28:	ce 01       	movw	r24, r28
    4a2a:	81 96       	adiw	r24, 0x21	; 33
    4a2c:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_VidSend_String>
		LCD_VidSet_Position(0,1);
    4a30:	80 e0       	ldi	r24, 0x00	; 0
    4a32:	61 e0       	ldi	r22, 0x01	; 1
    4a34:	0e 94 96 0c 	call	0x192c	; 0x192c <LCD_VidSet_Position>
		for(u8 c=0;c<Admin_Password_Size;c++)
    4a38:	1d 8e       	std	Y+29, r1	; 0x1d
    4a3a:	1a c0       	rjmp	.+52     	; 0x4a70 <Password_u8+0x1e2>
		{
			data=Keypad_u8Get_Pressed_Key_Wait();
    4a3c:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <Keypad_u8Get_Pressed_Key_Wait>
    4a40:	88 a3       	std	Y+32, r24	; 0x20
			if(data=='O'){return FALSE;}
    4a42:	88 a1       	ldd	r24, Y+32	; 0x20
    4a44:	8f 34       	cpi	r24, 0x4F	; 79
    4a46:	21 f4       	brne	.+8      	; 0x4a50 <Password_u8+0x1c2>
    4a48:	62 96       	adiw	r28, 0x12	; 18
    4a4a:	1f ae       	std	Y+63, r1	; 0x3f
    4a4c:	62 97       	sbiw	r28, 0x12	; 18
    4a4e:	17 c1       	rjmp	.+558    	; 0x4c7e <Password_u8+0x3f0>
			LCD_VidSend_Data('*');
    4a50:	8a e2       	ldi	r24, 0x2A	; 42
    4a52:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_VidSend_Data>
			LCD_VidSend_Data(' ');
    4a56:	80 e2       	ldi	r24, 0x20	; 32
    4a58:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_VidSend_Data>
			data-=Asci_Zero;
    4a5c:	88 a1       	ldd	r24, Y+32	; 0x20
    4a5e:	80 53       	subi	r24, 0x30	; 48
    4a60:	88 a3       	std	Y+32, r24	; 0x20
			password+=data;
    4a62:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4a64:	88 a1       	ldd	r24, Y+32	; 0x20
    4a66:	89 0f       	add	r24, r25
    4a68:	8f 8f       	std	Y+31, r24	; 0x1f
	{
		LCD_VidClear();
		LCD_VidSet_Position(0,0);
		LCD_VidSend_String(Enter);
		LCD_VidSet_Position(0,1);
		for(u8 c=0;c<Admin_Password_Size;c++)
    4a6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a6c:	8f 5f       	subi	r24, 0xFF	; 255
    4a6e:	8d 8f       	std	Y+29, r24	; 0x1d
    4a70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a72:	84 30       	cpi	r24, 0x04	; 4
    4a74:	18 f3       	brcs	.-58     	; 0x4a3c <Password_u8+0x1ae>
			LCD_VidSend_Data('*');
			LCD_VidSend_Data(' ');
			data-=Asci_Zero;
			password+=data;
		}
		if(password == Admin_Password_Add)
    4a76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a78:	8a 30       	cpi	r24, 0x0A	; 10
    4a7a:	09 f0       	breq	.+2      	; 0x4a7e <Password_u8+0x1f0>
    4a7c:	7f c0       	rjmp	.+254    	; 0x4b7c <Password_u8+0x2ee>
		{
			flag=FALSE;
    4a7e:	1e 8e       	std	Y+30, r1	; 0x1e
			LCD_VidInitialization();
    4a80:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_VidInitialization>
			LCD_VidSend_String(Welcome);
    4a84:	ce 01       	movw	r24, r28
    4a86:	8f 5b       	subi	r24, 0xBF	; 191
    4a88:	9f 4f       	sbci	r25, 0xFF	; 255
    4a8a:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_VidSend_String>
    4a8e:	80 e0       	ldi	r24, 0x00	; 0
    4a90:	90 e0       	ldi	r25, 0x00	; 0
    4a92:	aa e7       	ldi	r26, 0x7A	; 122
    4a94:	b4 e4       	ldi	r27, 0x44	; 68
    4a96:	89 8f       	std	Y+25, r24	; 0x19
    4a98:	9a 8f       	std	Y+26, r25	; 0x1a
    4a9a:	ab 8f       	std	Y+27, r26	; 0x1b
    4a9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a9e:	69 8d       	ldd	r22, Y+25	; 0x19
    4aa0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4aa2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4aa4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4aa6:	20 e0       	ldi	r18, 0x00	; 0
    4aa8:	30 e0       	ldi	r19, 0x00	; 0
    4aaa:	4a e7       	ldi	r20, 0x7A	; 122
    4aac:	53 e4       	ldi	r21, 0x43	; 67
    4aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ab2:	dc 01       	movw	r26, r24
    4ab4:	cb 01       	movw	r24, r22
    4ab6:	8d 8b       	std	Y+21, r24	; 0x15
    4ab8:	9e 8b       	std	Y+22, r25	; 0x16
    4aba:	af 8b       	std	Y+23, r26	; 0x17
    4abc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4abe:	6d 89       	ldd	r22, Y+21	; 0x15
    4ac0:	7e 89       	ldd	r23, Y+22	; 0x16
    4ac2:	8f 89       	ldd	r24, Y+23	; 0x17
    4ac4:	98 8d       	ldd	r25, Y+24	; 0x18
    4ac6:	20 e0       	ldi	r18, 0x00	; 0
    4ac8:	30 e0       	ldi	r19, 0x00	; 0
    4aca:	40 e8       	ldi	r20, 0x80	; 128
    4acc:	5f e3       	ldi	r21, 0x3F	; 63
    4ace:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ad2:	88 23       	and	r24, r24
    4ad4:	2c f4       	brge	.+10     	; 0x4ae0 <Password_u8+0x252>
		__ticks = 1;
    4ad6:	81 e0       	ldi	r24, 0x01	; 1
    4ad8:	90 e0       	ldi	r25, 0x00	; 0
    4ada:	9c 8b       	std	Y+20, r25	; 0x14
    4adc:	8b 8b       	std	Y+19, r24	; 0x13
    4ade:	3f c0       	rjmp	.+126    	; 0x4b5e <Password_u8+0x2d0>
	else if (__tmp > 65535)
    4ae0:	6d 89       	ldd	r22, Y+21	; 0x15
    4ae2:	7e 89       	ldd	r23, Y+22	; 0x16
    4ae4:	8f 89       	ldd	r24, Y+23	; 0x17
    4ae6:	98 8d       	ldd	r25, Y+24	; 0x18
    4ae8:	20 e0       	ldi	r18, 0x00	; 0
    4aea:	3f ef       	ldi	r19, 0xFF	; 255
    4aec:	4f e7       	ldi	r20, 0x7F	; 127
    4aee:	57 e4       	ldi	r21, 0x47	; 71
    4af0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4af4:	18 16       	cp	r1, r24
    4af6:	4c f5       	brge	.+82     	; 0x4b4a <Password_u8+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4af8:	69 8d       	ldd	r22, Y+25	; 0x19
    4afa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4afc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4afe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b00:	20 e0       	ldi	r18, 0x00	; 0
    4b02:	30 e0       	ldi	r19, 0x00	; 0
    4b04:	40 e2       	ldi	r20, 0x20	; 32
    4b06:	51 e4       	ldi	r21, 0x41	; 65
    4b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b0c:	dc 01       	movw	r26, r24
    4b0e:	cb 01       	movw	r24, r22
    4b10:	bc 01       	movw	r22, r24
    4b12:	cd 01       	movw	r24, r26
    4b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b18:	dc 01       	movw	r26, r24
    4b1a:	cb 01       	movw	r24, r22
    4b1c:	9c 8b       	std	Y+20, r25	; 0x14
    4b1e:	8b 8b       	std	Y+19, r24	; 0x13
    4b20:	0f c0       	rjmp	.+30     	; 0x4b40 <Password_u8+0x2b2>
    4b22:	89 e1       	ldi	r24, 0x19	; 25
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	9a 8b       	std	Y+18, r25	; 0x12
    4b28:	89 8b       	std	Y+17, r24	; 0x11
    4b2a:	89 89       	ldd	r24, Y+17	; 0x11
    4b2c:	9a 89       	ldd	r25, Y+18	; 0x12
    4b2e:	01 97       	sbiw	r24, 0x01	; 1
    4b30:	f1 f7       	brne	.-4      	; 0x4b2e <Password_u8+0x2a0>
    4b32:	9a 8b       	std	Y+18, r25	; 0x12
    4b34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b36:	8b 89       	ldd	r24, Y+19	; 0x13
    4b38:	9c 89       	ldd	r25, Y+20	; 0x14
    4b3a:	01 97       	sbiw	r24, 0x01	; 1
    4b3c:	9c 8b       	std	Y+20, r25	; 0x14
    4b3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b40:	8b 89       	ldd	r24, Y+19	; 0x13
    4b42:	9c 89       	ldd	r25, Y+20	; 0x14
    4b44:	00 97       	sbiw	r24, 0x00	; 0
    4b46:	69 f7       	brne	.-38     	; 0x4b22 <Password_u8+0x294>
    4b48:	14 c0       	rjmp	.+40     	; 0x4b72 <Password_u8+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b4a:	6d 89       	ldd	r22, Y+21	; 0x15
    4b4c:	7e 89       	ldd	r23, Y+22	; 0x16
    4b4e:	8f 89       	ldd	r24, Y+23	; 0x17
    4b50:	98 8d       	ldd	r25, Y+24	; 0x18
    4b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b56:	dc 01       	movw	r26, r24
    4b58:	cb 01       	movw	r24, r22
    4b5a:	9c 8b       	std	Y+20, r25	; 0x14
    4b5c:	8b 8b       	std	Y+19, r24	; 0x13
    4b5e:	8b 89       	ldd	r24, Y+19	; 0x13
    4b60:	9c 89       	ldd	r25, Y+20	; 0x14
    4b62:	98 8b       	std	Y+16, r25	; 0x10
    4b64:	8f 87       	std	Y+15, r24	; 0x0f
    4b66:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b68:	98 89       	ldd	r25, Y+16	; 0x10
    4b6a:	01 97       	sbiw	r24, 0x01	; 1
    4b6c:	f1 f7       	brne	.-4      	; 0x4b6a <Password_u8+0x2dc>
    4b6e:	98 8b       	std	Y+16, r25	; 0x10
    4b70:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			return TRUE;
    4b72:	91 e0       	ldi	r25, 0x01	; 1
    4b74:	62 96       	adiw	r28, 0x12	; 18
    4b76:	9f af       	std	Y+63, r25	; 0x3f
    4b78:	62 97       	sbiw	r28, 0x12	; 18
    4b7a:	81 c0       	rjmp	.+258    	; 0x4c7e <Password_u8+0x3f0>
		}
		else
		{
			LCD_VidInitialization();
    4b7c:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_VidInitialization>
			LCD_VidSend_String(Wrong);
    4b80:	ce 01       	movw	r24, r28
    4b82:	c1 96       	adiw	r24, 0x31	; 49
    4b84:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_VidSend_String>
    4b88:	80 e0       	ldi	r24, 0x00	; 0
    4b8a:	90 e0       	ldi	r25, 0x00	; 0
    4b8c:	aa e7       	ldi	r26, 0x7A	; 122
    4b8e:	b4 e4       	ldi	r27, 0x44	; 68
    4b90:	8b 87       	std	Y+11, r24	; 0x0b
    4b92:	9c 87       	std	Y+12, r25	; 0x0c
    4b94:	ad 87       	std	Y+13, r26	; 0x0d
    4b96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b98:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ba0:	20 e0       	ldi	r18, 0x00	; 0
    4ba2:	30 e0       	ldi	r19, 0x00	; 0
    4ba4:	4a e7       	ldi	r20, 0x7A	; 122
    4ba6:	53 e4       	ldi	r21, 0x43	; 67
    4ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bac:	dc 01       	movw	r26, r24
    4bae:	cb 01       	movw	r24, r22
    4bb0:	8f 83       	std	Y+7, r24	; 0x07
    4bb2:	98 87       	std	Y+8, r25	; 0x08
    4bb4:	a9 87       	std	Y+9, r26	; 0x09
    4bb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    4bba:	78 85       	ldd	r23, Y+8	; 0x08
    4bbc:	89 85       	ldd	r24, Y+9	; 0x09
    4bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bc0:	20 e0       	ldi	r18, 0x00	; 0
    4bc2:	30 e0       	ldi	r19, 0x00	; 0
    4bc4:	40 e8       	ldi	r20, 0x80	; 128
    4bc6:	5f e3       	ldi	r21, 0x3F	; 63
    4bc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4bcc:	88 23       	and	r24, r24
    4bce:	2c f4       	brge	.+10     	; 0x4bda <Password_u8+0x34c>
		__ticks = 1;
    4bd0:	81 e0       	ldi	r24, 0x01	; 1
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	9e 83       	std	Y+6, r25	; 0x06
    4bd6:	8d 83       	std	Y+5, r24	; 0x05
    4bd8:	3f c0       	rjmp	.+126    	; 0x4c58 <Password_u8+0x3ca>
	else if (__tmp > 65535)
    4bda:	6f 81       	ldd	r22, Y+7	; 0x07
    4bdc:	78 85       	ldd	r23, Y+8	; 0x08
    4bde:	89 85       	ldd	r24, Y+9	; 0x09
    4be0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4be2:	20 e0       	ldi	r18, 0x00	; 0
    4be4:	3f ef       	ldi	r19, 0xFF	; 255
    4be6:	4f e7       	ldi	r20, 0x7F	; 127
    4be8:	57 e4       	ldi	r21, 0x47	; 71
    4bea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4bee:	18 16       	cp	r1, r24
    4bf0:	4c f5       	brge	.+82     	; 0x4c44 <Password_u8+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bfa:	20 e0       	ldi	r18, 0x00	; 0
    4bfc:	30 e0       	ldi	r19, 0x00	; 0
    4bfe:	40 e2       	ldi	r20, 0x20	; 32
    4c00:	51 e4       	ldi	r21, 0x41	; 65
    4c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c06:	dc 01       	movw	r26, r24
    4c08:	cb 01       	movw	r24, r22
    4c0a:	bc 01       	movw	r22, r24
    4c0c:	cd 01       	movw	r24, r26
    4c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c12:	dc 01       	movw	r26, r24
    4c14:	cb 01       	movw	r24, r22
    4c16:	9e 83       	std	Y+6, r25	; 0x06
    4c18:	8d 83       	std	Y+5, r24	; 0x05
    4c1a:	0f c0       	rjmp	.+30     	; 0x4c3a <Password_u8+0x3ac>
    4c1c:	89 e1       	ldi	r24, 0x19	; 25
    4c1e:	90 e0       	ldi	r25, 0x00	; 0
    4c20:	9c 83       	std	Y+4, r25	; 0x04
    4c22:	8b 83       	std	Y+3, r24	; 0x03
    4c24:	8b 81       	ldd	r24, Y+3	; 0x03
    4c26:	9c 81       	ldd	r25, Y+4	; 0x04
    4c28:	01 97       	sbiw	r24, 0x01	; 1
    4c2a:	f1 f7       	brne	.-4      	; 0x4c28 <Password_u8+0x39a>
    4c2c:	9c 83       	std	Y+4, r25	; 0x04
    4c2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c30:	8d 81       	ldd	r24, Y+5	; 0x05
    4c32:	9e 81       	ldd	r25, Y+6	; 0x06
    4c34:	01 97       	sbiw	r24, 0x01	; 1
    4c36:	9e 83       	std	Y+6, r25	; 0x06
    4c38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    4c3e:	00 97       	sbiw	r24, 0x00	; 0
    4c40:	69 f7       	brne	.-38     	; 0x4c1c <Password_u8+0x38e>
    4c42:	14 c0       	rjmp	.+40     	; 0x4c6c <Password_u8+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c44:	6f 81       	ldd	r22, Y+7	; 0x07
    4c46:	78 85       	ldd	r23, Y+8	; 0x08
    4c48:	89 85       	ldd	r24, Y+9	; 0x09
    4c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c50:	dc 01       	movw	r26, r24
    4c52:	cb 01       	movw	r24, r22
    4c54:	9e 83       	std	Y+6, r25	; 0x06
    4c56:	8d 83       	std	Y+5, r24	; 0x05
    4c58:	8d 81       	ldd	r24, Y+5	; 0x05
    4c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    4c5c:	9a 83       	std	Y+2, r25	; 0x02
    4c5e:	89 83       	std	Y+1, r24	; 0x01
    4c60:	89 81       	ldd	r24, Y+1	; 0x01
    4c62:	9a 81       	ldd	r25, Y+2	; 0x02
    4c64:	01 97       	sbiw	r24, 0x01	; 1
    4c66:	f1 f7       	brne	.-4      	; 0x4c64 <Password_u8+0x3d6>
    4c68:	9a 83       	std	Y+2, r25	; 0x02
    4c6a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_VidInitialization();
    4c6c:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_VidInitialization>
	u8 data,password=ZERO;
	u8 flag=TRUE;
	u8 Enter[16]="Enter Password";
	u8 Wrong[16]="Wrong Password";
	u8 Welcome[16]="Welcome...";
	while(flag)
    4c70:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4c72:	88 23       	and	r24, r24
    4c74:	09 f0       	breq	.+2      	; 0x4c78 <Password_u8+0x3ea>
    4c76:	d2 ce       	rjmp	.-604    	; 0x4a1c <Password_u8+0x18e>
			LCD_VidSend_String(Wrong);
			_delay_ms(1000);
			LCD_VidInitialization();
		}
	}
	return FALSE;
    4c78:	62 96       	adiw	r28, 0x12	; 18
    4c7a:	1f ae       	std	Y+63, r1	; 0x3f
    4c7c:	62 97       	sbiw	r28, 0x12	; 18
    4c7e:	62 96       	adiw	r28, 0x12	; 18
    4c80:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c82:	62 97       	sbiw	r28, 0x12	; 18
}
    4c84:	c0 5a       	subi	r28, 0xA0	; 160
    4c86:	df 4f       	sbci	r29, 0xFF	; 255
    4c88:	0f b6       	in	r0, 0x3f	; 63
    4c8a:	f8 94       	cli
    4c8c:	de bf       	out	0x3e, r29	; 62
    4c8e:	0f be       	out	0x3f, r0	; 63
    4c90:	cd bf       	out	0x3d, r28	; 61
    4c92:	cf 91       	pop	r28
    4c94:	df 91       	pop	r29
    4c96:	08 95       	ret

00004c98 <__mulsi3>:
    4c98:	62 9f       	mul	r22, r18
    4c9a:	d0 01       	movw	r26, r0
    4c9c:	73 9f       	mul	r23, r19
    4c9e:	f0 01       	movw	r30, r0
    4ca0:	82 9f       	mul	r24, r18
    4ca2:	e0 0d       	add	r30, r0
    4ca4:	f1 1d       	adc	r31, r1
    4ca6:	64 9f       	mul	r22, r20
    4ca8:	e0 0d       	add	r30, r0
    4caa:	f1 1d       	adc	r31, r1
    4cac:	92 9f       	mul	r25, r18
    4cae:	f0 0d       	add	r31, r0
    4cb0:	83 9f       	mul	r24, r19
    4cb2:	f0 0d       	add	r31, r0
    4cb4:	74 9f       	mul	r23, r20
    4cb6:	f0 0d       	add	r31, r0
    4cb8:	65 9f       	mul	r22, r21
    4cba:	f0 0d       	add	r31, r0
    4cbc:	99 27       	eor	r25, r25
    4cbe:	72 9f       	mul	r23, r18
    4cc0:	b0 0d       	add	r27, r0
    4cc2:	e1 1d       	adc	r30, r1
    4cc4:	f9 1f       	adc	r31, r25
    4cc6:	63 9f       	mul	r22, r19
    4cc8:	b0 0d       	add	r27, r0
    4cca:	e1 1d       	adc	r30, r1
    4ccc:	f9 1f       	adc	r31, r25
    4cce:	bd 01       	movw	r22, r26
    4cd0:	cf 01       	movw	r24, r30
    4cd2:	11 24       	eor	r1, r1
    4cd4:	08 95       	ret

00004cd6 <__udivmodsi4>:
    4cd6:	a1 e2       	ldi	r26, 0x21	; 33
    4cd8:	1a 2e       	mov	r1, r26
    4cda:	aa 1b       	sub	r26, r26
    4cdc:	bb 1b       	sub	r27, r27
    4cde:	fd 01       	movw	r30, r26
    4ce0:	0d c0       	rjmp	.+26     	; 0x4cfc <__udivmodsi4_ep>

00004ce2 <__udivmodsi4_loop>:
    4ce2:	aa 1f       	adc	r26, r26
    4ce4:	bb 1f       	adc	r27, r27
    4ce6:	ee 1f       	adc	r30, r30
    4ce8:	ff 1f       	adc	r31, r31
    4cea:	a2 17       	cp	r26, r18
    4cec:	b3 07       	cpc	r27, r19
    4cee:	e4 07       	cpc	r30, r20
    4cf0:	f5 07       	cpc	r31, r21
    4cf2:	20 f0       	brcs	.+8      	; 0x4cfc <__udivmodsi4_ep>
    4cf4:	a2 1b       	sub	r26, r18
    4cf6:	b3 0b       	sbc	r27, r19
    4cf8:	e4 0b       	sbc	r30, r20
    4cfa:	f5 0b       	sbc	r31, r21

00004cfc <__udivmodsi4_ep>:
    4cfc:	66 1f       	adc	r22, r22
    4cfe:	77 1f       	adc	r23, r23
    4d00:	88 1f       	adc	r24, r24
    4d02:	99 1f       	adc	r25, r25
    4d04:	1a 94       	dec	r1
    4d06:	69 f7       	brne	.-38     	; 0x4ce2 <__udivmodsi4_loop>
    4d08:	60 95       	com	r22
    4d0a:	70 95       	com	r23
    4d0c:	80 95       	com	r24
    4d0e:	90 95       	com	r25
    4d10:	9b 01       	movw	r18, r22
    4d12:	ac 01       	movw	r20, r24
    4d14:	bd 01       	movw	r22, r26
    4d16:	cf 01       	movw	r24, r30
    4d18:	08 95       	ret

00004d1a <__prologue_saves__>:
    4d1a:	2f 92       	push	r2
    4d1c:	3f 92       	push	r3
    4d1e:	4f 92       	push	r4
    4d20:	5f 92       	push	r5
    4d22:	6f 92       	push	r6
    4d24:	7f 92       	push	r7
    4d26:	8f 92       	push	r8
    4d28:	9f 92       	push	r9
    4d2a:	af 92       	push	r10
    4d2c:	bf 92       	push	r11
    4d2e:	cf 92       	push	r12
    4d30:	df 92       	push	r13
    4d32:	ef 92       	push	r14
    4d34:	ff 92       	push	r15
    4d36:	0f 93       	push	r16
    4d38:	1f 93       	push	r17
    4d3a:	cf 93       	push	r28
    4d3c:	df 93       	push	r29
    4d3e:	cd b7       	in	r28, 0x3d	; 61
    4d40:	de b7       	in	r29, 0x3e	; 62
    4d42:	ca 1b       	sub	r28, r26
    4d44:	db 0b       	sbc	r29, r27
    4d46:	0f b6       	in	r0, 0x3f	; 63
    4d48:	f8 94       	cli
    4d4a:	de bf       	out	0x3e, r29	; 62
    4d4c:	0f be       	out	0x3f, r0	; 63
    4d4e:	cd bf       	out	0x3d, r28	; 61
    4d50:	09 94       	ijmp

00004d52 <__epilogue_restores__>:
    4d52:	2a 88       	ldd	r2, Y+18	; 0x12
    4d54:	39 88       	ldd	r3, Y+17	; 0x11
    4d56:	48 88       	ldd	r4, Y+16	; 0x10
    4d58:	5f 84       	ldd	r5, Y+15	; 0x0f
    4d5a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4d5c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4d5e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4d60:	9b 84       	ldd	r9, Y+11	; 0x0b
    4d62:	aa 84       	ldd	r10, Y+10	; 0x0a
    4d64:	b9 84       	ldd	r11, Y+9	; 0x09
    4d66:	c8 84       	ldd	r12, Y+8	; 0x08
    4d68:	df 80       	ldd	r13, Y+7	; 0x07
    4d6a:	ee 80       	ldd	r14, Y+6	; 0x06
    4d6c:	fd 80       	ldd	r15, Y+5	; 0x05
    4d6e:	0c 81       	ldd	r16, Y+4	; 0x04
    4d70:	1b 81       	ldd	r17, Y+3	; 0x03
    4d72:	aa 81       	ldd	r26, Y+2	; 0x02
    4d74:	b9 81       	ldd	r27, Y+1	; 0x01
    4d76:	ce 0f       	add	r28, r30
    4d78:	d1 1d       	adc	r29, r1
    4d7a:	0f b6       	in	r0, 0x3f	; 63
    4d7c:	f8 94       	cli
    4d7e:	de bf       	out	0x3e, r29	; 62
    4d80:	0f be       	out	0x3f, r0	; 63
    4d82:	cd bf       	out	0x3d, r28	; 61
    4d84:	ed 01       	movw	r28, r26
    4d86:	08 95       	ret

00004d88 <itoa>:
    4d88:	fb 01       	movw	r30, r22
    4d8a:	9f 01       	movw	r18, r30
    4d8c:	e8 94       	clt
    4d8e:	42 30       	cpi	r20, 0x02	; 2
    4d90:	c4 f0       	brlt	.+48     	; 0x4dc2 <itoa+0x3a>
    4d92:	45 32       	cpi	r20, 0x25	; 37
    4d94:	b4 f4       	brge	.+44     	; 0x4dc2 <itoa+0x3a>
    4d96:	4a 30       	cpi	r20, 0x0A	; 10
    4d98:	29 f4       	brne	.+10     	; 0x4da4 <itoa+0x1c>
    4d9a:	97 fb       	bst	r25, 7
    4d9c:	1e f4       	brtc	.+6      	; 0x4da4 <itoa+0x1c>
    4d9e:	90 95       	com	r25
    4da0:	81 95       	neg	r24
    4da2:	9f 4f       	sbci	r25, 0xFF	; 255
    4da4:	64 2f       	mov	r22, r20
    4da6:	77 27       	eor	r23, r23
    4da8:	0e 94 f5 26 	call	0x4dea	; 0x4dea <__udivmodhi4>
    4dac:	80 5d       	subi	r24, 0xD0	; 208
    4dae:	8a 33       	cpi	r24, 0x3A	; 58
    4db0:	0c f0       	brlt	.+2      	; 0x4db4 <itoa+0x2c>
    4db2:	89 5d       	subi	r24, 0xD9	; 217
    4db4:	81 93       	st	Z+, r24
    4db6:	cb 01       	movw	r24, r22
    4db8:	00 97       	sbiw	r24, 0x00	; 0
    4dba:	a1 f7       	brne	.-24     	; 0x4da4 <itoa+0x1c>
    4dbc:	16 f4       	brtc	.+4      	; 0x4dc2 <itoa+0x3a>
    4dbe:	5d e2       	ldi	r21, 0x2D	; 45
    4dc0:	51 93       	st	Z+, r21
    4dc2:	10 82       	st	Z, r1
    4dc4:	c9 01       	movw	r24, r18
    4dc6:	0c 94 e5 26 	jmp	0x4dca	; 0x4dca <strrev>

00004dca <strrev>:
    4dca:	dc 01       	movw	r26, r24
    4dcc:	fc 01       	movw	r30, r24
    4dce:	67 2f       	mov	r22, r23
    4dd0:	71 91       	ld	r23, Z+
    4dd2:	77 23       	and	r23, r23
    4dd4:	e1 f7       	brne	.-8      	; 0x4dce <strrev+0x4>
    4dd6:	32 97       	sbiw	r30, 0x02	; 2
    4dd8:	04 c0       	rjmp	.+8      	; 0x4de2 <strrev+0x18>
    4dda:	7c 91       	ld	r23, X
    4ddc:	6d 93       	st	X+, r22
    4dde:	70 83       	st	Z, r23
    4de0:	62 91       	ld	r22, -Z
    4de2:	ae 17       	cp	r26, r30
    4de4:	bf 07       	cpc	r27, r31
    4de6:	c8 f3       	brcs	.-14     	; 0x4dda <strrev+0x10>
    4de8:	08 95       	ret

00004dea <__udivmodhi4>:
    4dea:	aa 1b       	sub	r26, r26
    4dec:	bb 1b       	sub	r27, r27
    4dee:	51 e1       	ldi	r21, 0x11	; 17
    4df0:	07 c0       	rjmp	.+14     	; 0x4e00 <__udivmodhi4_ep>

00004df2 <__udivmodhi4_loop>:
    4df2:	aa 1f       	adc	r26, r26
    4df4:	bb 1f       	adc	r27, r27
    4df6:	a6 17       	cp	r26, r22
    4df8:	b7 07       	cpc	r27, r23
    4dfa:	10 f0       	brcs	.+4      	; 0x4e00 <__udivmodhi4_ep>
    4dfc:	a6 1b       	sub	r26, r22
    4dfe:	b7 0b       	sbc	r27, r23

00004e00 <__udivmodhi4_ep>:
    4e00:	88 1f       	adc	r24, r24
    4e02:	99 1f       	adc	r25, r25
    4e04:	5a 95       	dec	r21
    4e06:	a9 f7       	brne	.-22     	; 0x4df2 <__udivmodhi4_loop>
    4e08:	80 95       	com	r24
    4e0a:	90 95       	com	r25
    4e0c:	bc 01       	movw	r22, r24
    4e0e:	cd 01       	movw	r24, r26
    4e10:	08 95       	ret

00004e12 <_exit>:
    4e12:	f8 94       	cli

00004e14 <__stop_program>:
    4e14:	ff cf       	rjmp	.-2      	; 0x4e14 <__stop_program>
